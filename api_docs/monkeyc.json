[
{
  "type": "namespace",
  "name": "Toybox",
  "url": "https://developer.garmin.com/connect-iq/api-docs/",
  "modules": [
    "Toybox.Activity",
    "Toybox.ActivityMonitor",
    "Toybox.ActivityRecording",
    "Toybox.Ant",
    "Toybox.AntPlus",
    "Toybox.Application",
    "Toybox.Attention",
    "Toybox.Authentication",
    "Toybox.Background",
    "Toybox.BluetoothLowEnergy",
    "Toybox.Communications",
    "Toybox.Complications",
    "Toybox.Cryptography",
    "Toybox.FitContributor",
    "Toybox.Graphics",
    "Toybox.Lang",
    "Toybox.Math",
    "Toybox.Media",
    "Toybox.PersistedContent",
    "Toybox.PersistedLocations",
    "Toybox.Position",
    "Toybox.Sensor",
    "Toybox.SensorHistory",
    "Toybox.SensorLogging",
    "Toybox.StringUtil",
    "Toybox.System",
    "Toybox.Test",
    "Toybox.Time",
    "Toybox.Timer",
    "Toybox.UserProfile",
    "Toybox.WatchUi",
    "Toybox.Weather"
  ],
  "docstring": "The Toybox namespace is the top-level namespace for the Connect IQ SDK. It contains all the modules and classes that are available to Connect IQ apps."
},
{
  "type": "module",
  "name": "Toybox.Weather",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Weather.html",
  "docstring": "The Weather module provides functionality for accessing information related to the current weather.",
  "classes": [
    "CurrentConditions",
    "DailyForecast",
    "HourlyForecast"
  ],
  "constants": [
    {
      "name": "CONDITION_CLEAR",
      "value": "0",
      "since": "API Level 3.2.0",
      "description": "Clear",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_PARTLY_CLOUDY",
      "value": "1",
      "since": "API Level 3.2.0",
      "description": "Partly cloudy",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_MOSTLY_CLOUDY",
      "value": "2",
      "since": "API Level 3.2.0",
      "description": "Mostly cloudy",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_RAIN",
      "value": "3",
      "since": "API Level 3.2.0",
      "description": "Rain",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_SNOW",
      "value": "4",
      "since": "API Level 3.2.0",
      "description": "Snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_WINDY",
      "value": "5",
      "since": "API Level 3.2.0",
      "description": "Windy",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_THUNDERSTORMS",
      "value": "6",
      "since": "API Level 3.2.0",
      "description": "Thunderstorms",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_WINTRY_MIX",
      "value": "7",
      "since": "API Level 3.2.0",
      "description": "Wintry mix",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_FOG",
      "value": "8",
      "since": "API Level 3.2.0",
      "description": "Fog",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_HAZY",
      "value": "9",
      "since": "API Level 3.2.0",
      "description": "Hazy",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_HAIL",
      "value": "10",
      "since": "API Level 3.2.0",
      "description": "Hail",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_SCATTERED_SHOWERS",
      "value": "11",
      "since": "API Level 3.2.0",
      "description": "Scattered showers",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_SCATTERED_THUNDERSTORMS",
      "value": "12",
      "since": "API Level 3.2.0",
      "description": "Scattered thunderstorms",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_UNKNOWN_PRECIPITATION",
      "value": "13",
      "since": "API Level 3.2.0",
      "description": "Unknown precipitation",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_LIGHT_RAIN",
      "value": "14",
      "since": "API Level 3.2.0",
      "description": "Light rain",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_HEAVY_RAIN",
      "value": "15",
      "since": "API Level 3.2.0",
      "description": "Heavy rain",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_LIGHT_SNOW",
      "value": "16",
      "since": "API Level 3.2.0",
      "description": "Light snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_HEAVY_SNOW",
      "value": "17",
      "since": "API Level 3.2.0",
      "description": "Heavy snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_LIGHT_RAIN_SNOW",
      "value": "18",
      "since": "API Level 3.2.0",
      "description": "Light rain snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_HEAVY_RAIN_SNOW",
      "value": "19",
      "since": "API Level 3.2.0",
      "description": "Heavy rain snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_CLOUDY",
      "value": "20",
      "since": "API Level 3.2.0",
      "description": "Cloudy",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_RAIN_SNOW",
      "value": "21",
      "since": "API Level 3.2.0",
      "description": "Rain snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_PARTLY_CLEAR",
      "value": "22",
      "since": "API Level 3.2.0",
      "description": "Partly clear",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_MOSTLY_CLEAR",
      "value": "23",
      "since": "API Level 3.2.0",
      "description": "Mostly clear",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_LIGHT_SHOWERS",
      "value": "24",
      "since": "API Level 3.2.0",
      "description": "Light showers",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_SHOWERS",
      "value": "25",
      "since": "API Level 3.2.0",
      "description": "Showers",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_HEAVY_SHOWERS",
      "value": "26",
      "since": "API Level 3.2.0",
      "description": "Heavy showers",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_CHANCE_OF_SHOWERS",
      "value": "27",
      "since": "API Level 3.2.0",
      "description": "Chance of showers",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_CHANCE_OF_THUNDERSTORMS",
      "value": "28",
      "since": "API Level 3.2.0",
      "description": "Chance of thunderstorms",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_MIST",
      "value": "29",
      "since": "API Level 3.2.0",
      "description": "Mist",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_DUST",
      "value": "30",
      "since": "API Level 3.2.0",
      "description": "Dust",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_DRIZZLE",
      "value": "31",
      "since": "API Level 3.2.0",
      "description": "Drizzle",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_TORNADO",
      "value": "32",
      "since": "API Level 3.2.0",
      "description": "Tornado",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_SMOKE",
      "value": "33",
      "since": "API Level 3.2.0",
      "description": "Smoke",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_ICE",
      "value": "34",
      "since": "API Level 3.2.0",
      "description": "Ice",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_SAND",
      "value": "35",
      "since": "API Level 3.2.0",
      "description": "Sand",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_SQUALL",
      "value": "36",
      "since": "API Level 3.2.0",
      "description": "Squall",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_SANDSTORM",
      "value": "37",
      "since": "API Level 3.2.0",
      "description": "Sandstorm",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_VOLCANIC_ASH",
      "value": "38",
      "since": "API Level 3.2.0",
      "description": "Volcanic ash",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_HAZE",
      "value": "39",
      "since": "API Level 3.2.0",
      "description": "Haze",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_FAIR",
      "value": "40",
      "since": "API Level 3.2.0",
      "description": "Fair",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_HURRICANE",
      "value": "41",
      "since": "API Level 3.2.0",
      "description": "Hurricane",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_TROPICAL_STORM",
      "value": "42",
      "since": "API Level 3.2.0",
      "description": "Tropical storm",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_CHANCE_OF_SNOW",
      "value": "43",
      "since": "API Level 3.2.0",
      "description": "Chance of snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_CHANCE_OF_RAIN_SNOW",
      "value": "44",
      "since": "API Level 3.2.0",
      "description": "Chance of rain snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_CLOUDY_CHANCE_OF_RAIN",
      "value": "45",
      "since": "API Level 3.2.0",
      "description": "Cloudy chance of rain",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_CLOUDY_CHANCE_OF_SNOW",
      "value": "46",
      "since": "API Level 3.2.0",
      "description": "Cloudy chance of snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_CLOUDY_CHANCE_OF_RAIN_SNOW",
      "value": "47",
      "since": "API Level 3.2.0",
      "description": "Cloudy chance of rain snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_FLURRIES",
      "value": "48",
      "since": "API Level 3.2.0",
      "description": "Flurries",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_FREEZING_RAIN",
      "value": "49",
      "since": "API Level 3.2.0",
      "description": "Freezing rain",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_SLEET",
      "value": "50",
      "since": "API Level 3.2.0",
      "description": "Sleet",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_ICE_SNOW",
      "value": "51",
      "since": "API Level 3.2.0",
      "description": "Ice snow",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_THIN_CLOUDS",
      "value": "52",
      "since": "API Level 3.2.0",
      "description": "Thin clouds",
      "parent": "Condition"
    },
    {
      "name": "CONDITION_UNKNOWN",
      "value": "53",
      "since": "API Level 3.2.0",
      "description": "Unknown",
      "parent": "Condition"
    }
  ],
  "methods": [
    {
      "name": "getCurrentConditions",
      "ast": {
        "name": "getCurrentConditions",
        "parameters": [],
        "returns": [
          {
            "type": "Weather.CurrentConditions"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Weather.CurrentConditions"
      ]
    },
    {
      "name": "getDailyForecast",
      "ast": {
        "name": "getDailyForecast",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Weather.DailyForecast"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Weather.DailyForecast"
      ]
    },
    {
      "name": "getHourlyForecast",
      "ast": {
        "name": "getHourlyForecast",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Weather.HourlyForecast"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Weather.HourlyForecast"
      ]
    },
    {
      "name": "getSunrise",
      "ast": {
        "name": "getSunrise",
        "parameters": [
          {
            "name": "location",
            "types": [
              {
                "type": "Position.Location"
              }
            ]
          },
          {
            "name": "date",
            "types": [
              {
                "type": "Time.Moment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Moment"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "location",
          "docstring": "Location to get the sunrise information"
        },
        {
          "name": "date",
          "docstring": "date to get the sunrise information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    },
    {
      "name": "getSunset",
      "ast": {
        "name": "getSunset",
        "parameters": [
          {
            "name": "location",
            "types": [
              {
                "type": "Position.Location"
              }
            ]
          },
          {
            "name": "date",
            "types": [
              {
                "type": "Time.Moment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Moment"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "location",
          "docstring": "Location to get the sunset information"
        },
        {
          "name": "date",
          "docstring": "date to get the sunset information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.WatchUi",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi.html",
  "docstring": "The WatchUi module contains user interface elements available within apps.  WatchUi provides several classes that represent Views, or what is displayed on the screen of a device. Also available are UI elements like on-screen menus, progress bars, buttons, and various pickers. More abstract classes represent all drawable objects, such as bitmaps and text.",
  "classes": [
    "ActionMenu",
    "ActionMenuDelegate",
    "ActionMenuItem",
    "AnimationDelegate",
    "AnimationLayer",
    "AnimationResource",
    "BehaviorDelegate",
    "Bitmap",
    "BitmapResource",
    "Button",
    "CheckboxMenu",
    "CheckboxMenuItem",
    "ClickEvent",
    "Confirmation",
    "ConfirmationDelegate",
    "CustomMenu",
    "CustomMenuItem",
    "DataField",
    "DataFieldAlert",
    "DragEvent",
    "Drawable",
    "FlickEvent",
    "FontResource",
    "GlanceView",
    "GlanceViewDelegate",
    "IconMenuItem",
    "InputDelegate",
    "InvalidMenuItemTypeException",
    "InvalidPointException",
    "InvalidSelectableStateException",
    "KeyEvent",
    "Layer",
    "MapMarker",
    "MapPolyline",
    "MapTrackView",
    "MapView",
    "Menu",
    "Menu2",
    "Menu2InputDelegate",
    "MenuInputDelegate",
    "MenuItem",
    "NumberPicker",
    "NumberPickerDelegate",
    "Picker",
    "PickerDelegate",
    "PickerFactory",
    "ProgressBar",
    "ReviewResponseToken",
    "Selectable",
    "SelectableEvent",
    "SimpleDataField",
    "SwipeEvent",
    "Text",
    "TextArea",
    "TextPicker",
    "TextPickerDelegate",
    "ToggleMenuItem",
    "View",
    "ViewLoop",
    "ViewLoopDelegate",
    "ViewLoopFactory",
    "WatchFace",
    "WatchFaceDelegate",
    "WatchFacePowerInfo"
  ],
  "constants": [
    {
      "name": "KEY_POWER",
      "value": "0",
      "since": "API Level 1.0.0",
      "description": "The power key",
      "parent": "Key"
    },
    {
      "name": "KEY_LIGHT",
      "value": "1",
      "since": "API Level 1.0.0",
      "description": "The light key",
      "parent": "Key"
    },
    {
      "name": "KEY_ZIN",
      "value": "2",
      "since": "API Level 1.0.0",
      "description": "The zoom in key",
      "parent": "Key"
    },
    {
      "name": "KEY_ZOUT",
      "value": "3",
      "since": "API Level 1.0.0",
      "description": "The zoom out key",
      "parent": "Key"
    },
    {
      "name": "KEY_ENTER",
      "value": "4",
      "since": "API Level 1.0.0",
      "description": "The enter key",
      "parent": "Key"
    },
    {
      "name": "KEY_ESC",
      "value": "5",
      "since": "API Level 1.0.0",
      "description": "The escape key",
      "parent": "Key"
    },
    {
      "name": "KEY_FIND",
      "value": "6",
      "since": "API Level 1.0.0",
      "description": "The find key",
      "parent": "Key"
    },
    {
      "name": "KEY_MENU",
      "value": "7",
      "since": "API Level 1.0.0",
      "description": "The menu key",
      "parent": "Key"
    },
    {
      "name": "KEY_DOWN",
      "value": "8",
      "since": "API Level 1.0.0",
      "description": "The down key",
      "parent": "Key"
    },
    {
      "name": "KEY_DOWN_LEFT",
      "value": "9",
      "since": "API Level 1.0.0",
      "description": "The down left key",
      "parent": "Key"
    },
    {
      "name": "KEY_DOWN_RIGHT",
      "value": "10",
      "since": "API Level 1.0.0",
      "description": "The down key",
      "parent": "Key"
    },
    {
      "name": "KEY_LEFT",
      "value": "11",
      "since": "API Level 1.0.0",
      "description": "The left key",
      "parent": "Key"
    },
    {
      "name": "KEY_RIGHT",
      "value": "12",
      "since": "API Level 1.0.0",
      "description": "The right key",
      "parent": "Key"
    },
    {
      "name": "KEY_UP",
      "value": "13",
      "since": "API Level 1.0.0",
      "description": "The up key",
      "parent": "Key"
    },
    {
      "name": "KEY_UP_LEFT",
      "value": "14",
      "since": "API Level 1.0.0",
      "description": "The up-left",
      "parent": "Key"
    },
    {
      "name": "KEY_UP_RIGHT",
      "value": "15",
      "since": "API Level 1.0.0",
      "description": "The up-right key",
      "parent": "Key"
    },
    {
      "name": "EXTENDED_KEYS",
      "value": "16",
      "since": "API Level 1.1.2",
      "description": "Indicates extended key support",
      "parent": "Key"
    },
    {
      "name": "KEY_PAGE",
      "value": "17",
      "since": "API Level 1.1.2",
      "description": "The page key",
      "parent": "Key"
    },
    {
      "name": "KEY_START",
      "value": "18",
      "since": "API Level 1.1.2",
      "description": "The start key",
      "parent": "Key"
    },
    {
      "name": "KEY_LAP",
      "value": "19",
      "since": "API Level 1.1.2",
      "description": "The lap key",
      "parent": "Key"
    },
    {
      "name": "KEY_RESET",
      "value": "20",
      "since": "API Level 1.1.2",
      "description": "The reset key",
      "parent": "Key"
    },
    {
      "name": "KEY_SPORT",
      "value": "21",
      "since": "API Level 1.1.2",
      "description": "The sport key",
      "parent": "Key"
    },
    {
      "name": "KEY_CLOCK",
      "value": "22",
      "since": "API Level 1.1.2",
      "description": "The clock key",
      "parent": "Key"
    },
    {
      "name": "KEY_MODE",
      "value": "23",
      "since": "API Level 1.1.2",
      "description": "The mode key",
      "parent": "Key"
    }
  ],
  "typedefs": [
    {
      "name": "InputDelegates",
      "types": [
        "WatchUi.InputDelegate",
        "WatchUi.BehaviorDelegate",
        "WatchUi.ConfirmationDelegate",
        "WatchUi.MenuInputDelegate",
        "WatchUi.NumberPickerDelegate",
        "WatchUi.PickerDelegate",
        "WatchUi.TextPickerDelegate",
        "WatchUi.WatchFaceDelegate",
        "WatchUi.Menu2InputDelegate",
        "WatchUi.ViewLoopDelegate"
      ]
    },
    {
      "name": "Resource",
      "types": [
        "Lang.Array",
        "Lang.Dictionary",
        "Lang.String",
        "WatchUi.AnimationResource",
        "WatchUi.BitmapResource",
        "WatchUi.FontResource",
        "Graphics.BitmapReference",
        "Graphics.FontReference"
      ]
    },
    {
      "name": "Views",
      "types": [
        "WatchUi.View",
        "WatchUi.Menu",
        "WatchUi.TextPicker",
        "WatchUi.ProgressBar",
        "WatchUi.Confirmation",
        "WatchUi.NumberPicker",
        "WatchUi.ViewLoop"
      ]
    }
  ],
  "methods": [
    {
      "name": "animate",
      "ast": {
        "name": "animate",
        "parameters": [
          {
            "name": "object"
          },
          {
            "name": "property",
            "types": [
              {
                "type": "Lang.Symbol"
              }
            ]
          },
          {
            "name": "type",
            "types": [
              {
                "type": "WatchUi.AnimationType"
              }
            ]
          },
          {
            "name": "start",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "stop",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "period",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "callback",
            "types": [
              {
                "type": "Null"
              },
              {
                "type": "Lang.Method",
                "parameters": [],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The object to animate"
        },
        {
          "name": "property",
          "docstring": "The Symbol of the object's property to animate (e.g. :locX, :locY, etc.)"
        },
        {
          "name": "type",
          "docstring": "A WatchUi.ANIM_TYPE_* value"
        },
        {
          "name": "start",
          "docstring": "The starting value of the property"
        },
        {
          "name": "stop",
          "docstring": "The ending value of the property"
        },
        {
          "name": "period",
          "docstring": "The duration of the animation in seconds"
        },
        {
          "name": "callback",
          "docstring": "A Method to call when the animation is complete; this can be `null`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "cancelAllAnimations",
      "ast": {
        "name": "cancelAllAnimations",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getCurrentView",
      "ast": {
        "name": "getCurrentView",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "WatchUi.View"
              },
              {
                "type": "WatchUi.InputDelegates"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getSubscreen",
      "ast": {
        "name": "getSubscreen",
        "parameters": [],
        "returns": [
          {
            "type": "Graphics.BoundingBox"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Graphics.BoundingBox"
      ]
    },
    {
      "name": "loadResource",
      "ast": {
        "name": "loadResource",
        "parameters": [
          {
            "name": "resource",
            "types": [
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "WatchUi.Resource"
          }
        ]
      },
      "parameters": [
        {
          "name": "resource",
          "docstring": "An identifier for a resource defined in the project's `resources.xml` file"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array",
        "Lang.Dictionary",
        "Lang.String",
        "WatchUi.AnimationResource",
        "Graphics.BitmapReference"
      ]
    },
    {
      "name": "makeReviewTokenRequest",
      "ast": {
        "name": "makeReviewTokenRequest",
        "parameters": [
          {
            "name": "callback",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "responseStatus",
                    "types": [
                      {
                        "type": "WatchUi.ReviewRequestStatus"
                      }
                    ]
                  },
                  {
                    "name": "token",
                    "types": [
                      {
                        "type": "WatchUi.ReviewResponseToken"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "callback",
          "docstring": "Callback to invoke when the review token request has completed."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "popView",
      "ast": {
        "name": "popView",
        "parameters": [
          {
            "name": "transition",
            "types": [
              {
                "type": "WatchUi.SlideType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "transition",
          "docstring": "A WatchUi.SLIDE_* value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown if called from background, data field, glance, or watch face app; or of called from the base page of a widget"
        }
      ],
      "returns": []
    },
    {
      "name": "pushView",
      "ast": {
        "name": "pushView",
        "parameters": [
          {
            "name": "view",
            "types": [
              {
                "type": "WatchUi.Views"
              }
            ]
          },
          {
            "name": "delegate",
            "types": [
              {
                "type": "WatchUi.InputDelegates"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "transition",
            "types": [
              {
                "type": "WatchUi.SlideType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "view",
          "docstring": "View to push"
        },
        {
          "name": "delegate",
          "docstring": "The input delegate to handle input for the View"
        },
        {
          "name": "transition",
          "docstring": "A WatchUi.SLIDE_* value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown when view is type [MapView](../Toybox/WatchUi/MapView.html) and the visible map area parameters are invalid"
        },
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown if called from background, data field, glance, or watch face app; or if the new view is a [DataField](../Toybox/WatchUi/DataField.html), a [GlanceView](../Toybox/WatchUi/GlanceView.html), or a [WatchFace](../Toybox/WatchUi/WatchFace.html)"
        }
      ],
      "returns": []
    },
    {
      "name": "requestUpdate",
      "ast": {
        "name": "requestUpdate",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "showActionMenu",
      "ast": {
        "name": "showActionMenu",
        "parameters": [
          {
            "name": "menu",
            "types": [
              {
                "type": "WatchUi.ActionMenu"
              }
            ]
          },
          {
            "name": "delegate",
            "types": [
              {
                "type": "WatchUi.ActionMenuDelegate"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "menu",
          "docstring": "An action menu object."
        },
        {
          "name": "delegate",
          "docstring": "An action menu delegate object."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "showToast",
      "ast": {
        "name": "showToast",
        "parameters": [
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":icon",
                    "types": [
                      {
                        "type": "WatchUi.BitmapResource"
                      },
                      {
                        "type": "Graphics.BitmapReference"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "text",
          "docstring": "The text to display in the notification toast."
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options.",
          "dictionary_keys": [
            {
              "name": ":icon",
              "docstring": "The icon to display with this notification. If no icon is provided and the system requires an icon for a toast, the app icon will be used."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "startUserReview",
      "ast": {
        "name": "startUserReview",
        "parameters": [
          {
            "name": "token",
            "types": [
              {
                "type": "WatchUi.ReviewResponseToken"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "token",
          "docstring": "The token that passed as a parameter to a successful call to ReviewResponseCallback."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "if `token` is not a ReviewResponseToken."
        }
      ],
      "returns": []
    },
    {
      "name": "switchToView",
      "ast": {
        "name": "switchToView",
        "parameters": [
          {
            "name": "view",
            "types": [
              {
                "type": "WatchUi.Views"
              }
            ]
          },
          {
            "name": "delegate",
            "types": [
              {
                "type": "WatchUi.InputDelegates"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "transition",
            "types": [
              {
                "type": "WatchUi.SlideType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "view",
          "docstring": "The View object to push"
        },
        {
          "name": "delegate",
          "docstring": "The input delegate to handle input for the View"
        },
        {
          "name": "transition",
          "docstring": "A WatchUi.SLIDE_* value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown if called from background, data field, glance, or watch face app; or of called from the base page of a widget and the new view is native; or if the new view is a [DataField](../Toybox/WatchUi/DataField.html), a [GlanceView](../Toybox/WatchUi/GlanceView.html), or a [WatchFace](../Toybox/WatchUi/WatchFace.html)"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.UserProfile",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/UserProfile.html",
  "docstring": "The UserProfile module will allow apps to access user information.  The module contains the GENDER_* enum to retrieve gender information from the user profile. The HR_ZONE_SPORT_* enum also provides constants for defining different sport type. This is used to retrieve Heart Rate Zones specific to that sport.",
  "classes": [
    "Profile",
    "UserActivity",
    "UserActivityHistoryIterator"
  ],
  "constants": [
    {
      "name": "GENDER_FEMALE",
      "value": "0",
      "since": "API Level 1.0.0",
      "parent": "Gender"
    },
    {
      "name": "GENDER_MALE",
      "value": "1",
      "since": "API Level 1.0.0",
      "parent": "Gender"
    },
    {
      "name": "GENDER_UNSPECIFIED",
      "value": "2",
      "since": "API Level 4.2.3",
      "parent": "Gender"
    }
  ],
  "methods": [
    {
      "name": "getCurrentSport",
      "ast": {
        "name": "getCurrentSport",
        "parameters": [],
        "returns": [
          {
            "type": "UserProfile.SportHrZone"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getHeartRateZones",
      "ast": {
        "name": "getHeartRateZones",
        "parameters": [
          {
            "name": "sport",
            "types": [
              {
                "type": "UserProfile.SportHrZone"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "sport",
          "docstring": "The sport that zones are being requested from. Should be a HR_ZONE_SPORT_* value."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getProfile",
      "ast": {
        "name": "getProfile",
        "parameters": [],
        "returns": [
          {
            "type": "UserProfile.Profile"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "UserProfile.Profile"
      ]
    },
    {
      "name": "getUserActivityHistory",
      "ast": {
        "name": "getUserActivityHistory",
        "parameters": [],
        "returns": [
          {
            "type": "UserProfile.UserActivityHistoryIterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "UserProfile.UserActivityHistoryIterator"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Timer",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Timer.html",
  "docstring": "The Timer module allows access to a Timer object.  This Timer can be used to run code at some point in the future or at a regular interval.",
  "classes": [
    "Timer"
  ]
},
{
  "type": "module",
  "name": "Toybox.Time",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Time.html",
  "docstring": "The Time module provides functionality for dealing with times and dates.  There are two main concepts used by Monkey C when working with time: the [Moment](../Toybox/Time/Moment.html) and [Duration](../Toybox/Time/Duration.html). A Moment is a single point in time, while a Duration is a span of time. Moments and Durations can be used together for time calculations in the following ways:                  Expression           Method               Result    Notes       ---------------------------------------------------------------------------       Moment + Moment      -                    -         Invalid       Moment + Duration    Moment.add()         Moment    A later Moment       Moment - Moment      Moment.subtract()    Duration  The span between Moments       Moment - Duration    Moment.subtract()    Moment    An earlier Moment            Duration + Duration  Duration.add()       Duration  A longer Duration       Duration + Moment    Duration.add()       Moment    A later Moment       Duration - Duration  Duration.subtract()  Duration  A shorter Duration       Duration - Moment    -                    -         Invalid            Dates and times are generally represented in UTC time from the UNIX epoch, with the exception of the [Gregorian Moment](../Toybox/Time/Gregorian.html#moment-instance_function), which are created relative to the current local time.  Date and time formatting in Monkey C is relatively open-ended, providing some formatting constants for short, medium, and long formatting (long and medium formatting are currently equivalent).                  Constant          Seconds  Minutes  Hours  Day of Week  Day  Month  Year       ---------------------------------------------------------------------------       FORMAT_SHORT   |  0        0        0      4            1    3      2017       FORMAT_MEDIUM  |  0        0        0      Wed          1    Mar    2017       FORMAT_LONG    |  0        0        0      Wed          1    Mar    2017",
  "modules": [
    "Time.Gregorian"
  ],
  "classes": [
    "Duration",
    "LocalMoment",
    "Moment",
    "RealTimeClockNotValidException"
  ],
  "constants": [
    {
      "name": "FORMAT_SHORT",
      "value": "0",
      "since": "API Level 1.0.0",
      "description": "Short formatting is a numerical representation of date/time.",
      "parent": "DateFormat"
    },
    {
      "name": "FORMAT_MEDIUM",
      "value": "1",
      "since": "API Level 1.0.0",
      "description": "Medium formatting is a mix of Numbers and Strings depending on which\nfunction is called. If formatted as a String, the result is an abbreviated\nform of the time or date.",
      "parent": "DateFormat"
    },
    {
      "name": "FORMAT_LONG",
      "value": "2",
      "since": "API Level 1.0.0",
      "description": "Long formatting is a mix of Numbers and Strings depending on which\nfunction is called. If formatted as a String, the result is an abbreviated\nform of the time or date.",
      "parent": "DateFormat"
    }
  ],
  "methods": [
    {
      "name": "getCurrentTime",
      "ast": {
        "name": "getCurrentTime",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":currentTimeType",
                    "types": [
                      {
                        "type": "Time.CurrentTime"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Moment"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Clock options",
          "dictionary_keys": [
            {
              "name": ":currentTimeType",
              "docstring": "A Time.CURRENT_TIME_* value, which defaults to Time.CURRENT_TIME_DEFAULT if no time type is provided"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Time.RealTimeClockNotValidException"
          ],
          "docstring": "Thrown if Time.CURRENT_TIME_RTC is passed as an option and the real-time clock value is not valid, i.e. synced with trusted source such as GPS."
        }
      ],
      "returns": []
    },
    {
      "name": "now",
      "ast": {
        "name": "now",
        "parameters": [],
        "returns": [
          {
            "type": "Time.Moment"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    },
    {
      "name": "today",
      "ast": {
        "name": "today",
        "parameters": [],
        "returns": [
          {
            "type": "Time.Moment"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Test",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Test.html",
  "docstring": "The Test module provides a testing framework for Monkey C.  The test module provides the tools to implement your own unit test and asserts in your source code. Unit tests take a [Logger](../Toybox/Test/Logger.html) object and allow for different levels of output. Unit tests are annotated with `:test` and ignored if testing is not run. Asserts do not require the `:test` annotation and will be compiled out in release versions or you Connect IQ Content. A test RESULTS section is printed to the console with the tests run, test status, and failure rates.",
  "classes": [
    "AssertException",
    "Logger"
  ],
  "methods": [
    {
      "name": "assert",
      "ast": {
        "name": "assert",
        "parameters": [
          {
            "name": "test",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "test",
          "docstring": "The expression to test for `true`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Test.AssertException"
          ],
          "docstring": ""
        }
      ],
      "returns": []
    },
    {
      "name": "assertEqual",
      "ast": {
        "name": "assertEqual",
        "parameters": [
          {
            "name": "value1",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          },
          {
            "name": "value2",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "value1",
          "docstring": "The first value to test for equality"
        },
        {
          "name": "value2",
          "docstring": "The second value to test for equality"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Test.AssertException"
          ],
          "docstring": ""
        }
      ],
      "returns": []
    },
    {
      "name": "assertEqualMessage",
      "ast": {
        "name": "assertEqualMessage",
        "parameters": [
          {
            "name": "value1",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          },
          {
            "name": "value2",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "message",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "value1",
          "docstring": "The value to test for equality"
        },
        {
          "name": "value2",
          "docstring": "The value to test for equality"
        },
        {
          "name": "message",
          "docstring": "The identifying message for the assert"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Test.AssertException"
          ],
          "docstring": ""
        }
      ],
      "returns": []
    },
    {
      "name": "assertMessage",
      "ast": {
        "name": "assertMessage",
        "parameters": [
          {
            "name": "test",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          },
          {
            "name": "message",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "test",
          "docstring": "Expression to test for `true`"
        },
        {
          "name": "message",
          "docstring": "The identifying message for the assert"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Test.AssertException"
          ],
          "docstring": ""
        }
      ],
      "returns": []
    },
    {
      "name": "assertNotEqual",
      "ast": {
        "name": "assertNotEqual",
        "parameters": [
          {
            "name": "value1",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          },
          {
            "name": "value2",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "value1",
          "docstring": "The value to test for equality"
        },
        {
          "name": "value2",
          "docstring": "The value to test for equality"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Test.AssertException"
          ],
          "docstring": ""
        }
      ],
      "returns": []
    },
    {
      "name": "assertNotEqualMessage",
      "ast": {
        "name": "assertNotEqualMessage",
        "parameters": [
          {
            "name": "value1",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          },
          {
            "name": "value2",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "message",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "value1",
          "docstring": "The value to test for equality"
        },
        {
          "name": "value2",
          "docstring": "The value to test for equality"
        },
        {
          "name": "message",
          "docstring": "The identifying message for the assert"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Test.AssertException"
          ],
          "docstring": ""
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.System",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System.html",
  "docstring": "The System module provides basic system information, including access to the clock time, device settings, battery level, and memory use.",
  "classes": [
    "AppNotInstalledException",
    "ClockTime",
    "ConnectionInfo",
    "DeviceSettings",
    "Intent",
    "PreviousOperationNotCompleteException",
    "ServiceDelegate",
    "Stats",
    "UnexpectedAppTypeException"
  ],
  "constants": [
    {
      "name": "UNIT_METRIC",
      "value": "0",
      "since": "API Level 1.0.0",
      "description": "Display units in metric units",
      "parent": "UnitsSystem"
    },
    {
      "name": "UNIT_STATUTE",
      "value": "1",
      "since": "API Level 1.0.0",
      "description": "Display units in statute units",
      "parent": "UnitsSystem"
    }
  ],
  "methods": [
    {
      "name": "error",
      "ast": {
        "name": "error",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The error message to output"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "exit",
      "ast": {
        "name": "exit",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "exitTo",
      "ast": {
        "name": "exitTo",
        "parameters": [
          {
            "name": "intent",
            "types": [
              {
                "type": "System.Intent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "intent",
          "docstring": "The Intent to trigger"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "System.UnexpectedAppTypeException"
          ],
          "docstring": "Indicates the intended application is not a device app or widget"
        },
        {
          "types": [
            "System.AppNotInstalledException"
          ],
          "docstring": "Indicates the intended application is not installed"
        },
        {
          "types": [
            "System.PreviousOperationNotCompleteException"
          ],
          "docstring": "Indicates exitTo() is called a second time before the initial call completes"
        }
      ],
      "returns": []
    },
    {
      "name": "getClockTime",
      "ast": {
        "name": "getClockTime",
        "parameters": [],
        "returns": [
          {
            "type": "System.ClockTime"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "System.ClockTime"
      ]
    },
    {
      "name": "getDeviceSettings",
      "ast": {
        "name": "getDeviceSettings",
        "parameters": [],
        "returns": [
          {
            "type": "System.DeviceSettings"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "System.DeviceSettings"
      ]
    },
    {
      "name": "getSystemStats",
      "ast": {
        "name": "getSystemStats",
        "parameters": [],
        "returns": [
          {
            "type": "System.Stats"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "System.Stats"
      ]
    },
    {
      "name": "getTimer",
      "ast": {
        "name": "getTimer",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "isAppInstalled",
      "ast": {
        "name": "isAppInstalled",
        "parameters": [
          {
            "name": "uri",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "uri",
          "docstring": "The URI that specifies an app"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if an invalid URI format is provided"
        }
      ],
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "print",
      "ast": {
        "name": "print",
        "parameters": [
          {
            "name": "output",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "output",
          "docstring": "The item to print, typically a [String](../Toybox/Lang/String.html)."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "println",
      "ast": {
        "name": "println",
        "parameters": [
          {
            "name": "output",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "output",
          "docstring": "The item to print, typically a [String](../Toybox/Lang/String.html)."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.StringUtil",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/StringUtil.html",
  "docstring": "The StringUtil module contains String utility functions",
  "classes": [
    "InvalidHexStringException"
  ],
  "constants": [
    {
      "name": "CHAR_ENCODING_UTF8",
      "value": "0",
      "since": "API Level 3.0.0",
      "parent": "CharacterEncoding"
    }
  ],
  "methods": [
    {
      "name": "charArrayToString",
      "ast": {
        "name": "charArrayToString",
        "parameters": [
          {
            "name": "charArray",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Char"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": [
        {
          "name": "charArray",
          "docstring": "An Array of Char objects"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "convertEncodedString",
      "ast": {
        "name": "convertEncodedString",
        "parameters": [
          {
            "name": "input",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.ByteArray"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":fromRepresentation",
                    "types": [
                      {
                        "type": "StringUtil.Representation"
                      }
                    ]
                  },
                  {
                    "name": ":toRepresentation",
                    "types": [
                      {
                        "type": "StringUtil.Representation"
                      }
                    ]
                  },
                  {
                    "name": ":encoding",
                    "types": [
                      {
                        "type": "StringUtil.CharacterEncoding"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          },
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": [
        {
          "name": "input",
          "docstring": "Input that needs to be converted."
        },
        {
          "name": "options",
          "docstring": "Required. A [REPRESENTATION_*](../Toybox/StringUtil.html) enum value indicating the representation from which the `input` should be converted.",
          "dictionary_keys": [
            {
              "name": ":fromRepresentation",
              "docstring": "Required. A [REPRESENTATION_*](../Toybox/StringUtil.html) enum value indicating the representation from which the `input` should be converted."
            },
            {
              "name": ":toRepresentation",
              "docstring": "Required. A [REPRESENTATION_*](../Toybox/StringUtil.html) enum value indicating the representation to which the `input` should be converted."
            },
            {
              "name": ":encoding",
              "docstring": "A [CHAR_ENCODING_*](../Toybox/StringUtil.html) value indicating the String encoding to use when generating a hex string or ByteArray when either the `fromRepresentation` or `toRepresentation` is set to REPRESENTATION_STRING_PLAIN_TEXT. Defaults to CHAR_ENCODING_UTF8 if not specified."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if a required option is not set with a valid enumeration value."
        }
      ],
      "returns": [
        "Lang.String",
        "Lang.ByteArray"
      ]
    },
    {
      "name": "encodeBase64",
      "ast": {
        "name": "encodeBase64",
        "parameters": [
          {
            "name": "string",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": [
        {
          "name": "string",
          "docstring": "The string to encode"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "utf8ArrayToString",
      "ast": {
        "name": "utf8ArrayToString",
        "parameters": [
          {
            "name": "utf8Array",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Number"
                  }
                ]
              },
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": [
        {
          "name": "utf8Array",
          "docstring": "An Array of UTF-8 bytes"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.SensorLogging",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/SensorLogging.html",
  "docstring": "The SensorLogging module contains the interface for logging sensor data.",
  "classes": [
    "SensorLogger",
    "SensorLoggingStats"
  ]
},
{
  "type": "module",
  "name": "Toybox.SensorHistory",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/SensorHistory.html",
  "docstring": "The SensorHistory module contains the interface for SensorHistory.  SensorHistory provides access to historical information recorded by the on- board sensors of device hardware. The amount of information that is available is device dependent. This means that one device may provide more information than another. This class provides an ORDER_* enum which is used to select the data order of the sample iterator.",
  "classes": [
    "SensorHistoryIterator",
    "SensorSample"
  ],
  "constants": [
    {
      "name": "ORDER_NEWEST_FIRST",
      "value": "0",
      "since": "API Level 2.1.0",
      "description": "Request iterator with newest data first",
      "parent": "Order"
    },
    {
      "name": "ORDER_OLDEST_FIRST",
      "value": "1",
      "since": "API Level 2.1.0",
      "description": "Request iterator with oldest data first",
      "parent": "Order"
    }
  ],
  "methods": [
    {
      "name": "getBodyBatteryHistory",
      "ast": {
        "name": "getBodyBatteryHistory",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":period",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Time.Duration"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":order",
                    "types": [
                      {
                        "type": "SensorHistory.Order"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "SensorHistory.SensorHistoryIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Dictionary of options. Can be `null`.",
          "dictionary_keys": [
            {
              "name": ":period",
              "docstring": "The period of time from which to retrieve the samples:    * If `null`, the entire available history is retrieved     * If a [Duration](../Toybox/Time/Duration.html), then the history for the given Duration is retrieved     * If a [Number](../Toybox/Lang/Number.html), then the last specified Number of entries are retrieved",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":order",
              "docstring": "The order in which to retrieve the samples:    * If `null`, the samples will be ORDER_NEWEST_FIRST     * Use the ORDER_* enumeration to explicitly select ORDER_NEWEST_FIRST or ORDER_OLDEST_FIRST",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "SensorHistory.SensorHistoryIterator"
      ]
    },
    {
      "name": "getElevationHistory",
      "ast": {
        "name": "getElevationHistory",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":period",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Time.Duration"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":order",
                    "types": [
                      {
                        "type": "SensorHistory.Order"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "SensorHistory.SensorHistoryIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Dictionary of options. Can be `null`.",
          "dictionary_keys": [
            {
              "name": ":period",
              "docstring": "The period of time from which to retrieve the samples:    * If `null`, the entire available history is retrieved     * If a [Duration](../Toybox/Time/Duration.html), then the history for the given Duration is retrieved     * If a [Number](../Toybox/Lang/Number.html), then the last specified Number of entries are retrieved",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":order",
              "docstring": "The order in which to retrieve the samples:    * If `null`, the samples will be ORDER_NEWEST_FIRST     * Use the ORDER_* enumeration to explicitly select ORDER_NEWEST_FIRST or ORDER_OLDEST_FIRST",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "SensorHistory.SensorHistoryIterator"
      ]
    },
    {
      "name": "getHeartRateHistory",
      "ast": {
        "name": "getHeartRateHistory",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":period",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Time.Duration"
                      }
                    ]
                  },
                  {
                    "name": ":order",
                    "types": [
                      {
                        "type": "SensorHistory.Order"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "SensorHistory.SensorHistoryIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Dictionary of options. Can be `null`.",
          "dictionary_keys": [
            {
              "name": ":period",
              "docstring": "The period of time from which to retrieve the samples:    * If `null`, the entire available history is retrieved     * If a [Duration](../Toybox/Time/Duration.html), then the history for the given Duration is retrieved     * If a [Number](../Toybox/Lang/Number.html), then the last specified Number of entries are retrieved",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":order",
              "docstring": "The order in which to retrieve the samples:    * If `null`, the samples will be listed ORDER_NEWEST_FIRST     * Use the ORDER_* enumeration to explicitly select ORDER_NEWEST_FIRST or ORDER_OLDEST_FIRST",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "SensorHistory.SensorHistoryIterator"
      ]
    },
    {
      "name": "getOxygenSaturationHistory",
      "ast": {
        "name": "getOxygenSaturationHistory",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":period",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Time.Duration"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":order",
                    "types": [
                      {
                        "type": "SensorHistory.Order"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "SensorHistory.SensorHistoryIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Dictionary of options. Can be `null`.",
          "dictionary_keys": [
            {
              "name": ":period",
              "docstring": "The period of time from which to retrieve the samples:    * If `null`, the entire available history is retrieved     * If a [Duration](../Toybox/Time/Duration.html), then the history for the given Duration is retrieved     * If a [Number](../Toybox/Lang/Number.html), then the last specified Number of entries are retrieved",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":order",
              "docstring": "The order in which to retrieve the samples:    * If `null`, the samples will be ORDER_NEWEST_FIRST     * Use the ORDER_* enumeration to explicitly select ORDER_NEWEST_FIRST or ORDER_OLDEST_FIRST",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "SensorHistory.SensorHistoryIterator"
      ]
    },
    {
      "name": "getPressureHistory",
      "ast": {
        "name": "getPressureHistory",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":period",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Time.Duration"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":order",
                    "types": [
                      {
                        "type": "SensorHistory.Order"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "SensorHistory.SensorHistoryIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Dictionary of options. Can be `null`.",
          "dictionary_keys": [
            {
              "name": ":period",
              "docstring": "The period of time from which to retrieve the samples.    * If period is `null`, the entire available history is retrieved     * If period is a [Duration](../Toybox/Time/Duration.html), then the history for the given Duration is retrieved     * If period is a [Number](../Toybox/Lang/Number.html), then the last specified Number of entries are retrieved",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":order",
              "docstring": "The order in which to retrieve the samples.    * If order is `null`, the samples will be ORDER_NEWEST_FIRST     * Use the ORDER enumeration to explicitly select ORDER_NEWEST_FIRST or ORDER_OLDEST_FIRST",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "SensorHistory.SensorHistoryIterator"
      ]
    },
    {
      "name": "getStressHistory",
      "ast": {
        "name": "getStressHistory",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":period",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Time.Duration"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":order",
                    "types": [
                      {
                        "type": "SensorHistory.Order"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "SensorHistory.SensorHistoryIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Dictionary of options. Can be `null`.",
          "dictionary_keys": [
            {
              "name": ":period",
              "docstring": "The period of time from which to retrieve the samples:    * If `null`, the entire available history is retrieved     * If a [Duration](../Toybox/Time/Duration.html), then the history for the given Duration is retrieved     * If a [Number](../Toybox/Lang/Number.html), then the last specified Number of entries are retrieved",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":order",
              "docstring": "The order in which to retrieve the samples:    * If `null`, the samples will be ORDER_NEWEST_FIRST     * Use the ORDER_* enumeration to explicitly select ORDER_NEWEST_FIRST or ORDER_OLDEST_FIRST",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "SensorHistory.SensorHistoryIterator"
      ]
    },
    {
      "name": "getTemperatureHistory",
      "ast": {
        "name": "getTemperatureHistory",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":period",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Time.Duration"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":order",
                    "types": [
                      {
                        "type": "SensorHistory.Order"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "SensorHistory.SensorHistoryIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Dictionary of options. Can be `null`.",
          "dictionary_keys": [
            {
              "name": ":period",
              "docstring": "The period of time from which to retrieve the samples:    * If `null`, the entire available history is retrieved     * If a [Duration](../Toybox/Time/Duration.html), then the history for the given Duration is retrieved     * If a [Number](../Toybox/Lang/Number.html), then the last specified Number of entries are retrieved",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":order",
              "docstring": "The order in which to retrieve the samples.    * If `null`, the samples will be listed ORDER_NEWEST_FIRST     * Use the ORDER_* enumeration to explicitly select ORDER_NEWEST_FIRST or ORDER_OLDEST_FIRST",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "SensorHistory.SensorHistoryIterator"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Sensor",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor.html",
  "docstring": "The Sensor module provides access to sensor data.  Sensor allows Apps to register for updates to the current sensor data. It also enables apps to control the ANT+ sensors supported natively by the device, which are described by the provided SENSOR_* constants.",
  "classes": [
    "AccelerometerData",
    "GyroscopeData",
    "HeartRateData",
    "Info",
    "MagnetometerData",
    "SensorData",
    "SensorInfo",
    "SensorInfoIterator",
    "TooManySensorDataListenersException"
  ],
  "constants": [
    {
      "name": "SENSOR_BIKESPEED",
      "value": "0",
      "since": "API Level 1.0.0",
      "parent": "RemoteSensorType"
    },
    {
      "name": "SENSOR_BIKECADENCE",
      "value": "1",
      "since": "API Level 1.0.0",
      "parent": "RemoteSensorType"
    },
    {
      "name": "SENSOR_BIKEPOWER",
      "value": "2",
      "since": "API Level 1.0.0",
      "parent": "RemoteSensorType"
    },
    {
      "name": "SENSOR_FOOTPOD",
      "value": "3",
      "since": "API Level 1.0.0",
      "parent": "RemoteSensorType"
    },
    {
      "name": "SENSOR_HEARTRATE",
      "value": "4",
      "since": "API Level 1.0.0",
      "parent": "RemoteSensorType"
    },
    {
      "name": "SENSOR_TEMPERATURE",
      "value": "5",
      "since": "API Level 1.0.0",
      "parent": "RemoteSensorType"
    }
  ],
  "typedefs": [
    {
      "name": "SensorType",
      "types": [
        "Sensor.RemoteSensorType",
        "Sensor.OnboardSensorType"
      ]
    }
  ],
  "methods": [
    {
      "name": "disableSensorType",
      "ast": {
        "name": "disableSensorType",
        "parameters": [
          {
            "name": "sensorType",
            "types": [
              {
                "type": "Sensor.SensorType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "enableSensorEvents",
      "ast": {
        "name": "enableSensorEvents",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "Null"
              },
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "info",
                    "types": [
                      {
                        "type": "Sensor.Info"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "A reference to a listener Method:    * Called when sensor updates are received     * Receives a Sensor.info object     * Use `null` to specify no listener",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "enableSensorType",
      "ast": {
        "name": "enableSensorType",
        "parameters": [
          {
            "name": "sensorType",
            "types": [
              {
                "type": "Sensor.SensorType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getInfo",
      "ast": {
        "name": "getInfo",
        "parameters": [],
        "returns": [
          {
            "type": "Sensor.Info"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Sensor.Info"
      ]
    },
    {
      "name": "getMaxSampleRate",
      "ast": {
        "name": "getMaxSampleRate",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getMaxSampleRateForSensorType",
      "ast": {
        "name": "getMaxSampleRateForSensorType",
        "parameters": [
          {
            "name": "sensorDataType",
            "types": [
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "sensorDataType",
          "docstring": "Symbol of the sensor data type to get the max rate for, allowed symbols are `accelerometer`, `gyroscope`, and `magnetometer`."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getRegisteredSensors",
      "ast": {
        "name": "getRegisteredSensors",
        "parameters": [
          {
            "name": "sensorType",
            "types": [
              {
                "type": "Sensor.SensorType"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Sensor.SensorInfoIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "sensorType",
          "docstring": "A SENSOR_* value that describes the sensor type to enumerate, or `null` to get all sensors."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Sensor.SensorInfoIterator"
      ]
    },
    {
      "name": "registerSensorDataListener",
      "ast": {
        "name": "registerSensorDataListener",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "data",
                    "types": [
                      {
                        "type": "Sensor.SensorData"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":period",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":accelerometer",
                    "types": [
                      {
                        "type": "Lang.Dictionary",
                        "keys": [
                          {
                            "name": ":enabled",
                            "types": [
                              {
                                "type": "Lang.Boolean"
                              }
                            ]
                          },
                          {
                            "name": ":sampleRate",
                            "types": [
                              {
                                "type": "Lang.Number"
                              }
                            ]
                          },
                          {
                            "name": ":includePower",
                            "types": [
                              {
                                "type": "Lang.Boolean"
                              }
                            ]
                          },
                          {
                            "name": ":includePitch",
                            "types": [
                              {
                                "type": "Lang.Boolean"
                              }
                            ]
                          },
                          {
                            "name": ":includeRoll",
                            "types": [
                              {
                                "type": "Lang.Boolean"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": ":gyroscope",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":enabled",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  },
                  {
                    "name": ":sampleRate",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": ":magnetometer",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":enabled",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  },
                  {
                    "name": ":sampleRate",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": ":heartBeatIntervals",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":enabled",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "A method that takes a single [SensorData](../Toybox/Sensor/SensorData.html) object as a parameter that will contain the requested data."
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options. The allowed values depend on sensor type.",
          "dictionary_keys": [
            {
              "name": ":period",
              "docstring": "Period of time to request samples in seconds. Maximum is 4 seconds."
            },
            {
              "name": ":accelerometer",
              "docstring": "Options for accelerometer data.    * :enabled ([Toybox::Lang::Boolean](../Toybox/Lang/Boolean.html)) Set to `true` to fetch data from the accelerometer.     * :sampleRate ([Toybox::Lang::Number](../Toybox/Lang/Number.html)) Samples per second to request in Hz.     * :includePower ([Toybox::Lang::Boolean](../Toybox/Lang/Boolean.html)) Valid only when `:accelerometer=>:enabled` is set to `true`. Requests that the [power Array](../Toybox/Sensor/AccelerometerData.html#power-var) be computed.     * :includePitch ([Toybox::Lang::Boolean](../Toybox/Lang/Boolean.html)) Valid only when `:accelerometer=>:enabled` is set to `true`. Requests that the [pitch Array](../Toybox/Sensor/AccelerometerData.html#pitch-var) be computed.     * :includeRoll ([Toybox::Lang::Boolean](../Toybox/Lang/Boolean.html)) Valid only when `:accelerometer=>:enabled` is set to `true`. Requests that the [roll Array](../Toybox/Sensor/AccelerometerData.html#roll-var) be computed.",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":heartBeatIntervals",
              "docstring": "Options for Heart Beat Interval data.    * :enabled ([Toybox::Lang::Boolean](../Toybox/Lang/Boolean.html)) Set to `true` to fetch heart beat interval data.",
              "dictionary_keys": [
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "name": ":gyroscope",
              "docstring": "Options for gyroscope data.    * :enabled ([Toybox::Lang::Boolean](../Toybox/Lang/Boolean.html)) Set to `true` to fetch data from the gyroscope.     * :sampleRate ([Toybox::Lang::Number](../Toybox/Lang/Number.html)) Samples per second to request in Hz.",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":magnetometer",
              "docstring": "Options for magnetometer data.    * :enabled ([Toybox::Lang::Boolean](../Toybox/Lang/Boolean.html)) Set to `true` to fetch data from the magnetometer.     * :sampleRate ([Toybox::Lang::Number](../Toybox/Lang/Number.html)) Samples per second to request in Hz.",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "[Toybox::Sensor::TooManySensorDataListenersException](../Toybox/Sensor/TooManySensorDataListenersException.html) Thrown if more than one listener is tried to register for sensor data."
        },
        {
          "types": [],
          "docstring": "[Toybox::Lang::InvalidOptionsException](../Toybox/Lang/InvalidOptionsException.html) Thrown if any required options are excluded, if provided options are out of range, or are of the wrong type."
        }
      ],
      "returns": []
    },
    {
      "name": "setEnabledSensors",
      "ast": {
        "name": "setEnabledSensors",
        "parameters": [
          {
            "name": "sensors",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Sensor.SensorType"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Sensor.SensorType"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "sensors",
          "docstring": "The sensors to enable:    * An Array of SENSOR_* types to enable     * An empty array ([]) to disable all sensors",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "unregisterSensorDataListener",
      "ast": {
        "name": "unregisterSensorDataListener",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.PersistedLocations",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/PersistedLocations.html",
  "docstring": "Persisted locations allows the saving of a location (waypoint) to a device's location list. This feature is only available on devices that support waypoints.",
  "methods": [
    {
      "name": "persistLocation",
      "ast": {
        "name": "persistLocation",
        "parameters": [
          {
            "name": "location",
            "types": [
              {
                "type": "Position.Location"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":name",
                    "types": [
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "location",
          "docstring": "Location object to persist"
        },
        {
          "name": "options",
          "docstring": "Dictionary of options, or `null` to accept defaults",
          "dictionary_keys": [
            {
              "name": ":name",
              "docstring": "Name to assign to the waypoint. If not specified will be auto-named."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Position",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Position.html",
  "docstring": "The Position module provides an interface for location information and positioning sensors.  This module also provides two sets of constants:    * **GEO:** Used to specify the [Location](../Toybox/Position/Location.html) formatting.     * **QUALITY:** Represents the GPS fix quality when the [Location](../Toybox/Position/Location.html) information was calculated",
  "classes": [
    "Info",
    "Location"
  ],
  "constants": [
    {
      "name": "CONSTELLATION_GPS",
      "value": "0",
      "since": "API Level 3.2.0",
      "description": "Use the GPS satellite constellation",
      "parent": "Constellation"
    },
    {
      "name": "CONSTELLATION_GLONASS",
      "value": "1",
      "since": "API Level 3.2.0",
      "description": "Use the GLONASS satellite constellation",
      "parent": "Constellation"
    },
    {
      "name": "CONSTELLATION_GALILEO",
      "value": "2",
      "since": "API Level 3.2.0",
      "description": "Use the GALILEO satellite constellation",
      "parent": "Constellation"
    }
  ],
  "methods": [
    {
      "name": "createBoundingBox",
      "ast": {
        "name": "createBoundingBox",
        "parameters": [
          {
            "name": "locations",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Position.Location"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Position.Location"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "locations",
          "docstring": "Array of [Location](../Toybox/Position/Location.html) objects."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "enableLocationEvents",
      "ast": {
        "name": "enableLocationEvents",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":acquisitionType",
                    "types": [
                      {
                        "type": "Position.LocationAcquisitionType"
                      }
                    ]
                  },
                  {
                    "name": ":constellations",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Position.Constellation"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":configuration",
                    "types": [
                      {
                        "type": "Position.Configuration"
                      }
                    ]
                  },
                  {
                    "name": ":mode",
                    "types": [
                      {
                        "type": "Position.PositioningMode"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Position.LocationAcquisitionType"
              }
            ]
          },
          {
            "name": "listener",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "loc",
                    "types": [
                      {
                        "type": "Position.Info"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A LOCATION_* value or [Toybox::Lang::Dictionary](../Toybox/Lang/Dictionary.html) of options.",
          "dictionary_keys": [
            {
              "name": ":acquisitionType",
              "docstring": "A LOCATION_* enum value indicating the position acquisition type to use."
            },
            {
              "name": ":constellations",
              "docstring": "An array of CONSTELLATION_* enum values specifying what constellations to enable. If not provided, CONSTELLATION_GPS will be used by default."
            },
            {
              "name": ":configuration",
              "docstring": "A CONFIGURATION_* value specifying what configuration to enable. Only available with ConnectIQ 3.3.6 and later."
            },
            {
              "name": ":mode",
              "docstring": "a POSITIONING_MODE_* value specifying the mode to use. If `null` POSITIONING_MODE_NORMAL will be used by default."
            }
          ]
        },
        {
          "name": "listener",
          "docstring": "A reference to a listener method:    * Called when location updates are received     * Receives a Position.Info object",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if :acquisitionType is invalid, if a specific CONSTELLATION_* value is not supported by a device, or if an invalid combination of constellation values are specified."
        }
      ],
      "returns": []
    },
    {
      "name": "getInfo",
      "ast": {
        "name": "getInfo",
        "parameters": [],
        "returns": [
          {
            "type": "Position.Info"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Position.Info"
      ]
    },
    {
      "name": "hasConfigurationSupport",
      "ast": {
        "name": "hasConfigurationSupport",
        "parameters": [
          {
            "name": "config",
            "types": [
              {
                "type": "Position.Configuration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "config",
          "docstring": "A CONFIGURATION_* enum value specifying what configuration to enable. Only available with ConnectIQ 3.3.6 and later."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "parse",
      "ast": {
        "name": "parse",
        "parameters": [
          {
            "name": "string",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "format",
            "types": [
              {
                "type": "Position.CoordinateFormat"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Position.Location"
          }
        ]
      },
      "parameters": [
        {
          "name": "string",
          "docstring": "The String to parse"
        },
        {
          "name": "format",
          "docstring": "A Position.GEO_* value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Position.Location"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.PersistedContent",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/PersistedContent.html",
  "docstring": "The PersistedContent module allows access to stored routes, waypoints, and other stored user data.  This module provides an Iterator class that gives access to content stored on the device. Included content types are as follows:    * [Course](../Toybox/PersistedContent/Course.html)    * [Route](../Toybox/PersistedContent/Route.html)    * [Track](../Toybox/PersistedContent/Track.html)    * [Waypoint](../Toybox/PersistedContent/Waypoint.html)    * [Workout](../Toybox/PersistedContent/Workout.html)  Each of these objects can utilize [System.Intents](../Toybox/System/Intent.html) to to launch the appropriate application type for the content type (e.g. The workout might launch the workout player). This is typically used in conjunction with the [Communications](../Toybox/Communications.html) module to retrieve content of type .FIT and .GPX and later access it using the get methods provided within this module.",
  "classes": [
    "Course",
    "Iterator",
    "Route",
    "Track",
    "Waypoint",
    "Workout"
  ],
  "typedefs": [
    {
      "name": "Content",
      "types": [
        "Lang.String",
        "Lang.Number",
        "System.Intent"
      ]
    }
  ],
  "methods": [
    {
      "name": "getAppCourses",
      "ast": {
        "name": "getAppCourses",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "getAppRoutes",
      "ast": {
        "name": "getAppRoutes",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "getAppTracks",
      "ast": {
        "name": "getAppTracks",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "getAppWaypoints",
      "ast": {
        "name": "getAppWaypoints",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "getAppWorkouts",
      "ast": {
        "name": "getAppWorkouts",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "getCourses",
      "ast": {
        "name": "getCourses",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "getRoutes",
      "ast": {
        "name": "getRoutes",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "getTracks",
      "ast": {
        "name": "getTracks",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "getWaypoints",
      "ast": {
        "name": "getWaypoints",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "getWorkouts",
      "ast": {
        "name": "getWorkouts",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "PersistedContent.Iterator"
      ]
    },
    {
      "name": "saveWaypoint",
      "ast": {
        "name": "saveWaypoint",
        "parameters": [
          {
            "name": "location",
            "types": [
              {
                "type": "Position.Location"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":name",
                    "types": [
                      {
                        "type": "Lang.String"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "location",
          "docstring": "The Location object to persist"
        },
        {
          "name": "options",
          "docstring": "The Dictionary of options, or `null` to accept defaults",
          "dictionary_keys": [
            {
              "name": ":name",
              "docstring": "The name to assign to the waypoint. If not specified the waypoint will be named automatically."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Media",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media.html",
  "docstring": "The Media module provides objects and methods for implementing audio content provider apps.  This includes interfaces and methods for managing downloaded media content as well as interfaces used to provide required information to the system for playback.",
  "classes": [
    "ActiveContent",
    "AlbumArt",
    "AudioFormat",
    "CacheStatistics",
    "Content",
    "ContentDelegate",
    "ContentIterator",
    "ContentMetadata",
    "ContentRef",
    "ContentRefIterator",
    "CustomButton",
    "PlaybackProfile",
    "PlayerColors",
    "ProviderIconInfo",
    "SyncDelegate",
    "SystemButton"
  ],
  "constants": [
    {
      "name": "PLAYBACK_POSITION_START",
      "value": "0",
      "since": "API Level 3.0.0",
      "description": "The playback position when the song has begun to play",
      "parent": "PlaybackPosition"
    }
  ],
  "methods": [
    {
      "name": "deleteCachedItem",
      "ast": {
        "name": "deleteCachedItem",
        "parameters": [
          {
            "name": "contentRef",
            "types": [
              {
                "type": "Media.ContentRef"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "contentRef",
          "docstring": "The ContentRef for the [Content](../Toybox/Media/Content.html) object to be deleted"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getCacheStatistics",
      "ast": {
        "name": "getCacheStatistics",
        "parameters": [],
        "returns": [
          {
            "type": "Media.CacheStatistics"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.CacheStatistics"
      ]
    },
    {
      "name": "getCachedContentObj",
      "ast": {
        "name": "getCachedContentObj",
        "parameters": [
          {
            "name": "contentRef",
            "types": [
              {
                "type": "Media.ContentRef"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Media.Content"
          }
        ]
      },
      "parameters": [
        {
          "name": "contentRef",
          "docstring": "The ContentRef object for the desired media [Content](../Toybox/Media/Content.html)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if contentRef parameter is not a valid [Toybox::Media::ContentRef](../Toybox/Media/ContentRef.html) object Thrown if ID field of provided [Toybox::Media::ContentRef](../Toybox/Media/ContentRef.html) object is not a string but content type is set to CONTENT_TYPE_AUDIO"
        },
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if provided [Toybox::Media::ContentRef](../Toybox/Media/ContentRef.html) has an invalid content type"
        }
      ],
      "returns": [
        "Media.Content"
      ]
    },
    {
      "name": "getContentRefIter",
      "ast": {
        "name": "getContentRefIter",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":contentType",
                    "types": [
                      {
                        "type": "Media.ContentType"
                      }
                    ]
                  },
                  {
                    "name": ":shuffle",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Media.ContentRefIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":contentType",
              "docstring": "One of the [CONTENT_TYPE*](../Toybox/Media.html) values that indicates the type of cached content."
            },
            {
              "name": ":shuffle",
              "docstring": "* When `true`, the [ContentRef](../Toybox/Media/ContentRef.html) objects will be returned in a random order     * When `false`, the [ContentRef](../Toybox/Media/ContentRef.html) objects will be returned in a consistent order that is system dependent",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if :contentType value is invalid"
        }
      ],
      "returns": [
        "Media.ContentRefIterator"
      ]
    },
    {
      "name": "notifySyncComplete",
      "ast": {
        "name": "notifySyncComplete",
        "parameters": [
          {
            "name": "errorMessage",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "errorMessage",
          "docstring": "A descriptive error message if a failure occurred. If the sync completes successfully, `null` should be passed to this method."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": []
    },
    {
      "name": "notifySyncProgress",
      "ast": {
        "name": "notifySyncProgress",
        "parameters": [
          {
            "name": "percentageComplete",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "percentageComplete",
          "docstring": "An integer from 0 to 100 indicating the completion percentage."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": []
    },
    {
      "name": "requestPlaybackProfileUpdate",
      "ast": {
        "name": "requestPlaybackProfileUpdate",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "resetContentCache",
      "ast": {
        "name": "resetContentCache",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setAlbumArt",
      "ast": {
        "name": "setAlbumArt",
        "parameters": [
          {
            "name": "albumArt",
            "types": [
              {
                "type": "Graphics.BitmapType"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "albumArt",
          "docstring": "The album art to display. If `null` then the system's default album art will be displayed."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "startPlayback",
      "ast": {
        "name": "startPlayback",
        "parameters": [
          {
            "name": "args",
            "types": [
              {
                "type": "Application.PersistableType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "args",
          "docstring": "A serializable object to pass to [AudioContentProviderApp.getContentDelegate()](../Toybox/Application/AudioContentProviderApp.html#getContentDelegate- instance_function) when the app starts in playback mode."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.SerializationException"
          ],
          "docstring": "Thrown when the given argument cannot be serialized or is too large for serialization."
        }
      ],
      "returns": []
    },
    {
      "name": "startSync",
      "ast": {
        "name": "startSync",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": []
    },
    {
      "name": "stopPlayback",
      "ast": {
        "name": "stopPlayback",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Math",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Math.html",
  "docstring": "The Math Module provides various math methods available for use by Apps.",
  "classes": [
    "Filter",
    "FirFilter",
    "IirFilter"
  ],
  "methods": [
    {
      "name": "acos",
      "ast": {
        "name": "acos",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The cosine value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "asin",
      "ast": {
        "name": "asin",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The sine value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "atan",
      "ast": {
        "name": "atan",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The tangent value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "atan2",
      "ast": {
        "name": "atan2",
        "parameters": [
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "y",
          "docstring": "The proportion of the y coordinate"
        },
        {
          "name": "x",
          "docstring": "The proportion of the x coordinate"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "ceil",
      "ast": {
        "name": "ceil",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Numeric"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "A numeric value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number",
        "Lang.Float",
        "Lang.Long",
        "Lang.Double"
      ]
    },
    {
      "name": "cos",
      "ast": {
        "name": "cos",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The angle in radians"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "floor",
      "ast": {
        "name": "floor",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Numeric"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "A numeric value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number",
        "Lang.Float",
        "Lang.Long",
        "Lang.Double"
      ]
    },
    {
      "name": "ln",
      "ast": {
        "name": "ln",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The value for which to get the logarithm"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "log",
      "ast": {
        "name": "log",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "base",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The value for which to get the logarithm"
        },
        {
          "name": "base",
          "docstring": "The base value."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "mean",
      "ast": {
        "name": "mean",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Numeric"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Double"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "An array of [Number](../Toybox/Lang/Number.html), [Float](../Toybox/Lang/Float.html), [Long](../Toybox/Lang/Long.html), or [Double](../Toybox/Lang/Double.html) values"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if the provided data array is empty."
        }
      ],
      "returns": [
        "Lang.Double"
      ]
    },
    {
      "name": "mode",
      "ast": {
        "name": "mode",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Object"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Object"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "An array of [Objects](../Toybox/Lang/Object.html)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if there is no most frequently occurring value or the passed in value array is empty"
        }
      ],
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "pow",
      "ast": {
        "name": "pow",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "Base"
        },
        {
          "name": "y",
          "docstring": "Exponent"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "rand",
      "ast": {
        "name": "rand",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "round",
      "ast": {
        "name": "round",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Numeric"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "A numeric value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number",
        "Lang.Float",
        "Lang.Long",
        "Lang.Double"
      ]
    },
    {
      "name": "sin",
      "ast": {
        "name": "sin",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The angle in radians"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "sqrt",
      "ast": {
        "name": "sqrt",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The value for which to get the square root"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "srand",
      "ast": {
        "name": "srand",
        "parameters": [
          {
            "name": "seed",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "seed",
          "docstring": "The value used for seeding rand()"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "stdev",
      "ast": {
        "name": "stdev",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Numeric"
                  }
                ]
              }
            ]
          },
          {
            "name": "xbar",
            "types": [
              {
                "type": "Lang.Double"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Double"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "An array of [Number](../Toybox/Lang/Number.html), [Float](../Toybox/Lang/Float.html), [Long](../Toybox/Lang/Long.html), or [Double](../Toybox/Lang/Double.html) values with at least two elements."
        },
        {
          "name": "xbar",
          "docstring": "The mean, if known. Otherwise, pass `null` and the mean of data will be calculated."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if the provided data array has fewer than two elements."
        }
      ],
      "returns": [
        "Lang.Double"
      ]
    },
    {
      "name": "tan",
      "ast": {
        "name": "tan",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The angle in radians"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "toDegrees",
      "ast": {
        "name": "toDegrees",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The angle in radians"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "toRadians",
      "ast": {
        "name": "toRadians",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Decimal"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The angle in degrees"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "variance",
      "ast": {
        "name": "variance",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Numeric"
                  }
                ]
              }
            ]
          },
          {
            "name": "xbar",
            "types": [
              {
                "type": "Lang.Numeric"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Double"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "An array of [Number](../Toybox/Lang/Number.html), [Float](../Toybox/Lang/Float.html), [Long](../Toybox/Lang/Long.html), or [Double](../Toybox/Lang/Double.html) values with at least two elements."
        },
        {
          "name": "xbar",
          "docstring": "The mean, if known. Otherwise, pass `null` and the mean of data will be calculated."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if the provided data array has fewer than two elements."
        }
      ],
      "returns": [
        "Lang.Double"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Lang",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang.html",
  "docstring": "The Lang module contains Monkey C language basic types, and provides a method for formatting Strings.",
  "classes": [
    "Array",
    "Boolean",
    "ByteArray",
    "Char",
    "Dictionary",
    "Double",
    "Exception",
    "Float",
    "InvalidOptionsException",
    "InvalidValueException",
    "Long",
    "Method",
    "Number",
    "Object",
    "OperationNotAllowedException",
    "SerializationException",
    "StorageFullException",
    "String",
    "Symbol",
    "SymbolNotAllowedException",
    "UnexpectedTypeException",
    "ValueOutOfBoundsException",
    "WeakReference"
  ],
  "constants": [
    {
      "name": "NUMBER_FORMAT_FLOAT",
      "value": "0",
      "since": "API Level 3.1.0",
      "description": "IEEE 754 Single Precision Float Value (32-bits)",
      "parent": "NumberFormat"
    },
    {
      "name": "NUMBER_FORMAT_SINT16",
      "value": "1",
      "since": "API Level 3.1.0",
      "description": "Signed 16-bit Integer Value",
      "parent": "NumberFormat"
    },
    {
      "name": "NUMBER_FORMAT_SINT32",
      "value": "2",
      "since": "API Level 3.1.0",
      "description": "Signed 32-bit Integer Value",
      "parent": "NumberFormat"
    },
    {
      "name": "NUMBER_FORMAT_SINT8",
      "value": "3",
      "since": "API Level 3.1.0",
      "description": "Signed 8-bit Integer Value",
      "parent": "NumberFormat"
    },
    {
      "name": "NUMBER_FORMAT_UINT16",
      "value": "4",
      "since": "API Level 3.1.0",
      "description": "Unsigned 16-bit Integer Value",
      "parent": "NumberFormat"
    },
    {
      "name": "NUMBER_FORMAT_UINT32",
      "value": "5",
      "since": "API Level 3.1.0",
      "description": "Unsigned 32-bit Integer Value",
      "parent": "NumberFormat"
    },
    {
      "name": "NUMBER_FORMAT_UINT8",
      "value": "6",
      "since": "API Level 3.1.0",
      "description": "Unsigned 8-bit Integer Value",
      "parent": "NumberFormat"
    }
  ],
  "typedefs": [
    {
      "name": "Decimal",
      "types": [
        "Lang.Float",
        "Lang.Double"
      ]
    },
    {
      "name": "Integer",
      "types": [
        "Lang.Number",
        "Lang.Long"
      ]
    },
    {
      "name": "Numeric",
      "types": [
        "Lang.Number",
        "Lang.Float",
        "Lang.Long",
        "Lang.Double"
      ]
    }
  ],
  "methods": [
    {
      "name": "format",
      "ast": {
        "name": "format",
        "parameters": [
          {
            "name": "format",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "parameters",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.String"
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "format",
          "docstring": "A string using $1$, $2$, $3$... as substitution identifiers"
        },
        {
          "name": "parameters",
          "docstring": "The Array of content to substitute into the formatted String"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Weather",
  "name": "Toybox.Weather.HourlyForecast",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Weather/HourlyForecast.html",
  "docstring": "Represents the forecast for a given hour",
  "attributes": [
    {
      "name": "condition",
      "docstring": "The weather condition",
      "type": "Weather.Condition",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "forectTime",
      "docstring": "The time the forecast is valid in UTC time",
      "type": "Time.Moment",
      "nullable": true,
      "returns": "Time.Moment"
    },
    {
      "name": "precipitationChance",
      "docstring": "The chance of precipitation [0-100%]",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "relativeHumidity",
      "docstring": "The relative humidity [0-100%]",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "temperature",
      "docstring": "The current temperature in Celsius",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "windBearing",
      "docstring": "The wind bearing in degrees. North = 0, East = 90, South = 180, West = 270",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "windSpeed",
      "docstring": "The current wind speed in meters per second",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.WatchFacePowerInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/WatchFacePowerInfo.html",
  "docstring": "Power information provided when the power budget is exceeded during a call to [onPartialUpdate()](../../Toybox/WatchUi/WatchFace.html#onPartialUpdate- instance_function).  This is automatically passed to the [onPowerBudgetExceeded()](../../Toybox/WatchUi/WatchFaceDelegate.html#onPowerBudgetExceeded- instance_function) method when it is invoked.",
  "attributes": [
    {
      "name": "executionTimeAverage",
      "docstring": "The average partial update execution time [onPartialUpdate()](../../Toybox/WatchUi/WatchFace.html#onPartialUpdate- instance_function) took to complete.",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    },
    {
      "name": "executionTimeLimit",
      "docstring": "The maximum allowable partial update execution time [onPartialUpdate()](../../Toybox/WatchUi/WatchFace.html#onPartialUpdate- instance_function) is allowed to take.",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.UserProfile",
  "name": "Toybox.UserProfile.UserActivityHistoryIterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/UserProfile/UserActivityHistoryIterator.html",
  "docstring": "Get an iterator for Activity history for the user",
  "methods": [
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "UserProfile.UserActivity"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "UserProfile.UserActivityHistoryIterator"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Timer",
  "name": "Toybox.Timer.Timer",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Timer/Timer.html",
  "docstring": "A Timer object will invoke a callback function after a specified number of milliseconds.  There are two types of timers: one-shot or repeating. A one-shot Timer will only run once after the Timer expires, while a repeating Timer will invoke the callback function every n milliseconds until stop() is called. If a repeating Timer fails to run before its next execution time, then any missed executions will be skipped.  The number of available timers (default 3) and the minimum time value (default 50 ms) depends on the host system. An error will occur if too many timers are set.",
  "methods": [
    {
      "name": "start",
      "ast": {
        "name": "start",
        "parameters": [
          {
            "name": "callback",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          },
          {
            "name": "time",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "repeat",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "callback",
          "docstring": "A function to call after the Timer completes"
        },
        {
          "name": "time",
          "docstring": "The number of milliseconds to wait before invoking callback"
        },
        {
          "name": "repeat",
          "docstring": "Set to `true` to have the Timer repeat until stop() is called"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "stop",
      "ast": {
        "name": "stop",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Time",
  "name": "Toybox.Time.RealTimeClockNotValidException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Time/RealTimeClockNotValidException.html",
  "docstring": "Indicates that the Real-Time Clock (RTC) value is not secure, i.e. not synced with trusted sources, such as GPS.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Time",
  "name": "Toybox.Time.Moment",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Time/Moment.html",
  "docstring": "A Moment is an immutable moment in time.  Moment objects are closely related to [Duration](../../Toybox/Time/Duration.html) objects, and are frequently used together for time calculations. While a [Duration](../../Toybox/Time/Duration.html) represents a span of time, a Moment represents a single point in time such as a specific date.  Internally, Moment objects are stored as 32-bit integers representing the number of seconds since the UNIX epoch (January 1, 1970 at 00:00:00 UTC).",
  "methods": [
    {
      "name": "add",
      "ast": {
        "name": "add",
        "parameters": [
          {
            "name": "duration",
            "types": [
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Moment"
          }
        ]
      },
      "parameters": [
        {
          "name": "duration",
          "docstring": "The Duration to add to this Moment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    },
    {
      "name": "compare",
      "ast": {
        "name": "compare",
        "parameters": [
          {
            "name": "moment",
            "types": [
              {
                "type": "Time.Moment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "moment",
          "docstring": "The Moment to compare to this Moment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "greaterThan",
      "ast": {
        "name": "greaterThan",
        "parameters": [
          {
            "name": "moment",
            "types": [
              {
                "type": "Time.Moment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "moment",
          "docstring": "The Moment to compare to this Moment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "seconds",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Moment"
          }
        ]
      },
      "parameters": [
        {
          "name": "seconds",
          "docstring": "The Number of seconds with which to initialize the Moment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    },
    {
      "name": "lessThan",
      "ast": {
        "name": "lessThan",
        "parameters": [
          {
            "name": "moment",
            "types": [
              {
                "type": "Time.Moment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "moment",
          "docstring": "The Moment to compare to this Moment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "subtract",
      "ast": {
        "name": "subtract",
        "parameters": [
          {
            "name": "subtrahend",
            "types": [
              {
                "type": "Time.Moment"
              },
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Moment"
          },
          {
            "type": "Time.Duration"
          }
        ]
      },
      "parameters": [
        {
          "name": "subtrahend",
          "docstring": "The Moment or Duration to subtract from this Moment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Duration",
        "Time.Moment"
      ]
    },
    {
      "name": "value",
      "ast": {
        "name": "value",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.System",
  "name": "Toybox.System.UnexpectedAppTypeException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System/UnexpectedAppTypeException.html",
  "docstring": "This exception indicates that the app targeted by an Intent when exiting to the app is not an allowed app type.  Allowed app types currently include watch-apps (both native activities and Connect IQ apps) and widgets. Watch faces and data fields cannot be targeted. If a native activity that has a Connect IQ data field configured is targeted, the native app will receive the Intent, not the data field.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.StringUtil",
  "name": "Toybox.StringUtil.InvalidHexStringException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/StringUtil/InvalidHexStringException.html",
  "docstring": "Thrown if an invalid hex string is provided.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.SensorLogging",
  "name": "Toybox.SensorLogging.SensorLoggingStats",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/SensorLogging/SensorLoggingStats.html",
  "docstring": "Class for the sensor logging status.",
  "attributes": [
    {
      "name": "sampleCount",
      "docstring": "The total number of logged samples",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "samplePeriod",
      "docstring": "The total number of seconds of logged data",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.SensorLogging",
  "name": "Toybox.SensorLogging.SensorLogger",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/SensorLogging/SensorLogger.html",
  "docstring": "Class for the SensorLogger object. This object gets passed to FIT session to start recording sensor data.",
  "methods": [
    {
      "name": "getStats",
      "ast": {
        "name": "getStats",
        "parameters": [],
        "returns": [
          {
            "type": "SensorLogging.SensorLoggingStats"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "SensorLogging.SensorLoggingStats"
      ]
    },
    {
      "name": "getStats2",
      "ast": {
        "name": "getStats2",
        "parameters": [
          {
            "name": "sensor",
            "types": [
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "SensorLogging.SensorLoggingStats"
          },
          {
            "type": "Lang.Dictionary",
            "keys": [
              {
                "name": ":accelerometer",
                "types": [
                  {
                    "type": "SensorLogging.SensorLoggingStats"
                  }
                ]
              },
              {
                "name": ":gyroscope",
                "types": [
                  {
                    "type": "SensorLogging.SensorLoggingStats"
                  }
                ]
              },
              {
                "name": ":magnetometer",
                "types": [
                  {
                    "type": "SensorLogging.SensorLoggingStats"
                  }
                ]
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "sensor",
          "docstring": "Symbol for the sensor type to get the logging stats for or `null` to get stats about all the enabled sensors."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "[Toybox::Lang::InvalidValueException](../../Toybox/Lang/InvalidValueException.html) Thrown if provided argument are out of range or are of the wrong type."
        }
      ],
      "returns": [
        "SensorLogging.SensorLoggingStats",
        "Lang.Dictionary"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":accelerometer",
                    "types": [
                      {
                        "type": "Lang.Dictionary",
                        "keys": [
                          {
                            "name": ":enabled",
                            "types": [
                              {
                                "type": "Lang.Boolean"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": ":gyroscope",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":enabled",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": ":magnetometer",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":enabled",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of logging options",
          "dictionary_keys": [
            {
              "name": ":accelerometer",
              "docstring": "Options for accelerometer data.    * :enabled ([Toybox::Lang::Boolean](../../Toybox/Lang/Boolean.html)) Set to `true` to fetch data from the accelerometer.",
              "dictionary_keys": [
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "name": ":gyroscope",
              "docstring": "Options for gyroscope data.    * :enabled ([Toybox::Lang::Boolean](../../Toybox/Lang/Boolean.html)) Set to `true` to fetch data from the gyroscope.",
              "dictionary_keys": [
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "name": ":magnetometer",
              "docstring": "Options for magnetometer data.    * :enabled ([Toybox::Lang::Boolean](../../Toybox/Lang/Boolean.html)) Set to `true` to fetch data from the magnetometer.",
              "dictionary_keys": [
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Sensor",
  "name": "Toybox.Sensor.TooManySensorDataListenersException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor/TooManySensorDataListenersException.html",
  "docstring": "This exception indicates more than one listener is tried to register for sensor data.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Sensor",
  "name": "Toybox.Sensor.SensorInfoIterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor/SensorInfoIterator.html",
  "docstring": "A class encapsulating a collection of Sensors  The SensorIterator describes a collection of SensorInfo objects that describe actual sensors. Such an iterator is retrieved using the appropriate \"get*Sensors' methods found in [Sensor](../../Toybox/Sensor.html) at the module level.",
  "methods": [
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "Sensor.SensorInfo"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Position",
  "name": "Toybox.Position.Location",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Position/Location.html",
  "docstring": "The Location object represents a specific position.  Location objects provide methods for retrieving position coordinates in various formats.",
  "methods": [
    {
      "name": "getProjectedLocation",
      "ast": {
        "name": "getProjectedLocation",
        "parameters": [
          {
            "name": "angle",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "distance",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Position.Location"
          }
        ]
      },
      "parameters": [
        {
          "name": "angle",
          "docstring": "The angle in radians from north."
        },
        {
          "name": "distance",
          "docstring": "The distance from the current position in meters (m)."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Position.Location"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":latitude",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":longitude",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":format",
                    "types": [
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "An Array of options",
          "dictionary_keys": [
            {
              "name": ":latitude",
              "docstring": "The latitude"
            },
            {
              "name": ":longitude",
              "docstring": "The longitude"
            },
            {
              "name": ":format",
              "docstring": "The format of the provided latitude and longitude as one of three possible values:    * :degrees     * :radians     * :semicircles",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "toDegrees",
      "ast": {
        "name": "toDegrees",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Double"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "toGeoString",
      "ast": {
        "name": "toGeoString",
        "parameters": [
          {
            "name": "format",
            "types": [
              {
                "type": "Position.CoordinateFormat"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": [
        {
          "name": "format",
          "docstring": "A Position.GEO_* value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toRadians",
      "ast": {
        "name": "toRadians",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Double"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.PersistedContent",
  "name": "Toybox.PersistedContent.Workout",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/PersistedContent/Workout.html",
  "docstring": "A structured custom Workout saved on the device.",
  "methods": [
    {
      "name": "getId",
      "ast": {
        "name": "getId",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getName",
      "ast": {
        "name": "getName",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "remove",
      "ast": {
        "name": "remove",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if the given content is not owned by the calling application."
        }
      ],
      "returns": []
    },
    {
      "name": "toIntent",
      "ast": {
        "name": "toIntent",
        "parameters": [],
        "returns": [
          {
            "type": "System.Intent"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "System.Intent"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.ActiveContent",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/ActiveContent.html",
  "docstring": "Pairs a [ContentRef](../../Toybox/Media/ContentRef.html) with associated [ContentMetadata](../../Toybox/Media/ContentMetadata.html) information and allows a playback start position to be set.",
  "methods": [
    {
      "name": "getPlaybackStartPosition",
      "ast": {
        "name": "getPlaybackStartPosition",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "contentRef",
            "types": [
              {
                "type": "Media.ContentRef"
              }
            ]
          },
          {
            "name": "metadata",
            "types": [
              {
                "type": "Media.ContentMetadata"
              }
            ]
          },
          {
            "name": "playbackStartPos",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Media.PlaybackPosition"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "contentRef",
          "docstring": "A reference to media content"
        },
        {
          "name": "metadata",
          "docstring": "The metadata associated with referenced media content"
        },
        {
          "name": "playbackStartPos",
          "docstring": "Playback start position for the media content in seconds"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Math",
  "name": "Toybox.Math.IirFilter",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Math/IirFilter.html",
  "docstring": "Infinite Impulse Response (IIR) filter implementation.",
  "methods": [
    {
      "name": "apply",
      "ast": {
        "name": "apply",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Numeric"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "dictionary",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":coefficients",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Float"
                          }
                        ]
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":coefficients",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Float"
                          }
                        ]
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":gain",
                    "types": [
                      {
                        "type": "Lang.Float"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "dictionary",
          "docstring": "A Dictionary containing filter settings.",
          "dictionary_keys": [
            {
              "name": ":coefficients_a",
              "docstring": "An Array of Float values that specify the feedback filter coefficients. A resource ID referencing a JSON Array resource can also be used here."
            },
            {
              "name": ":coefficients_b",
              "docstring": "An Array of Float values that specify the feed forward filter coefficients. A resource ID referencing a JSON Array resource can also be used here."
            },
            {
              "name": ":gain",
              "docstring": "A Float value that specifies a multiplier to be applied to the coefficients."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "If the Dictionary does not have valid coefficients for filter or the :gain field is missing. Will also be thrown if an invalid JSON resource ID is specified for :coefficients instead of an array"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.WeakReference",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/WeakReference.html",
  "docstring": "A weak reference is a loosely bound reference to another object. If all strong references have been freed, the `WeakReference.get()` method will return `null`. This allows the developer to avoid circular references.",
  "methods": [
    {
      "name": "get",
      "ast": {
        "name": "get",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Object"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "stillAlive",
      "ast": {
        "name": "stillAlive",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.ValueOutOfBoundsException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/ValueOutOfBoundsException.html",
  "docstring": "This exception indicates a value out-of-bounds was passed as a parameter.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.UnexpectedTypeException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/UnexpectedTypeException.html",
  "docstring": "This exception indicates an incorrect type was passed for a parameter.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "unused1"
          },
          {
            "name": "unused2"
          }
        ],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.SymbolNotAllowedException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/SymbolNotAllowedException.html",
  "docstring": "This exception indicates that an app attempted to access a Symbol that is not accessible to its app type.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Symbol",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Symbol.html",
  "docstring": "A Symbol is a lightweight constant identifier.  The Monkey C compiler will assign a new value when it encounters a new Symbol. This allows a developer to use Symbol objects as keys or constant values without explicitly declaring a `constant` or `enum`. While Symbol values are constant for a build, their values may change across builds.  For this reason, Symbol objects should not be used for persistent data.",
  "methods": [
    {
      "name": "toNumber",
      "ast": {
        "name": "toNumber",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.String",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/String.html",
  "docstring": "String objects represent a sequence of characters, and provide methods for string operations.",
  "methods": [
    {
      "name": "equals",
      "ast": {
        "name": "equals",
        "parameters": [
          {
            "name": "object"
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The Object to test against"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "find",
      "ast": {
        "name": "find",
        "parameters": [
          {
            "name": "string",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "string",
          "docstring": "String to find"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "hashCode",
      "ast": {
        "name": "hashCode",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "length",
      "ast": {
        "name": "length",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "substring",
      "ast": {
        "name": "substring",
        "parameters": [
          {
            "name": "startIndex",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "endIndex",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "startIndex",
          "docstring": "Zero-based start index of the substring"
        },
        {
          "name": "endIndex",
          "docstring": "End position of the substring, exclusive"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toCharArray",
      "ast": {
        "name": "toCharArray",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Char"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "toDouble",
      "ast": {
        "name": "toDouble",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Double"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Double"
      ]
    },
    {
      "name": "toFloat",
      "ast": {
        "name": "toFloat",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Float"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float"
      ]
    },
    {
      "name": "toLong",
      "ast": {
        "name": "toLong",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Long"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Long"
      ]
    },
    {
      "name": "toLongWithBase",
      "ast": {
        "name": "toLongWithBase",
        "parameters": [
          {
            "name": "base",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Long"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "base",
          "docstring": "The base of the input string. If the value of `base` is zero, the string content is expected to have syntax similar to that of integer constants, which includes:    * An optional sign character ('+' or '-')     * An optional prefix for octal or hexadecimal ('0' or '0x')     * A sequence of digits in the prefixed base, or decimal if none was specified. If the base value is between 2 and 36, the format expected for the number is valid digits and/or letters that represent integers of the specified radix (from '0' to 'z' or 'Z' for base 36).",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Long"
      ]
    },
    {
      "name": "toLower",
      "ast": {
        "name": "toLower",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toNumber",
      "ast": {
        "name": "toNumber",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "toNumberWithBase",
      "ast": {
        "name": "toNumberWithBase",
        "parameters": [
          {
            "name": "base",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "base",
          "docstring": "The base of the input string. If the value of `base` is zero, the string content expected to have syntax similar to that of integer constants, which includes:    * An optional sign character ('+' or '-')     * An optional prefix for octal or hexadecimal ('0' or '0x')     * A sequence of digits in the prefixed base, or decimal if none was specified. If the base value is between 2 and 36, the format expected for the number is valid digits and/or letters that represent integers of the specified radix (from '0' to 'z' or 'Z' for base 36).",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toUpper",
      "ast": {
        "name": "toUpper",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toUtf8Array",
      "ast": {
        "name": "toUtf8Array",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.StorageFullException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/StorageFullException.html",
  "docstring": "Indicates that a storage limit has been reached",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.SerializationException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/SerializationException.html",
  "docstring": "Indicates that the function could not serialize an object",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.OperationNotAllowedException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/OperationNotAllowedException.html",
  "docstring": "This exception indicates that an app attempted an operation that is not allowed.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Object",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Object.html",
  "docstring": "Object is the root object for the Monkey C class hierarchy.",
  "methods": [
    {
      "name": "equals",
      "ast": {
        "name": "equals",
        "parameters": [
          {
            "name": "object"
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The Object to test against"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "hashCode",
      "ast": {
        "name": "hashCode",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "method",
      "ast": {
        "name": "method",
        "parameters": [
          {
            "name": "methodName",
            "types": [
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Method",
            "parameters": [],
            "returns": []
          }
        ]
      },
      "parameters": [
        {
          "name": "methodName",
          "docstring": "The Symbol of the specified Method"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Method"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "weak",
      "ast": {
        "name": "weak",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.WeakReference"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.WeakReference"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Number",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Number.html",
  "docstring": "Number represents a 32-bit signed integer.",
  "methods": [
    {
      "name": "abs",
      "ast": {
        "name": "abs",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "format",
      "ast": {
        "name": "format",
        "parameters": [
          {
            "name": "format",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toChar",
      "ast": {
        "name": "toChar",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Char"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Char"
      ]
    },
    {
      "name": "toDouble",
      "ast": {
        "name": "toDouble",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Double"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Double"
      ]
    },
    {
      "name": "toFloat",
      "ast": {
        "name": "toFloat",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Float"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float"
      ]
    },
    {
      "name": "toLong",
      "ast": {
        "name": "toLong",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Long"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Long"
      ]
    },
    {
      "name": "toNumber",
      "ast": {
        "name": "toNumber",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Method",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Method.html",
  "docstring": "Method is a class that represents a callback, or a function that can be used as an argument to another function. You can create one using the [method()](../../Toybox/Lang/Object.html#method-instance_function) call, and invoke the Method using the [invoke()](../../Toybox/Lang/Method.html#invoke- instance_function) method.",
  "methods": [
    {
      "name": "hashCode",
      "ast": {
        "name": "hashCode",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "aClass"
          },
          {
            "name": "aMethod"
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "aClass",
          "docstring": "Classdef of method (e.g. Toybox.SensorHistory)"
        },
        {
          "name": "aMethod",
          "docstring": "Symbol of class object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "invoke",
      "ast": {
        "name": "invoke",
        "parameters": [
          {
            "name": "parameters...",
            "exampleParameter": true
          }
        ],
        "returns": [
          {
            "type": "Lang.Object"
          }
        ]
      },
      "parameters": [
        {
          "name": "parameters...",
          "docstring": "The parameters required by the invoked Method"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Long",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Long.html",
  "docstring": "Long represents a 64-bit signed integer.  To use a Long value in Monkey C add 'l' to the end of the number.",
  "methods": [
    {
      "name": "abs",
      "ast": {
        "name": "abs",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Long"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Long"
      ]
    },
    {
      "name": "equals",
      "ast": {
        "name": "equals",
        "parameters": [
          {
            "name": "object"
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The Object to test against"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "format",
      "ast": {
        "name": "format",
        "parameters": [
          {
            "name": "format",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toDouble",
      "ast": {
        "name": "toDouble",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Double"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Double"
      ]
    },
    {
      "name": "toFloat",
      "ast": {
        "name": "toFloat",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Float"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float"
      ]
    },
    {
      "name": "toLong",
      "ast": {
        "name": "toLong",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Long"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Long"
      ]
    },
    {
      "name": "toNumber",
      "ast": {
        "name": "toNumber",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.InvalidValueException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/InvalidValueException.html",
  "docstring": "This exception indicates an invalid value was provided to an API.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.InvalidOptionsException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/InvalidOptionsException.html",
  "docstring": "This exception indicates invalid options during initialization.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Float",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Float.html",
  "docstring": "Floats are 32-bit floating point values.  By default, decimal values in Monkey C are Floats.",
  "methods": [
    {
      "name": "abs",
      "ast": {
        "name": "abs",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Float"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float"
      ]
    },
    {
      "name": "format",
      "ast": {
        "name": "format",
        "parameters": [
          {
            "name": "format",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toDouble",
      "ast": {
        "name": "toDouble",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Double"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Double"
      ]
    },
    {
      "name": "toFloat",
      "ast": {
        "name": "toFloat",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Float"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float"
      ]
    },
    {
      "name": "toLong",
      "ast": {
        "name": "toLong",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Long"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Long"
      ]
    },
    {
      "name": "toNumber",
      "ast": {
        "name": "toNumber",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Exception",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Exception.html",
  "docstring": "Exception is a class that represents a thrown Exception. Custom exceptions can be created by extending this class.",
  "methods": [
    {
      "name": "getErrorMessage",
      "ast": {
        "name": "getErrorMessage",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "printStackTrace",
      "ast": {
        "name": "printStackTrace",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Double",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Double.html",
  "docstring": "Double represents a 64-bit floating point number.  To use a double in Monkey C add 'd' to the end of the number.",
  "methods": [
    {
      "name": "abs",
      "ast": {
        "name": "abs",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Double"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Double"
      ]
    },
    {
      "name": "equals",
      "ast": {
        "name": "equals",
        "parameters": [
          {
            "name": "object"
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The Object to test against"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "format",
      "ast": {
        "name": "format",
        "parameters": [
          {
            "name": "format",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toDouble",
      "ast": {
        "name": "toDouble",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Double"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Double"
      ]
    },
    {
      "name": "toFloat",
      "ast": {
        "name": "toFloat",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Float"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float"
      ]
    },
    {
      "name": "toLong",
      "ast": {
        "name": "toLong",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Long"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Long"
      ]
    },
    {
      "name": "toNumber",
      "ast": {
        "name": "toNumber",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Dictionary",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Dictionary.html",
  "docstring": "A Dictionary is a hash table or associative array used to map keys to values.  Both the keys and values can be any Object type, though they do not all need to be of the same type. Objects used as a keys should override the [hashCode()](../../Toybox/Lang/Object.html#hashCode-instance_function) method. Due to the nature of hash tables, the order of Dictionary elements are not guaranteed to match the insertion order.",
  "methods": [
    {
      "name": "get",
      "ast": {
        "name": "get",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Object"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key to check against"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "hasKey",
      "ast": {
        "name": "hasKey",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key to check against"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "isEmpty",
      "ast": {
        "name": "isEmpty",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "keys",
      "ast": {
        "name": "keys",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Object"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "put",
      "ast": {
        "name": "put",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          },
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key for the value being inserted into the Dictionary"
        },
        {
          "name": "value",
          "docstring": "The value to insert into the Dictionary"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "remove",
      "ast": {
        "name": "remove",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key of the value to be removed"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "size",
      "ast": {
        "name": "size",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "values",
      "ast": {
        "name": "values",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Char",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Char.html",
  "docstring": "Chars are Unicode characters.",
  "methods": [
    {
      "name": "toLower",
      "ast": {
        "name": "toLower",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Char"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Char"
      ]
    },
    {
      "name": "toNumber",
      "ast": {
        "name": "toNumber",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "toUpper",
      "ast": {
        "name": "toUpper",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Char"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Char"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.ByteArray",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/ByteArray.html",
  "docstring": "ByteArray objects are fixed size, numerically indexed, single dimensional, and take Numbers with a value >= -128 and <= 255 as members.",
  "methods": [
    {
      "name": "add",
      "ast": {
        "name": "add",
        "parameters": [
          {
            "name": "byte",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Lang.Char"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": [
        {
          "name": "byte",
          "docstring": "The Number or Char byte to be added"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [Number](../../Toybox/Lang/Number.html) or [Char](../../Toybox/Lang/Char.html) is provided"
        },
        {
          "types": [
            "Lang.ValueOutOfBoundsException"
          ],
          "docstring": "Thrown if a [Number](../../Toybox/Lang/Number.html) greater than 255 or less than -128 is provided, or if a [Char](../../Toybox/Lang/Char.html) with a code point greater than 127 is provided. Negative numbers added are interpreted as the positive 8-bit unsigned equivalent once added to the ByteArray."
        }
      ],
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "addAll",
      "ast": {
        "name": "addAll",
        "parameters": [
          {
            "name": "array",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.ByteArray"
                  },
                  {
                    "type": "Lang.ByteArray"
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "array",
          "docstring": "The ByteArray or Array of bytes to be added to the ByteArray"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than ByteArray or an [Array](../../Toybox/Lang/Array.html) of bytes is provided"
        }
      ],
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "decodeNumber",
      "ast": {
        "name": "decodeNumber",
        "parameters": [
          {
            "name": "format",
            "types": [
              {
                "type": "Lang.NumberFormat"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":offset",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":endianness",
                    "types": [
                      {
                        "type": "Lang.Endian"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Numeric"
          }
        ]
      },
      "parameters": [
        {
          "name": "format",
          "docstring": "A Lang.NUMBER_FORMAT_* value representing the number format to decode."
        },
        {
          "name": "options",
          "docstring": "A Dictionary containing conversion options",
          "dictionary_keys": [
            {
              "name": ":offset",
              "docstring": "The 0 based offset in the array to begin decode. Default value is 0."
            },
            {
              "name": ":endianness",
              "docstring": "A Lang.ENDIAN_* value representing the endianness of the number to decode. Default value is Lang.ENDIAN_LITTLE."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Indicates that one of the options provided is not valid."
        }
      ],
      "returns": [
        "Lang.Number",
        "Lang.Long",
        "Lang.Float"
      ]
    },
    {
      "name": "encodeNumber",
      "ast": {
        "name": "encodeNumber",
        "parameters": [
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "format",
            "types": [
              {
                "type": "Lang.NumberFormat"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":offset",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":endianness",
                    "types": [
                      {
                        "type": "Lang.Endian"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": [
        {
          "name": "value",
          "docstring": "The value to encode"
        },
        {
          "name": "format",
          "docstring": "A Lang.NUMBER_FORMAT_* value representing the number format to encode."
        },
        {
          "name": "options",
          "docstring": "A Dictionary containing conversion options",
          "dictionary_keys": [
            {
              "name": ":offset",
              "docstring": "The 0 based offset in the array to begin encoding. Default value is 0."
            },
            {
              "name": ":endianness",
              "docstring": "A Lang.ENDIAN_* value representing the endianness of the number to encode. Default value is Lang.ENDIAN_LITTLE."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Indicates that one of the options provided is not valid."
        }
      ],
      "returns": []
    },
    {
      "name": "equals",
      "ast": {
        "name": "equals",
        "parameters": [
          {
            "name": "object"
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The Object to test against"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "hashCode",
      "ast": {
        "name": "hashCode",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "indexOf",
      "ast": {
        "name": "indexOf",
        "parameters": [
          {
            "name": "byte",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Lang.Char"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "byte",
          "docstring": "The byte whose index is to be found"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [Number](../../Toybox/Lang/Number.html) or [Char](../../Toybox/Lang/Char.html) is provided"
        },
        {
          "types": [
            "Lang.ValueOutOfBoundsException"
          ],
          "docstring": "Thrown if a [Number](../../Toybox/Lang/Number.html) greater than 255 or less than -128 is provided, or if a [Char](../../Toybox/Lang/Char.html) with a code point greater than 127 is provided. Negative numbers provided are interpreted as the positive 8-bit unsigned equivalent when searching the ByteArray."
        }
      ],
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "remove",
      "ast": {
        "name": "remove",
        "parameters": [
          {
            "name": "byte",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Lang.Char"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "byte",
          "docstring": "The byte to remove from the ByteArray"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [Number](../../Toybox/Lang/Number.html) or [Char](../../Toybox/Lang/Char.html) is provided"
        },
        {
          "types": [
            "Lang.ValueOutOfBoundsException"
          ],
          "docstring": "Thrown if a [Number](../../Toybox/Lang/Number.html) greater than 255 or less than -128 is provided, or if a [Char](../../Toybox/Lang/Char.html) with a code point greater than 127 is provided. Negative numbers provided are interpreted as the positive 8-bit unsigned equivalent when searching the ByteArray."
        }
      ],
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "removeAll",
      "ast": {
        "name": "removeAll",
        "parameters": [
          {
            "name": "byte",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Lang.Char"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "byte",
          "docstring": "The byte to remove from the ByteArray"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [Number](../../Toybox/Lang/Number.html) or [Char](../../Toybox/Lang/Char.html) is provided"
        },
        {
          "types": [
            "Lang.ValueOutOfBoundsException"
          ],
          "docstring": "Thrown if a [Number](../../Toybox/Lang/Number.html) greater than 255 or less than -128 is provided, or if a [Char](../../Toybox/Lang/Char.html) with a code point greater than 127 is provided. Negative numbers provided are interpreted as the positive 8-bit unsigned equivalent when searching the ByteArray."
        }
      ],
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "reverse",
      "ast": {
        "name": "reverse",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "size",
      "ast": {
        "name": "size",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "slice",
      "ast": {
        "name": "slice",
        "parameters": [
          {
            "name": "startIndex",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "endIndex",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": [
        {
          "name": "startIndex",
          "docstring": "A zero-based index of the start of the new ByteArray. If a negative `startIndex` is provided, it will offset from the end of the ByteArray. If the `startIndex` is `null`, the slice will begin at 0. An out-of-bounds index will be truncated to the ByteArray limits."
        },
        {
          "name": "endIndex",
          "docstring": "A zero-based index of the end of the new ByteArray. Items are included up to, but not including `endIndex`. If a negative `endIndex` is provided, it will offset from the end of the ByteArray. If `endIndex` is `null`, the slice will end at the last element. An out-of-bounds index is truncated to the ByteArray limits."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Boolean",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Boolean.html",
  "docstring": "Boolean objects represent a true or false value.  You can use the `true` or `false` keyword to create a Boolean."
},
{
  "type": "class",
  "parent": "Toybox.Lang",
  "name": "Toybox.Lang.Array",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Lang/Array.html",
  "docstring": "Array objects are fixed size, numerically indexed, single dimensional, and take any Objects (including Arrays) as members. Array keys must be Numbers, but Array values may be any type of Object.",
  "methods": [
    {
      "name": "add",
      "ast": {
        "name": "add",
        "parameters": [
          {
            "name": "object",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The Object to be added to the Array"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "addAll",
      "ast": {
        "name": "addAll",
        "parameters": [
          {
            "name": "array",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Object"
                  },
                  {
                    "type": "Null"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "array",
          "docstring": "The Array of Objects to be added to the Array"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "indexOf",
      "ast": {
        "name": "indexOf",
        "parameters": [
          {
            "name": "object",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The Object whose index is to be found"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "remove",
      "ast": {
        "name": "remove",
        "parameters": [
          {
            "name": "object",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The object to be removed from the Array"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "removeAll",
      "ast": {
        "name": "removeAll",
        "parameters": [
          {
            "name": "object",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "object",
          "docstring": "The Object to be removed from the Array"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "reverse",
      "ast": {
        "name": "reverse",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "size",
      "ast": {
        "name": "size",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "slice",
      "ast": {
        "name": "slice",
        "parameters": [
          {
            "name": "startIndex",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "endIndex",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "startIndex",
          "docstring": "A zero-based index of the start of the new Array. If a negative `startIndex` is provided, it will offset from the end of the Array. If the `startIndex` is `null`, the slice will begin at 0. An out-of-bounds index will be truncated to the array limits."
        },
        {
          "name": "endIndex",
          "docstring": "A zero-based index of the end of the new Array. Items are included up to, but not including `endIndex`. If a negative `endIndex` is provided, it will offset from the end of the Array. If `endIndex` is `null`, the the slice will end at the last element. An out-of-bounds index will be truncated to the Array limits."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Math",
  "name": "Toybox.Math.FirFilter",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Math/FirFilter.html",
  "docstring": "Finite Impulse Response (FIR) filter implementation.",
  "methods": [
    {
      "name": "apply",
      "ast": {
        "name": "apply",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Numeric"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "dictionary",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":coefficients",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Float"
                          }
                        ]
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":gain",
                    "types": [
                      {
                        "type": "Lang.Float"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "dictionary",
          "docstring": "A Dictionary containing filter settings.",
          "dictionary_keys": [
            {
              "name": ":coefficients",
              "docstring": "An Array of Float values that specify the filter coefficients. A resource ID referencing a JSON Array resource can also be used here."
            },
            {
              "name": ":gain",
              "docstring": "A Float value that specifies a multiplier to be applied to the coefficients."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "If the Dictionary does not have valid coefficients for filter or the :gain field is missing. Will also be thrown if an invalid JSON resource ID is specified for coefficients instead of an array"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Math",
  "name": "Toybox.Math.Filter",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Math/Filter.html",
  "docstring": "This is the base class for filters.  Filters are devices or processes that remove some unwanted components or features from a signal or set of data. More detailed examples of filters can be found in the [FirFilter](../../Toybox/Math/FirFilter.html) and [IirFilter](../../Toybox/Math/IirFilter.html) definitions.",
  "methods": [
    {
      "name": "apply",
      "ast": {
        "name": "apply",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Numeric"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Array of samples to apply filter"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.SymbolNotAllowedException"
          ],
          "docstring": "If called on base class Filter object"
        }
      ],
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "dictionary"
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "dictionary",
          "docstring": "A Dictionary containing filter settings. See [FirFilter](../../Toybox/Math/FirFilter.html) and [IirFilter](../../Toybox/Math/IirFilter.html) for specific options."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.SymbolNotAllowedException"
          ],
          "docstring": "If called on base class Filter object."
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.SystemButton",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/SystemButton.html",
  "docstring": "A SystemButton allows an app to override a default media player button. The button can be overridden by providing a new [Toybox::WatchUi::BitmapResource](../../Toybox/WatchUi/BitmapResource.html), Toybox:Graphics::BitmapReference or a [Toybox::Lang::Number](../../Toybox/Lang/Number.html) representing a 24-bit RRGGBB color value. If a color value is provided then the system default button will be used but will drawn using the given color.",
  "methods": [
    {
      "name": "getImage",
      "ast": {
        "name": "getImage",
        "parameters": [
          {
            "name": "image",
            "types": [
              {
                "type": "Media.ButtonImage"
              }
            ]
          },
          {
            "name": "state",
            "types": [
              {
                "type": "Media.ButtonState"
              }
            ]
          },
          {
            "name": "highlighted",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Graphics.BitmapType"
          },
          {
            "type": "Graphics.ColorType"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "image",
          "docstring": "A BUTTON_IMAGE_* value"
        },
        {
          "name": "state",
          "docstring": "A BUTTON_STATE_* value indicating the current state of the button"
        },
        {
          "name": "highlighted",
          "docstring": "Set to `true` if the button is highlighted, otherwise `false`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number",
        "WatchUi.BitmapResource",
        "Graphics.BitmapReference"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "type",
            "types": [
              {
                "type": "Media.PlaybackControl"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":disabled",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "type",
          "docstring": "A PLAYBACK_CONTROL_* value for the button."
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":disabled",
              "docstring": "Set to `true` if the button is disabled, otherwise `false`"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.SyncDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/SyncDelegate.html",
  "docstring": "A delegate object that the user implements to respond to media sync requests from the system.",
  "methods": [
    {
      "name": "isSyncNeeded",
      "ast": {
        "name": "isSyncNeeded",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onStartSync",
      "ast": {
        "name": "onStartSync",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onStopSync",
      "ast": {
        "name": "onStopSync",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.ProviderIconInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/ProviderIconInfo.html",
  "docstring": "ProviderIconInfo is the class representation of a provider icon.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "icon",
            "types": [
              {
                "type": "WatchUi.Drawable"
              },
              {
                "type": "Graphics.BitmapType"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          },
          {
            "name": "accentColor",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "icon",
          "docstring": "A [Drawable](../../Toybox/WatchUi/Drawable.html) or resource id of bitmap for the icon."
        },
        {
          "name": "accentColor",
          "docstring": "A [Graphics.COLOR_*](../../Toybox/Graphics.html) value to indicate the icon's accent color"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.PlayerColors",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/PlayerColors.html",
  "docstring": "Provides the media player with specific colors for the UI",
  "attributes": [
    {
      "name": "backgroundColor",
      "docstring": "The background color for the media player",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": null
    },
    {
      "name": "foregroundColor",
      "docstring": "The foreground color for the media player",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": null
    },
    {
      "name": "highlightBorderColor",
      "docstring": "The border color behind the currently selected icon",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": null
    },
    {
      "name": "highlightFillColor",
      "docstring": "The fill color behind the currently selected icon",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": null
    },
    {
      "name": "progressBarBackgroundColor",
      "docstring": "The color of the progress bar for total time",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": null
    },
    {
      "name": "progressBarForegroundColor",
      "docstring": "The color of the progress bar for elapsed time",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": null
    },
    {
      "name": "textColor",
      "docstring": "The color of the text in the media player",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": null
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.PlaybackProfile",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/PlaybackProfile.html",
  "docstring": "Provides the media player with specific rules about what playback options are supported.",
  "attributes": [
    {
      "name": "attemptSkipAfterThumbsDown",
      "docstring": "Defines if the current song is skipped if a thumbs-down operation is given",
      "type": "Lang.Boolean",
      "nullable": true,
      "returns": "Lang.Boolean"
    },
    {
      "name": "playbackControls",
      "docstring": "Playback controls that should be rendered in the player.  This is an Array that holds a combination of [PLAYBACK_CONTROL_*](../../Toybox/Media.html), [CustomButton](../../Toybox/Media.html), and [SystemButton](../../Toybox/Media.html) values defined by the developer. The values in this Array determine which native media player control options are rendered and available to the end user of the current device. The first entry in the array may be used as a hotkey in the media player. This is device dependent.",
      "type": "Lang.Array",
      "nullable": true,
      "returns": "Lang.Array"
    },
    {
      "name": "playbackNotificationThreshold",
      "docstring": "The number of seconds a song must play to trigger a \"played\" notification. A value of 0 means notify as soon as the song begins playing.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "playerColors",
      "docstring": "The colors for the media player. If set to `null` the default colors that are device-dependent will be used.",
      "type": "Media.PlayerColors",
      "nullable": true,
      "returns": "Media.PlayerColors"
    },
    {
      "name": "requirePlaybackNotification",
      "docstring": "Defines if the system notifies the app when each song is played",
      "type": "Lang.Boolean",
      "nullable": true,
      "returns": "Lang.Boolean"
    },
    {
      "name": "skipBackwardTimeDelta",
      "docstring": "The number of seconds to move backward in a track during a skip backward event. If set to `null` the default value of 30 seconds will be used.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "skipForwardTimeDelta",
      "docstring": "The number of seconds to move forward in a track during a skip forward event. If set to `null` the default value of 30 seconds will be used.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "skipPreviousThreshold",
      "docstring": "The amount of time a song must be played so that pressing back restarts the track and requires a second back press to skip to the previous track in seconds. If set to `null` a default value that is device-dependent will be used.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.CustomButton",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/CustomButton.html",
  "docstring": "A CustomButton allows for a media player action other than one of the PLAYBACK_CONTROL_* actions. When a CustomButton is pressed in the media player the ContentDelegate.onCustomButton(button) function is called with the pressed button as a parameter.",
  "methods": [
    {
      "name": "getImage",
      "ast": {
        "name": "getImage",
        "parameters": [
          {
            "name": "image",
            "types": [
              {
                "type": "Media.ButtonImage"
              }
            ]
          },
          {
            "name": "highlighted",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "WatchUi.BitmapResource"
          },
          {
            "type": "Graphics.BitmapReference"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "image",
          "docstring": "A BUTTON_IMAGE_* value"
        },
        {
          "name": "highlighted",
          "docstring": "`true` if the button is highlighted, otherwise `false`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "WatchUi.BitmapResource"
      ]
    },
    {
      "name": "getState",
      "ast": {
        "name": "getState",
        "parameters": [],
        "returns": [
          {
            "type": "Media.ButtonState"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getText",
      "ast": {
        "name": "getText",
        "parameters": [
          {
            "name": "state",
            "types": [
              {
                "type": "Media.ButtonState"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "state",
          "docstring": "A BUTTON_STATE_* value indicating the current state of the button"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.ContentRefIterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/ContentRefIterator.html",
  "docstring": "Iterates over [Toybox::Media::ContentRef](../../Toybox/Media/ContentRef.html) objects present on the system for this application.",
  "methods": [
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "Media.ContentRef"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.ContentRefIterator"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.ContentRef",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/ContentRef.html",
  "docstring": "Provides a reference to downloaded media content.",
  "methods": [
    {
      "name": "getContentType",
      "ast": {
        "name": "getContentType",
        "parameters": [],
        "returns": [
          {
            "type": "Media.ContentType"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getId",
      "ast": {
        "name": "getId",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Object"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "id",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          },
          {
            "name": "type",
            "types": [
              {
                "type": "Media.ContentType"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "id",
          "docstring": "A unique identifier for this ContentRef object"
        },
        {
          "name": "type",
          "docstring": "One of the [CONTENT_TYPE_*](../../Toybox/Media.html) enum values"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.ContentMetadata",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/ContentMetadata.html",
  "docstring": "Provides media content metadata for display in native media player user- interface.",
  "attributes": [
    {
      "name": "album",
      "docstring": "The album title",
      "type": "Lang.String",
      "nullable": false,
      "returns": "Lang.String"
    },
    {
      "name": "artist",
      "docstring": "The name of the artist",
      "type": "Lang.String",
      "nullable": false,
      "returns": "Lang.String"
    },
    {
      "name": "genre",
      "docstring": "The genre",
      "type": "Lang.String",
      "nullable": false,
      "returns": "Lang.String"
    },
    {
      "name": "title",
      "docstring": "The track title",
      "type": "Lang.String",
      "nullable": false,
      "returns": "Lang.String"
    },
    {
      "name": "trackNumber",
      "docstring": "The track number",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.ContentIterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/ContentIterator.html",
  "docstring": "A user-defined iterator that returns referenced to media content on the system for use by the system media player.",
  "methods": [
    {
      "name": "canSkip",
      "ast": {
        "name": "canSkip",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "get",
      "ast": {
        "name": "get",
        "parameters": [],
        "returns": [
          {
            "type": "Media.Content"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.Content"
      ]
    },
    {
      "name": "getPlaybackProfile",
      "ast": {
        "name": "getPlaybackProfile",
        "parameters": [],
        "returns": [
          {
            "type": "Media.PlaybackProfile"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.PlaybackProfile"
      ]
    },
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "Media.Content"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.Content"
      ]
    },
    {
      "name": "peekNext",
      "ast": {
        "name": "peekNext",
        "parameters": [],
        "returns": [
          {
            "type": "Media.Content"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.Content"
      ]
    },
    {
      "name": "peekPrevious",
      "ast": {
        "name": "peekPrevious",
        "parameters": [],
        "returns": [
          {
            "type": "Media.Content"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.Content"
      ]
    },
    {
      "name": "previous",
      "ast": {
        "name": "previous",
        "parameters": [],
        "returns": [
          {
            "type": "Media.Content"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.Content"
      ]
    },
    {
      "name": "repeatMode",
      "ast": {
        "name": "repeatMode",
        "parameters": [],
        "returns": [
          {
            "type": "Media.RepeatMode"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "shuffling",
      "ast": {
        "name": "shuffling",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.ContentDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/ContentDelegate.html",
  "docstring": "A delegate object that the user implements to respond to certain media events from the native media player",
  "methods": [
    {
      "name": "getContentIterator",
      "ast": {
        "name": "getContentIterator",
        "parameters": [],
        "returns": [
          {
            "type": "Media.ContentIterator"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.ContentIterator"
      ]
    },
    {
      "name": "onAdAction",
      "ast": {
        "name": "onAdAction",
        "parameters": [
          {
            "name": "adContext"
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "adContext",
          "docstring": "Context information for the ad that was clicked"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onCustomButton",
      "ast": {
        "name": "onCustomButton",
        "parameters": [
          {
            "name": "button",
            "types": [
              {
                "type": "Media.CustomButton"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "button",
          "docstring": "The CustomButton that was pressed."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onRepeat",
      "ast": {
        "name": "onRepeat",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onShuffle",
      "ast": {
        "name": "onShuffle",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onSong",
      "ast": {
        "name": "onSong",
        "parameters": [
          {
            "name": "contentRefId"
          },
          {
            "name": "songEvent",
            "types": [
              {
                "type": "Media.SongEvent"
              }
            ]
          },
          {
            "name": "playbackPosition",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Media.PlaybackPosition"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "contentRefId",
          "docstring": "The ID referencing a [ContentRef](../../Toybox/Media/ContentRef.html) object"
        },
        {
          "name": "songEvent",
          "docstring": "A [SONG_EVENT_*](../../Toybox/Media.html) value indicating the triggered event"
        },
        {
          "name": "playbackPosition",
          "docstring": "The time the song has been playing in seconds, or a [PLAYBACK_POSITION_*](../../Toybox/Media.html) value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onThumbsDown",
      "ast": {
        "name": "onThumbsDown",
        "parameters": [
          {
            "name": "contentRefId"
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "contentRefId",
          "docstring": "ID referencing a [ContentRef](../../Toybox/Media/ContentRef.html) object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onThumbsUp",
      "ast": {
        "name": "onThumbsUp",
        "parameters": [
          {
            "name": "contentRefId"
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "contentRefId",
          "docstring": "ID referencing a [ContentRef](../../Toybox/Media/ContentRef.html) object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "resetContentIterator",
      "ast": {
        "name": "resetContentIterator",
        "parameters": [],
        "returns": [
          {
            "type": "Media.ContentIterator"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.ContentIterator"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.Content",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/Content.html",
  "docstring": "Pairs a [ContentRef](../../Toybox/Media/ContentRef.html) with associated [ContentMetadata](../../Toybox/Media/ContentMetadata.html) information.",
  "methods": [
    {
      "name": "getContentRef",
      "ast": {
        "name": "getContentRef",
        "parameters": [],
        "returns": [
          {
            "type": "Media.ContentRef"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.ContentRef"
      ]
    },
    {
      "name": "getMetadata",
      "ast": {
        "name": "getMetadata",
        "parameters": [],
        "returns": [
          {
            "type": "Media.ContentMetadata"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.ContentMetadata"
      ]
    },
    {
      "name": "getPlaybackStartPosition",
      "ast": {
        "name": "getPlaybackStartPosition",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "contentRef",
            "types": [
              {
                "type": "Media.ContentRef"
              }
            ]
          },
          {
            "name": "metadata",
            "types": [
              {
                "type": "Media.ContentMetadata"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "contentRef",
          "docstring": "A reference to media content"
        },
        {
          "name": "metadata",
          "docstring": "The metadata associated with referenced media content"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setMetadata",
      "ast": {
        "name": "setMetadata",
        "parameters": [
          {
            "name": "metadata",
            "types": [
              {
                "type": "Media.ContentMetadata"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.CacheStatistics",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/CacheStatistics.html",
  "docstring": "Stores media cache size statistics",
  "attributes": [
    {
      "name": "capacity",
      "docstring": "The capacity of the media cache",
      "type": "Lang.Long",
      "nullable": false,
      "returns": "Lang.Long"
    },
    {
      "name": "size",
      "docstring": "The current size of the media cache",
      "type": "Lang.Long",
      "nullable": false,
      "returns": "Lang.Long"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.AudioFormat",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/AudioFormat.html",
  "docstring": "Stores metadata related to the quality of the audio data associated with a media file.",
  "attributes": [
    {
      "name": "bitRate",
      "docstring": "The bit rate of the audio",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "numChannels",
      "docstring": "The number of channels",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "sampleRate",
      "docstring": "The sample rate of the audio in Hz",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Media",
  "name": "Toybox.Media.AlbumArt",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Media/AlbumArt.html",
  "docstring": "Stores metadata related to the location and format of album art",
  "attributes": [
    {
      "name": "image_format",
      "docstring": "The image format of the album art",
      "type": "Media.ImageFormat",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "image_offset",
      "docstring": "Byte offset of the album art image within the audio file",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.PersistedContent",
  "name": "Toybox.PersistedContent.Waypoint",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/PersistedContent/Waypoint.html",
  "docstring": "A saved Waypoint on the device in .FIT or .GPX format.",
  "methods": [
    {
      "name": "getId",
      "ast": {
        "name": "getId",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getName",
      "ast": {
        "name": "getName",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "remove",
      "ast": {
        "name": "remove",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if the given content is not owned by the calling application."
        }
      ],
      "returns": []
    },
    {
      "name": "toIntent",
      "ast": {
        "name": "toIntent",
        "parameters": [],
        "returns": [
          {
            "type": "System.Intent"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "System.Intent"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.PersistedContent",
  "name": "Toybox.PersistedContent.Track",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/PersistedContent/Track.html",
  "docstring": "A saved Track on the device in .GPX format.",
  "methods": [
    {
      "name": "getId",
      "ast": {
        "name": "getId",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getName",
      "ast": {
        "name": "getName",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "remove",
      "ast": {
        "name": "remove",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if the given content is not owned by the calling application."
        }
      ],
      "returns": []
    },
    {
      "name": "toIntent",
      "ast": {
        "name": "toIntent",
        "parameters": [],
        "returns": [
          {
            "type": "System.Intent"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "System.Intent"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.PersistedContent",
  "name": "Toybox.PersistedContent.Route",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/PersistedContent/Route.html",
  "docstring": "A saved Route on the device in .GPX format.",
  "methods": [
    {
      "name": "getId",
      "ast": {
        "name": "getId",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getName",
      "ast": {
        "name": "getName",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "remove",
      "ast": {
        "name": "remove",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if the given content is not owned by the calling application."
        }
      ],
      "returns": []
    },
    {
      "name": "toIntent",
      "ast": {
        "name": "toIntent",
        "parameters": [],
        "returns": [
          {
            "type": "System.Intent"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "System.Intent"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.PersistedContent",
  "name": "Toybox.PersistedContent.Iterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/PersistedContent/Iterator.html",
  "docstring": "Content iterator for the persisted content",
  "methods": [
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "PersistedContent.Content"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.PersistedContent",
  "name": "Toybox.PersistedContent.Course",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/PersistedContent/Course.html",
  "docstring": "A saved Course on the device in .FIT format.",
  "methods": [
    {
      "name": "getId",
      "ast": {
        "name": "getId",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getName",
      "ast": {
        "name": "getName",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "remove",
      "ast": {
        "name": "remove",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if the given content is not owned by the calling application."
        }
      ],
      "returns": []
    },
    {
      "name": "toIntent",
      "ast": {
        "name": "toIntent",
        "parameters": [],
        "returns": [
          {
            "type": "System.Intent"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "System.Intent"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Position",
  "name": "Toybox.Position.Info",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Position/Info.html",
  "docstring": "The Position.Info class contains all of the information provided by the positioning system.  Position Info can be retrieved on every call of [onUpdate()](../../Toybox/WatchUi/View.html#onUpdate-instance_function) or it can be obtained on demand. Fields in this class may return `null` so should be checked for `null` values prior to use.",
  "attributes": [
    {
      "name": "accuracy",
      "docstring": "The positional accuracy.  This is given as one of the following values: good, usable, poor, or not available, which corresponds with the Position.QUALITY_* constants. This cannot be `null`.",
      "type": "Position.Quality",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "altitude",
      "docstring": "The elevation above mean sea level in meters (m).  Elevation is obtained from the GPS. If no GPS is present, then no valid elevation will be returned.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "heading",
      "docstring": "The true north referenced heading in radians.  This provides the direction of travel when moving. If supported by the device, it provides compass orientation when stopped.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "position",
      "docstring": "The latitude and longitude of the position.  If no GPS is available or is between GPS fix intervals (typically 1 second), the position is propagated (i.e. dead-reckoned) using the last known heading and last known speed. After a short period of time, the position will cease to be propagated to avoid excessive accumulation of position errors.",
      "type": "Position.Location",
      "nullable": true,
      "returns": "Position.Location"
    },
    {
      "name": "speed",
      "docstring": "The horizontal speed in meters per second (mps).  Speed is derived from the most accurate source in the following order:    1. GPS     2. Foot pod     3. Accelerometer",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "when",
      "docstring": "The GPS time stamp of the obtained [Location](../../Toybox/Position/Location.html) fix.",
      "type": "Time.Moment",
      "nullable": true,
      "returns": "Time.Moment"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Sensor",
  "name": "Toybox.Sensor.SensorInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor/SensorInfo.html",
  "docstring": "A class describing a Sensor  The SensorInfo provides access to the attributes of a Sensor.",
  "attributes": [
    {
      "name": "data",
      "docstring": "The Sensor-specific data  A dictionary of sensor-specific attributes. Currently supported attributes include:    * `:bleAddress` \\- The mac address of the BLE sensor (e.g., 01:02:03:04:05:06) as a [ByteArray](../../Toybox/Lang/ByteArray.html), if available.     * `:antSerialNumber` \\- The 20-bit ANT sensor serial number as a [Number](../../Toybox/Lang/Number.html)",
      "type": "Lang.Dictionary",
      "nullable": true,
      "returns": "Lang.Dictionary"
    },
    {
      "name": "enabled",
      "docstring": "The Sensor enabled flag.  An indicator of whether or not the sensor is enabled for pairing.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "manufacturerId",
      "docstring": "The Sensor manufacturer.  The manufacturer id of the sensor. May be `null`.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "name",
      "docstring": "The Sensor name.  The name of the sensor.",
      "type": "Lang.String",
      "nullable": false,
      "returns": "Lang.String"
    },
    {
      "name": "partNumber",
      "docstring": "The Sensor part number.  The part number the sensor. May be `null`.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "softwareVersion",
      "docstring": "The Sensor software version.  The software version of the sensor. May be `null`.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "technology",
      "docstring": "The Sensor technology  The technology used to communicate with this sensor.",
      "type": "Sensor.SensorTechnology",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "type",
      "docstring": "The Sensor type.  The type of the sensor.",
      "type": "Sensor.SensorType",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Sensor",
  "name": "Toybox.Sensor.SensorData",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor/SensorData.html",
  "docstring": "A class to encapsulate all high-frequency sensor data that can be retrieved.",
  "attributes": [
    {
      "name": "accelerometerData",
      "docstring": "An [AccelerometerData](../../Toybox/Sensor/AccelerometerData.html) object.  Can be `null` if accelerometer data was not requested.",
      "type": "Sensor.AccelerometerData",
      "nullable": true,
      "returns": null
    },
    {
      "name": "gyroscopeData",
      "docstring": "An [GyroscopeData](../../Toybox/Sensor/GyroscopeData.html) object.  Can be `null` if gyroscope data was not requested.",
      "type": "Sensor.GyroscopeData",
      "nullable": true,
      "returns": null
    },
    {
      "name": "heartRateData",
      "docstring": "A [HeartRateData](../../Toybox/Sensor/HeartRateData.html) object.  Can be `null` if heart rate interval data is not available.",
      "type": "Sensor.HeartRateData",
      "nullable": true,
      "returns": null
    },
    {
      "name": "magnetometerData",
      "docstring": "An [MagnetometerData](../../Toybox/Sensor/MagnetometerData.html) object.  Can be `null` if MagnetometerData data was not requested.",
      "type": "Sensor.MagnetometerData",
      "nullable": true,
      "returns": null
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Sensor",
  "name": "Toybox.Sensor.MagnetometerData",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor/MagnetometerData.html",
  "docstring": "A class to store magnetometerData sample data.  Each field specified is an [Array](../../Toybox/Lang/Array.html) of [Number](../../Toybox/Lang/Number.html) values. The values for the x, y, and z axes are in milliGauss (mG) This is typically used in a callback method used by [registerSensorDataListener()](../../Toybox/Sensor.html#registerSensorDataListener- instance_function)",
  "attributes": [
    {
      "name": "x",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of x axis values as [Numbers](../../Toybox/Lang/Number.html) in milliGauss.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    },
    {
      "name": "y",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of y axis values as [Numbers](../../Toybox/Lang/Number.html) in milliGauss.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    },
    {
      "name": "z",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of z axis values as [Numbers](../../Toybox/Lang/Number.html) in milliGauss.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Sensor",
  "name": "Toybox.Sensor.Info",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor/Info.html",
  "docstring": "The Sensor.Info class contains all of the information provided by enabled sensors.  [Sensor.Info](../../Toybox/Sensor/Info.html) can be retrieved on every call of [onUpdate()](../../Toybox/WatchUi/View.html#onUpdate-instance_function) or it can be obtained on demand. Fields in this class may return `null` so should be checked for `null` values prior to use.",
  "attributes": [
    {
      "name": "accel",
      "docstring": "The accelerometer reading of the x, y, and z axes as an Array of [Number](../../Toybox/Lang/Number.html) values in millig-units.",
      "type": "Lang.Array",
      "nullable": true,
      "returns": "Lang.Array"
    },
    {
      "name": "altitude",
      "docstring": "The altitude above mean sea level in meters (m).  Elevation is derived from the most accurate source: Barometer or GPS in order of descending accuracy. If no GPS is present, then barometer readings will be used.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "cadence",
      "docstring": "The cadence in revolutions per minute (rpm).  Cadence is derived from (in order of priority):    1. Bike sensors (cadence or speed must be enabled)     2. Advanced running dynamics sensors (e.g. heart strap with running dynamics enabled)     3. Foot pod     4. Watch-based cadence calculations",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "heading",
      "docstring": "The true north referenced heading in radians.  This provides compass orientation if it is supported by the device.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "heartRate",
      "docstring": "The heart rate in beats per minute (bpm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "mag",
      "docstring": "The magnetometer reading of the x, y, and z axes as an Array of [Number](../../Toybox/Lang/Number.html) values in milliGauss (mG).",
      "type": "Lang.Array",
      "nullable": true,
      "returns": "Lang.Array"
    },
    {
      "name": "oxygenSaturation",
      "docstring": "The current oxygen saturation in percent (%)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "power",
      "docstring": "The power in Watts (W).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "pressure",
      "docstring": "The barometric pressure in Pascals (Pa).  This returns barometric pressure calibrated to sea level. Since pressure varies dues to several factors, a GPS-based altitude must first be obtained, then the ambient (local) pressure is measured by the pressure sensor before conversion to a calibrated barometric pressure value.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "speed",
      "docstring": "The speed in meters per second (m/s).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "temperature",
      "docstring": "The temperature in degrees Celsius (C).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Sensor",
  "name": "Toybox.Sensor.HeartRateData",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor/HeartRateData.html",
  "docstring": "A class to store granular heart rate data.  This class provides granular heart rate data like beat-to-beat intervals. This is typically used in a callback method used by [registerSensorDataListener()](../../Toybox/Sensor.html#registerSensorDataListener- instance_function).",
  "attributes": [
    {
      "name": "heartBeatIntervals",
      "docstring": "The most recent beat-to-beat interval data as an [Array](../../Toybox/Lang/Array.html) of [Number](../../Toybox/Lang/Number.html) objects in milliseconds (ms).",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Sensor",
  "name": "Toybox.Sensor.GyroscopeData",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor/GyroscopeData.html",
  "docstring": "A class to store gyroscope sample data.  Each field specified is an [Array](../../Toybox/Lang/Array.html) of [Float](../../Toybox/Lang/Float.html) values. The values for the x, y, and z axes are in deg/sec units. This is typically used in a callback method used by [registerSensorDataListener()](../../Toybox/Sensor.html#registerSensorDataListener- instance_function)",
  "attributes": [
    {
      "name": "x",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of x axis values as [Float](../../Toybox/Lang/Float.html) in deg/sec.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    },
    {
      "name": "y",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of y axis values as [Float](../../Toybox/Lang/Float.html) in deg/sec.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    },
    {
      "name": "z",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of z axis values as [Float](../../Toybox/Lang/Float.html) in deg/sec.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Sensor",
  "name": "Toybox.Sensor.AccelerometerData",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Sensor/AccelerometerData.html",
  "docstring": "A class to store accelerometer sample data.  Each field specified is an [Array](../../Toybox/Lang/Array.html) of [Float](../../Toybox/Lang/Float.html) or [Number](../../Toybox/Lang/Number.html) values. The values for the x, y, and z axes are in Milli G units. For reference, 1000 Milli G = 1 G. If not `null`, all fields are of equal size. This is typically used in a callback method used by [registerSensorDataListener()](../../Toybox/Sensor.html#registerSensorDataListener- instance_function)",
  "attributes": [
    {
      "name": "pitch",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of pitch values as [Floats](../../Toybox/Lang/Float.html) in degrees. Can be `null`.  Pitch values are calculated with the equation atan2(y, sqrt(x^2 + z^2)).",
      "type": "Lang.Array",
      "nullable": true,
      "returns": "Lang.Array"
    },
    {
      "name": "power",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of vector power values as [Numbers](../../Toybox/Lang/Number.html) in millig-units. Can be `null`.",
      "type": "Lang.Array",
      "nullable": true,
      "returns": "Lang.Array"
    },
    {
      "name": "roll",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of roll values as [Floats](../../Toybox/Lang/Float.html) in degrees. Can be `null`.  Roll values are calculated with the equation atan2(-x, z).",
      "type": "Lang.Array",
      "nullable": true,
      "returns": "Lang.Array"
    },
    {
      "name": "x",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of x axis values as [Numbers](../../Toybox/Lang/Number.html) in millig-units.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    },
    {
      "name": "y",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of y axis values as [Numbers](../../Toybox/Lang/Number.html) in millig-units.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    },
    {
      "name": "z",
      "docstring": "The [Array](../../Toybox/Lang/Array.html) of z axis values as [Numbers](../../Toybox/Lang/Number.html) in millig-units.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.SensorHistory",
  "name": "Toybox.SensorHistory.SensorSample",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/SensorHistory/SensorSample.html",
  "docstring": "A class containing sensor data at a given time.",
  "attributes": [
    {
      "name": "data",
      "docstring": "The Sensor sample.  The Sensor sample may contain invalid data. Make sure to `has` check for invalid samples. If the samples do not contain data, they will return `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "when",
      "docstring": "The time of the Sensor sample.",
      "type": "Time.Moment",
      "nullable": false,
      "returns": "Time.Moment"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.SensorHistory",
  "name": "Toybox.SensorHistory.SensorHistoryIterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/SensorHistory/SensorHistoryIterator.html",
  "docstring": "A class containing sensor data for a given period of time.  The SensorHistoryIterator describes a sequence of [SensorSample](../../Toybox/SensorHistory/SensorSample.html) objects. The iterator is retrieved using the appropriate \"get\" methods found in [SensorHistory](../../Toybox/SensorHistory.html) at the module level. This class provides the methods needed to retrieve information from each of the SensorSample objects included in the iterator.",
  "methods": [
    {
      "name": "getMax",
      "ast": {
        "name": "getMax",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          },
          {
            "type": "Lang.Float"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getMin",
      "ast": {
        "name": "getMin",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          },
          {
            "type": "Lang.Float"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getNewestSampleTime",
      "ast": {
        "name": "getNewestSampleTime",
        "parameters": [],
        "returns": [
          {
            "type": "Time.Moment"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    },
    {
      "name": "getOldestSampleTime",
      "ast": {
        "name": "getOldestSampleTime",
        "parameters": [],
        "returns": [
          {
            "type": "Time.Moment"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    },
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "SensorHistory.SensorSample"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "SensorHistory.SensorSample"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.System",
  "name": "Toybox.System.Stats",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System/Stats.html",
  "docstring": "Represents various statistics available on a device, such as the battery charge and memory use.",
  "attributes": [
    {
      "name": "battery",
      "docstring": "The remaining battery life as a percentage.",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    },
    {
      "name": "batteryInDays",
      "docstring": "The remaining battery life in days.",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    },
    {
      "name": "charging",
      "docstring": "Battery charging indicator. This will be set to `true` if the device is connected to the charging cradle or cable whether or not the device is fully charged.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "freeMemory",
      "docstring": "The current free memory in bytes.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "solarIntensity",
      "docstring": "A [Toybox::Lang::Number](../../Toybox/Lang/Number.html) value from 0-100 that describes the solar sensor's charge efficiency, if available. Will be set to `null` if the device doesn't support solar or a `negative` number when the device is not currently charging.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "totalMemory",
      "docstring": "The total available memory in bytes.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "usedMemory",
      "docstring": "The memory used by the application in bytes.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.System",
  "name": "Toybox.System.ServiceDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System/ServiceDelegate.html",
  "docstring": "ServiceDelegate is a class used to service [Background](../../Toybox/Background.html) events.  This class is used as the main entry point for background processes. A callback function within the delegate can be used to initiate other system events (e.g. [Communications](../../Toybox/Communications.html)), but only the delegate function is guaranteed to complete. The Background process may be shut down at any time to handle higher priority processes.",
  "methods": [
    {
      "name": "onActivityCompleted",
      "ast": {
        "name": "onActivityCompleted",
        "parameters": [
          {
            "name": "activity",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":sport",
                    "types": [
                      {
                        "type": "Activity.Sport"
                      }
                    ]
                  },
                  {
                    "name": ":subSport",
                    "types": [
                      {
                        "type": "Activity.SubSport"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "activity",
          "docstring": "A dictionary containing information about the completed activity.",
          "dictionary_keys": [
            {
              "name": ":sport",
              "docstring": "The primary sport of the completed activity."
            },
            {
              "name": ":subSport",
              "docstring": "The sport subcategory of the completed activity."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onGoalReached",
      "ast": {
        "name": "onGoalReached",
        "parameters": [
          {
            "name": "goalType",
            "types": [
              {
                "type": "Application.GoalType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "goalType",
          "docstring": "An Application.GOAL_TYPE_* value, representing the goal type that is being registered."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onOAuthResponse",
      "ast": {
        "name": "onOAuthResponse",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onPhoneAppMessage",
      "ast": {
        "name": "onPhoneAppMessage",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Communications.PhoneAppMessage"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The message received."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onSleepTime",
      "ast": {
        "name": "onSleepTime",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onSteps",
      "ast": {
        "name": "onSteps",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTemporalEvent",
      "ast": {
        "name": "onTemporalEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onWakeTime",
      "ast": {
        "name": "onWakeTime",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.System",
  "name": "Toybox.System.PreviousOperationNotCompleteException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System/PreviousOperationNotCompleteException.html",
  "docstring": "This exception indicates that a call cannot be executed because a prior operation has not completed.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.System",
  "name": "Toybox.System.Intent",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System/Intent.html",
  "docstring": "An Intent sends content from one app to another app.  Strictly speaking, content is sent to a **URI** by an Intent, which can either be a native activity (e.g. Run, Bike, etc.) or another Connect IQ app. Used in conjunction with [System.exitTo()](../../Toybox/System.html#exitTo- instance_function), Intents can exit the current app and launch a second app, passing information from the originating app to the newly open app.  For example, a widget might collect data from a service via a [Communications](../../Toybox/Communications.html) call and pass that data to a device app via Intent for use during an activity.",
  "attributes": [
    {
      "name": "arguments",
      "docstring": "",
      "type": "Lang.Dictionary",
      "nullable": true,
      "returns": null
    },
    {
      "name": "uri",
      "docstring": "",
      "type": "Lang.String",
      "nullable": false,
      "returns": null
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "aURI",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "aArgs",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "aURI",
          "docstring": "The URI that specifies receiver of the Intent"
        },
        {
          "name": "aArgs",
          "docstring": "Parameters to pass to the target URI"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.System",
  "name": "Toybox.System.DeviceSettings",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System/DeviceSettings.html",
  "docstring": "Represents various settings available on a device.",
  "attributes": [
    {
      "name": "activityTrackingOn",
      "docstring": "The activity tracking setting mode.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "alarmCount",
      "docstring": "The number of alarms set on the device.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "connectionAvailable",
      "docstring": "Indicates if any communication channel is connected and available for use.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "connectionInfo",
      "docstring": "The state of connections available to the device.",
      "type": "Lang.Dictionary",
      "nullable": false,
      "returns": "Lang.Dictionary"
    },
    {
      "name": "distanceUnits",
      "docstring": "The distance unit setting mode.",
      "type": "System.UnitsSystem",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "doNotDisturb",
      "docstring": "The Do Not Disturb setting mode.  Not all devices support Do Not Disturb, so it's a good idea to perform a `has` check when attempting to use this value.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "elevationUnits",
      "docstring": "The elevation unit setting mode.",
      "type": "System.UnitsSystem",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "firmwareVersion",
      "docstring": "The current firmware version of the device.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    },
    {
      "name": "firstDayOfWeek",
      "docstring": "The first day of the week.",
      "type": "Gregorian.DayOfWeek",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "heightUnits",
      "docstring": "The height unit setting mode.",
      "type": "System.UnitsSystem",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "inputButtons",
      "docstring": "The physical buttons supported by the device.  This returns a bitwise binary of the enumerated values defined by the System.BUTTON_INPUT_* constants that match the available buttons on a particular device. For example, a vivoactive HR returns a value of 9, which indicates Select (1) and Menu (8) button support. A fenix 5, however, returns 11, indicating support for all available button types.",
      "type": "System.ButtonInputs",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "is24Hour",
      "docstring": "The clock mode mode.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "isEnhancedReadabilityModeEnabled",
      "docstring": "Indicates the device is currently using Enhanced Readability Mode.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "isGlanceModeEnabled",
      "docstring": "Indicates if widget glances are enabled on the device.  If glance mode is enabled, the system will pass up / down key events to a widget base page. Otherwise, the system will mask them out.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "isNightModeEnabled",
      "docstring": "Indicates the device is currently using night mode colors",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "isTouchScreen",
      "docstring": "The availability of a touch screen on the device.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "monkeyVersion",
      "docstring": "The Connect IQ version supported by the device.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": "Lang.Array"
    },
    {
      "name": "notificationCount",
      "docstring": "The number of active notifications.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "paceUnits",
      "docstring": "The pace unit setting mode.",
      "type": "System.UnitsSystem",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "partNumber",
      "docstring": "The part number of the device.",
      "type": "Lang.String",
      "nullable": false,
      "returns": "Lang.String"
    },
    {
      "name": "phoneConnected",
      "docstring": "The phone connection status mode.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "requiresBurnInProtection",
      "docstring": "This flag indicates whether the device screen requires burn-in protection.  Some screens require special drawing behavior when rendering content in always-on mode. If a screen requires burn-in protection the following rules must be followed: A maximum of ten-percent of the total available screen pixels can be in use at one time. Individual pixels can be on for no more than three update cycles when updating at once-per-minute intervals. If either condition is violated all screen pixels will be turned off until the device goes into high-power mode.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "screenHeight",
      "docstring": "The height of the device screen in pixels.  In some cases, this can be useful to determine the device type at runtime. However, to get the height of the screen area currently available to an app, use [Graphics.Dc.getHeight()](../../Toybox/Graphics/Dc.html#getHeight- instance_function).",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "screenShape",
      "docstring": "The screen shape of the device.",
      "type": "System.ScreenShape",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "screenWidth",
      "docstring": "The width of the device screen in pixels.  In some cases, this can be useful to determine the device type at runtime. However, to get the width of the screen area currently available to an app, use [Graphics.Dc.getWidth()](../../Toybox/Graphics/Dc.html#getWidth- instance_function).",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "systemLanguage",
      "docstring": "The language being used by the system",
      "type": "System.Language",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "temperatureUnits",
      "docstring": "The temperature unit setting mode.",
      "type": "System.UnitsSystem",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "tonesOn",
      "docstring": "The tone setting mode.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "uniqueIdentifier",
      "docstring": "A unique alphanumeric device identifier.  The value is unique for every app, but is stable on a device across uninstall and reinstall. Any use of this value for tracking user information must be in compliance with international privacy law.",
      "type": "Lang.String",
      "nullable": true,
      "returns": "Lang.String"
    },
    {
      "name": "vibrateOn",
      "docstring": "The vibration setting mode.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "weightUnits",
      "docstring": "The weight unit setting mode.",
      "type": "System.UnitsSystem",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.System",
  "name": "Toybox.System.ConnectionInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System/ConnectionInfo.html",
  "docstring": "Represents the state of a communications channel connection.",
  "attributes": [
    {
      "name": "state",
      "docstring": "The state of the connection.",
      "type": "System.ConnectionState",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.System",
  "name": "Toybox.System.ClockTime",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System/ClockTime.html",
  "docstring": "Represents the current local time.  ClockTime is a convenient way to get the current time in an easy-to-use format without the need to perform time zone conversions or time-based arithmetic. Values provided by ClockTime may require formatting for proper display within an app.",
  "attributes": [
    {
      "name": "dst",
      "docstring": "The daylight savings time offset.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "hour",
      "docstring": "The hour of the day based on a 24-hour clock.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "min",
      "docstring": "The minute of the current hour.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "sec",
      "docstring": "The second of the current minute.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "timeZoneOffset",
      "docstring": "The time offset from UTC in seconds.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.System",
  "name": "Toybox.System.AppNotInstalledException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/System/AppNotInstalledException.html",
  "docstring": "This exception indicates that the app targeted for opening is not installed.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Test",
  "name": "Toybox.Test.Logger",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Test/Logger.html",
  "docstring": "The Logger class provides output capabilities to tests.  It is not necessary to instantiate the Logger class. This is done automatically behind the scenes.",
  "methods": [
    {
      "name": "debug",
      "ast": {
        "name": "debug",
        "parameters": [
          {
            "name": "str",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "str",
          "docstring": "The String output to the console"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "error",
      "ast": {
        "name": "error",
        "parameters": [
          {
            "name": "str",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "str",
          "docstring": "The String output to the console"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "warning",
      "ast": {
        "name": "warning",
        "parameters": [
          {
            "name": "str",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "str",
          "docstring": "The String output to the console"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Test",
  "name": "Toybox.Test.AssertException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Test/AssertException.html",
  "docstring": "Constructor",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "message"
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "message",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Time",
  "name": "Toybox.Time.LocalMoment",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Time/LocalMoment.html",
  "docstring": "A LocalMoment is an immutable moment in time.  LocalMoment represents a single point in time at a specific location. It differs from Moment in that it also keeps time zone information in addition to the time.",
  "methods": [
    {
      "name": "add",
      "ast": {
        "name": "add",
        "parameters": [
          {
            "name": "addend",
            "types": [
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.LocalMoment"
          }
        ]
      },
      "parameters": [
        {
          "name": "addend",
          "docstring": "The Duration to add to this LocalMoment."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.LocalMoment"
      ]
    },
    {
      "name": "compare",
      "ast": {
        "name": "compare",
        "parameters": [
          {
            "name": "moment",
            "types": [
              {
                "type": "Time.LocalMoment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "moment",
          "docstring": "The LocalMoment to compare to this LocalMoment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getDaylightSavingsTimeOffset",
      "ast": {
        "name": "getDaylightSavingsTimeOffset",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getOffset",
      "ast": {
        "name": "getOffset",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getTimeZoneOffset",
      "ast": {
        "name": "getTimeZoneOffset",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "greaterThan",
      "ast": {
        "name": "greaterThan",
        "parameters": [
          {
            "name": "moment",
            "types": [
              {
                "type": "Time.LocalMoment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "moment",
          "docstring": "The LocalMoment to compare to this LocalMoment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "isDaylightSavingsTime",
      "ast": {
        "name": "isDaylightSavingsTime",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "lessThan",
      "ast": {
        "name": "lessThan",
        "parameters": [
          {
            "name": "moment",
            "types": [
              {
                "type": "Time.LocalMoment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "moment",
          "docstring": "The LocalMoment to compare to this LocalMoment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "subtract",
      "ast": {
        "name": "subtract",
        "parameters": [
          {
            "name": "subtrahend",
            "types": [
              {
                "type": "Time.Duration"
              },
              {
                "type": "Time.LocalMoment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Duration"
          },
          {
            "type": "Time.LocalMoment"
          }
        ]
      },
      "parameters": [
        {
          "name": "subtrahend",
          "docstring": "The LocalMoment or Duration to subtract from this LocalMoment"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Duration",
        "Time.LocalMoment"
      ]
    },
    {
      "name": "toMoment",
      "ast": {
        "name": "toMoment",
        "parameters": [],
        "returns": [
          {
            "type": "Time.Moment"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    },
    {
      "name": "value",
      "ast": {
        "name": "value",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Time",
  "name": "Toybox.Time.Duration",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Time/Duration.html",
  "docstring": "A Duration is an immutable period of time.  Duration objects are closely related to [Moment](../../Toybox/Time/Moment.html) objects, and are frequently used together for time calculations. While a [Moment](../../Toybox/Time/Moment.html) represents a single point in time, a Duration represents a span of time such as seven days.  Duration objects are stored as a the number of seconds that compose the span of time the Duration represents.",
  "methods": [
    {
      "name": "add",
      "ast": {
        "name": "add",
        "parameters": [
          {
            "name": "time",
            "types": [
              {
                "type": "Time.Moment"
              },
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Moment"
          },
          {
            "type": "Time.Duration"
          }
        ]
      },
      "parameters": [
        {
          "name": "time",
          "docstring": "The Duration or Moment to add to Duration"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Duration",
        "Time.Moment"
      ]
    },
    {
      "name": "compare",
      "ast": {
        "name": "compare",
        "parameters": [
          {
            "name": "duration",
            "types": [
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "duration",
          "docstring": "The Duration to compare to this Duration"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "divide",
      "ast": {
        "name": "divide",
        "parameters": [
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Duration"
          }
        ]
      },
      "parameters": [
        {
          "name": "value",
          "docstring": "The value by which to divide the Duration"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Duration"
      ]
    },
    {
      "name": "greaterThan",
      "ast": {
        "name": "greaterThan",
        "parameters": [
          {
            "name": "duration",
            "types": [
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "duration",
          "docstring": "The Duration to compare to this Duration"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Duration"
          }
        ]
      },
      "parameters": [
        {
          "name": "value",
          "docstring": "The Number of seconds with which to initialize the Duration"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Duration"
      ]
    },
    {
      "name": "lessThan",
      "ast": {
        "name": "lessThan",
        "parameters": [
          {
            "name": "duration",
            "types": [
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "duration",
          "docstring": "The Duration to compare to this Duration"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "multiply",
      "ast": {
        "name": "multiply",
        "parameters": [
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Duration"
          }
        ]
      },
      "parameters": [
        {
          "name": "value",
          "docstring": "The value by which to multiply the Duration"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Duration"
      ]
    },
    {
      "name": "subtract",
      "ast": {
        "name": "subtract",
        "parameters": [
          {
            "name": "duration",
            "types": [
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Duration"
          }
        ]
      },
      "parameters": [
        {
          "name": "duration",
          "docstring": "The Duration to subtract from this Duration"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Duration"
      ]
    },
    {
      "name": "value",
      "ast": {
        "name": "value",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "namespace",
  "parent": "Toybox.Time",
  "name": "Toybox.Time.Gregorian",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Time/Gregorian.html",
  "docstring": "The Gregorian module provides an interface for getting [Moment](../../Toybox/Time/Moment.html) objects and [Duration](../../Toybox/Time/Duration.html) objects based on the Gregorian calendar.  For convenience, several time constants are defined that represent the number of seconds per year, per day, per hour, and per minute.",
  "classes": [
    "Info"
  ],
  "constants": [
    {
      "name": "DAY_SUNDAY",
      "value": "1",
      "since": "API Level 3.0.0",
      "description": "Sunday",
      "parent": "DayOfWeek"
    },
    {
      "name": "DAY_MONDAY",
      "value": "2",
      "since": "API Level 3.0.0",
      "description": "Monday",
      "parent": "DayOfWeek"
    },
    {
      "name": "DAY_TUESDAY",
      "value": "3",
      "since": "API Level 3.0.0",
      "description": "Tuesday",
      "parent": "DayOfWeek"
    },
    {
      "name": "DAY_WEDNESDAY",
      "value": "4",
      "since": "API Level 3.0.0",
      "description": "Wednesday",
      "parent": "DayOfWeek"
    },
    {
      "name": "DAY_THURSDAY",
      "value": "5",
      "since": "API Level 3.0.0",
      "description": "Thursday",
      "parent": "DayOfWeek"
    },
    {
      "name": "DAY_FRIDAY",
      "value": "6",
      "since": "API Level 3.0.0",
      "description": "Friday",
      "parent": "DayOfWeek"
    },
    {
      "name": "DAY_SATURDAY",
      "value": "7",
      "since": "API Level 3.0.0",
      "description": "Saturday",
      "parent": "DayOfWeek"
    }
  ],
  "methods": [
    {
      "name": "duration",
      "ast": {
        "name": "duration",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":years",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":days",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":hours",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":minutes",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":seconds",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Duration"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A dictionary of options",
          "dictionary_keys": [
            {
              "name": ":years",
              "docstring": "The number of years (max 69)"
            },
            {
              "name": ":days",
              "docstring": "The number of days (max 24855)"
            },
            {
              "name": ":hours",
              "docstring": "The number of hours (max 596523)"
            },
            {
              "name": ":minutes",
              "docstring": "The number of minutes (max 35791394)"
            },
            {
              "name": ":seconds",
              "docstring": "The number of seconds (max 2147483647)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Duration"
      ]
    },
    {
      "name": "info",
      "ast": {
        "name": "info",
        "parameters": [
          {
            "name": "moment",
            "types": [
              {
                "type": "Time.Moment"
              },
              {
                "type": "Time.LocalMoment"
              }
            ]
          },
          {
            "name": "format",
            "types": [
              {
                "type": "Time.DateFormat"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Gregorian.Info"
          }
        ]
      },
      "parameters": [
        {
          "name": "moment",
          "docstring": "A Moment or LocalMoment object for which to get Info"
        },
        {
          "name": "format",
          "docstring": "A Time.FORMAT_* type"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Gregorian.Info"
      ]
    },
    {
      "name": "localMoment",
      "ast": {
        "name": "localMoment",
        "parameters": [
          {
            "name": "location",
            "types": [
              {
                "type": "Position.Location"
              }
            ]
          },
          {
            "name": "moment",
            "types": [
              {
                "type": "Time.Moment"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.LocalMoment"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "location",
          "docstring": "The location to use to determine the time zone offset and daylight saving time rules."
        },
        {
          "name": "moment",
          "docstring": "The UTC time to find the local time for."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.LocalMoment"
      ]
    },
    {
      "name": "moment",
      "ast": {
        "name": "moment",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":year",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":month",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Lang.Symbol"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":day",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":hour",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":minute",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":second",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Time.Moment"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A dictionary of options; values that would not result in a valid date are not allowed",
          "dictionary_keys": [
            {
              "name": ":year",
              "docstring": "The year (1970-2106)"
            },
            {
              "name": ":month",
              "docstring": "The month (1-12)"
            },
            {
              "name": ":day",
              "docstring": "The day of month (1-31)"
            },
            {
              "name": ":hour",
              "docstring": "The hour (0-23)"
            },
            {
              "name": ":minute",
              "docstring": "The minute (0-59)"
            },
            {
              "name": ":second",
              "docstring": "The second (0-59)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    },
    {
      "name": "utcInfo",
      "ast": {
        "name": "utcInfo",
        "parameters": [
          {
            "name": "moment",
            "types": [
              {
                "type": "Time.Moment"
              }
            ]
          },
          {
            "name": "format",
            "types": [
              {
                "type": "Time.DateFormat"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Gregorian.Info"
          }
        ]
      },
      "parameters": [
        {
          "name": "format",
          "docstring": "A Time.FORMAT_* type"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Gregorian.Info"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.UserProfile",
  "name": "Toybox.UserProfile.UserActivity",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/UserProfile/UserActivity.html",
  "docstring": "A class for storing user activity information.",
  "attributes": [
    {
      "name": "distance",
      "docstring": "Distance covered by the activity in meters",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "duration",
      "docstring": "Duration of the activity",
      "type": "Time.Duration",
      "nullable": true,
      "returns": "Time.Duration"
    },
    {
      "name": "startTime",
      "docstring": "Start time of the activity",
      "type": "Time.Moment",
      "nullable": true,
      "returns": "Time.Moment"
    },
    {
      "name": "type",
      "docstring": "Sport type of the activity.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.UserProfile",
  "name": "Toybox.UserProfile.Profile",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/UserProfile/Profile.html",
  "docstring": "The profile object contains user information.",
  "attributes": [
    {
      "name": "activityCls",
      "docstring": "Activity level from 0-100;",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "averageRestingHeartRate",
      "docstring": "The user's seven day average resting heart rate (bpm). Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "birthYear",
      "docstring": "Birth Year",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "gender",
      "docstring": "The Gender enum",
      "type": "UserProfile.Gender",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "height",
      "docstring": "Height in centimeters (cm)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "restingHeartRate",
      "docstring": "Heart rate in beats per minute (bpm)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "runningStepLength",
      "docstring": "Running step length in millimeters (mm)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "sleepTime",
      "docstring": "Typical sleep time as configured by the user.  Stored as a [Duration](../../Toybox/Time/Duration.html) past local midnight.",
      "type": "Time.Duration",
      "nullable": true,
      "returns": "Time.Duration"
    },
    {
      "name": "vo2maxCycling",
      "docstring": "The user's VO2 Max value for cycling activity Value may be `null`",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "vo2maxRunning",
      "docstring": "The user's VO2 Max value for running activity Value may be `null`",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "wakeTime",
      "docstring": "Typical wake time as configured by the user.  Stored as a [Duration](../../Toybox/Time/Duration.html) past local midnight.",
      "type": "Time.Duration",
      "nullable": true,
      "returns": "Time.Duration"
    },
    {
      "name": "walkingStepLength",
      "docstring": "Walking step length in millimeters (mm)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "weight",
      "docstring": "Weight in grams (g)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.WatchFaceDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/WatchFaceDelegate.html",
  "docstring": "Receive events on a Watch Face.",
  "methods": [
    {
      "name": "onPowerBudgetExceeded",
      "ast": {
        "name": "onPowerBudgetExceeded",
        "parameters": [
          {
            "name": "powerInfo",
            "types": [
              {
                "type": "WatchUi.WatchFacePowerInfo"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "powerInfo",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onPress",
      "ast": {
        "name": "onPress",
        "parameters": [
          {
            "name": "clickEvent",
            "types": [
              {
                "type": "WatchUi.ClickEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "clickEvent",
          "docstring": "Click event"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.WatchFace",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/WatchFace.html",
  "docstring": "Create a Watch Face that supports exiting/entering low power mode.  A WatchFace is a special View that provides notifications when the device changes power states.  A WatchFace will run in a high power mode for a short period when responding to a gesture (i.e., raising the watch to check the time) or when returning to the watch face from another application. While in high power mode, the watch face will perform full screen updates every second via calls to [onUpdate()](../../Toybox/WatchUi/View.html#onUpdate-instance_function), and the application will have access to timers and animations.  After this period in high power mode (typically about ten seconds), the system will call [onEnterSleep()](../../Toybox/WatchUi/WatchFace.html#onEnterSleep- instance_function) to notify the application that it is preparing to enter low power mode.  During low power mode the system will call [onUpdate()](../../Toybox/WatchUi/View.html#onUpdate-instance_function) at the top of every minute. If partial update support is available, the [onPartialUpdate()](../../Toybox/WatchUi/WatchFace.html#onPartialUpdate- instance_function) method will be called for the first 59 seconds of every minute. The application will not have access to timers or animations while in low power mode.  When a gesture occurs while running in low power mode the system will call [onExitSleep()](../../Toybox/WatchUi/WatchFace.html#onExitSleep- instance_function) to notify the application that the transition to high power mode has occurred.  The initial view of a watch face application `must` extend [WatchFace](../../Toybox/WatchUi/WatchFace.html).",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onEnterSleep",
      "ast": {
        "name": "onEnterSleep",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onExitSleep",
      "ast": {
        "name": "onExitSleep",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onPartialUpdate",
      "ast": {
        "name": "onPartialUpdate",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The device context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ViewLoopFactory",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ViewLoopFactory.html",
  "docstring": "A factory object for view/delegate instances, used by ViewLoop",
  "methods": [
    {
      "name": "getSize",
      "ast": {
        "name": "getSize",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getView",
      "ast": {
        "name": "getView",
        "parameters": [
          {
            "name": "page",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "WatchUi.View"
              },
              {
                "type": "WatchUi.BehaviorDelegate"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "page",
          "docstring": "Index for the view/delegate pair"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ViewLoopDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ViewLoopDelegate.html",
  "docstring": "A delegate object for the view loop. The next and previous events generated by the system are passed to the delegate object when [ViewLoop](../../Toybox/WatchUi/ViewLoop.html) is active for the app.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "viewLoop",
            "types": [
              {
                "type": "WatchUi.ViewLoop"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "viewLoop",
          "docstring": "Object that manages the collection of views"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onNextView",
      "ast": {
        "name": "onNextView",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onPreviousView",
      "ast": {
        "name": "onPreviousView",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ViewLoop",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ViewLoop.html",
  "docstring": "An object representing the view loop with a collection of scrollable views.",
  "methods": [
    {
      "name": "changeView",
      "ast": {
        "name": "changeView",
        "parameters": [
          {
            "name": "direction",
            "types": [
              {
                "type": "ViewLoop.Direction"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "direction",
          "docstring": "The direction in which to change page to"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown when the view loop is not an active page for the app."
        }
      ],
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "factory",
            "types": [
              {
                "type": "WatchUi.ViewLoopFactory"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":page",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":wrap",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  },
                  {
                    "name": ":color",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "factory",
          "docstring": "A factory object for the view loop to retrieve view and delegates managed with in this view loop"
        },
        {
          "name": "options",
          "docstring": "Options for this view loop object",
          "dictionary_keys": [
            {
              "name": ":page",
              "docstring": "initial page index for the view loop."
            },
            {
              "name": ":wrap",
              "docstring": "if wrapping through the pages is allowed"
            },
            {
              "name": ":color",
              "docstring": "accent color for the page indicator."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.ValueOutOfBoundsException"
          ],
          "docstring": "Thrown if [ViewLoopFactory](../../Toybox/WatchUi/ViewLoopFactory.html) returns a size less than or equal to 0."
        },
        {
          "types": [
            "Lang.ValueOutOfBoundsException"
          ],
          "docstring": "Thrown if [Number](../../Toybox/Lang/Number.html) :page option value is negative or greater than the value returned by the [ViewLoopFactory](../../Toybox/WatchUi/ViewLoopFactory.html)"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.View",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/View.html",
  "docstring": "A View is an object that represents a page within an app.  An app may have multiple View objects representing things like menus and other app states. Each View contains a Layout, which in turn contain [Drawable](../../Toybox/WatchUi/Drawable.html) objects, such as [Bitmaps](../../Toybox/WatchUi/Bitmap.html) and [Text](../../Toybox/WatchUi/Text.html). View objects also handle the life cycle of each app, which varies depending on the app type:  Widgets and Watch Apps        [onLayout()](../../Toybox/WatchUi/View.html#onLayout-instance_function) → [onShow()](../../Toybox/WatchUi/View.html#onShow-instance_function) → [onUpdate()](../../Toybox/WatchUi/View.html#onUpdate-instance_function) → [onHide()](../../Toybox/WatchUi/View.html#onHide-instance_function)  Watch Faces        [onLayout()](../../Toybox/WatchUi/View.html#onLayout-instance_function) → [onShow()](../../Toybox/WatchUi/View.html#onShow-instance_function) → [onUpdate()](../../Toybox/WatchUi/View.html#onUpdate-instance_function)  Data Fields        [onLayout()](../../Toybox/WatchUi/View.html#onLayout-instance_function) → [onShow()](../../Toybox/WatchUi/View.html#onShow-instance_function) → [onUpdate()](../../Toybox/WatchUi/View.html#onUpdate-instance_function)  If the size of the data field has changed since the last onUpdate(), onLayout() will be called prior to onUpdate(). However, onLayout(), onShow(), and onUpdate() are not called for [SimpleDataField](../../Toybox/WatchUi/SimpleDataField.html) objects.",
  "methods": [
    {
      "name": "addLayer",
      "ast": {
        "name": "addLayer",
        "parameters": [
          {
            "name": "layer",
            "types": [
              {
                "type": "WatchUi.Layer"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "layer",
          "docstring": "a [WatchUi.Layer](../../Toybox/WatchUi/Layer.html) object to add"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if the `layer` is not a WatchUi.Layer"
        }
      ],
      "returns": []
    },
    {
      "name": "clearLayers",
      "ast": {
        "name": "clearLayers",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "findDrawableById",
      "ast": {
        "name": "findDrawableById",
        "parameters": [
          {
            "name": "identifier",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "WatchUi.Drawable"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "identifier",
          "docstring": "The identifier of the Drawable to find"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "WatchUi.Drawable"
      ]
    },
    {
      "name": "getLayerIndex",
      "ast": {
        "name": "getLayerIndex",
        "parameters": [
          {
            "name": "layer",
            "types": [
              {
                "type": "WatchUi.Layer"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "layer",
          "docstring": "a [WatchUi.Layer](../../Toybox/WatchUi/Layer.html) a layer object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getLayers",
      "ast": {
        "name": "getLayers",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "WatchUi.Layer"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "insertLayer",
      "ast": {
        "name": "insertLayer",
        "parameters": [
          {
            "name": "layer",
            "types": [
              {
                "type": "WatchUi.Layer"
              }
            ]
          },
          {
            "name": "idx",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "layer",
          "docstring": "a layer to insert."
        },
        {
          "name": "idx",
          "docstring": "position in the layer stack to insert layer."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onHide",
      "ast": {
        "name": "onHide",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onLayout",
      "ast": {
        "name": "onLayout",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The device context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onShow",
      "ast": {
        "name": "onShow",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onUpdate",
      "ast": {
        "name": "onUpdate",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The device context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "removeLayer",
      "ast": {
        "name": "removeLayer",
        "parameters": [
          {
            "name": "layer",
            "types": [
              {
                "type": "WatchUi.Layer"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "layer",
          "docstring": "a [WatchUi.Layer](../../Toybox/WatchUi/Layer.html) to remove from the layer stack."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "setClockHandPosition",
      "ast": {
        "name": "setClockHandPosition",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":clockState",
                    "types": [
                      {
                        "type": "WatchUi.AnalogClockState"
                      }
                    ]
                  },
                  {
                    "name": ":hour",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":minute",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Options for setting the analog clock state.",
          "dictionary_keys": [
            {
              "name": ":clockState",
              "docstring": "An ANALOG_CLOCK_STATE_* value for the clock state"
            },
            {
              "name": ":hour",
              "docstring": "Position for the hour hand in degrees clockwise from the 12 o'clock position"
            },
            {
              "name": ":minute",
              "docstring": "Position for the minute hand in degrees clockwise from the 12 o'clock position"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if invalid or no value is passed in for :clockState."
        },
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if no :hour and :minute values are specified for the :clockState value of ANALOG_CLOCK_STATE_HOLDING."
        }
      ],
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "setControlBar",
      "ast": {
        "name": "setControlBar",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "View.ControlBarOptions"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Optional parameters for control bar. If null, the control bar will be hidden.",
          "dictionary_keys": [
            {
              "name": ":leftButton",
              "docstring": "The icon to use for the left button. Must be a [CONTROL_BAR_LEFT_BUTTON_*](../../Toybox/WatchUi.html#ControlBarLeftButton- module) value."
            },
            {
              "name": ":rightButton",
              "docstring": "The icon to use for the right button. Must be a [CONTROL_BAR_RIGHT_BUTTON_*](../../Toybox/WatchUi.html#ControlBarRightButton- module) value. If the value is `null` or not provided, no button will be shown."
            },
            {
              "name": ":title",
              "docstring": "The title to display in the control bar. If the view is of type Menu2, the Menu2 title will be given priority and will be displayed in the control bar. If no title is specified, the application name will be used."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown if called on a view type that does not support control bar changes, or if called from [onLayout](../../Toybox/WatchUi/View.html#onLayout- instance_function) or [onUpdate](../../Toybox/WatchUi/View.html#onUpdate- instance_function)."
        },
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if one or more of the specified options is not valid for the view type."
        }
      ],
      "returns": []
    },
    {
      "name": "setKeyToSelectableInteraction",
      "ast": {
        "name": "setKeyToSelectableInteraction",
        "parameters": [
          {
            "name": "enable",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "enable",
          "docstring": "Set to `true` if the mode should be enabled, otherwise `false`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.SymbolNotAllowedException"
          ],
          "docstring": "Thrown if called from a data field app"
        }
      ],
      "returns": []
    },
    {
      "name": "setLayout",
      "ast": {
        "name": "setLayout",
        "parameters": [
          {
            "name": "layout",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "WatchUi.Drawable"
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "layout",
          "docstring": "An array of Drawables or `null`."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ToggleMenuItem",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ToggleMenuItem.html",
  "docstring": "A representation of a toggle item in a Menu2.  A ToggleMenuItem is a element of a [Menu2](../../Toybox/WatchUi/Menu2.html) View that represents one of the options in the menu, and includes an indicator on the menu item that appears in one of two states: enabled or disabled. When selected, the state of the ToggleMenuItem changes to the state opposite of the state prior to the onSelect delegate callback invocation.  A ToggleMenuItem can be added to a Menu2 using the [addItem()](../../Toybox/WatchUi/Menu2.html#addItem-instance_function) method.",
  "methods": [
    {
      "name": "getSubLabel",
      "ast": {
        "name": "getSubLabel",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          },
          {
            "type": "Lang.Dictionary",
            "keyType": [
              {
                "type": "Lang.Symbol"
              }
            ],
            "valueType": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String",
        "Lang.Dictionary"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "label",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          },
          {
            "name": "subLabel",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":enabled",
                    "types": [
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "Lang.Symbol"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":disabled",
                    "types": [
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "Lang.Symbol"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "identifier"
          },
          {
            "name": "enabled",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":alignment",
                    "types": [
                      {
                        "type": "MenuItem.Alignment"
                      }
                    ]
                  },
                  {
                    "name": ":icon",
                    "types": [
                      {
                        "type": "Graphics.BitmapType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "label",
          "docstring": "The string label for the ToggleMenuItem"
        },
        {
          "name": "subLabel",
          "docstring": "The substring label for the item or a dictionary of toggle states mapped to sub-label strings, which can be `null`",
          "dictionary_keys": [
            {
              "name": ":enabled",
              "docstring": "The string displayed when the ToggleMenuItem is enabled, or `null`"
            },
            {
              "name": ":disabled",
              "docstring": "The string displayed when the ToggleMenuItem is disabled, or `null`"
            }
          ]
        },
        {
          "name": "identifier",
          "docstring": "The identifier for this ToggleMenuItem, which is typically a [String](../../Toybox/Lang/String.html)"
        },
        {
          "name": "enabled",
          "docstring": "The initial state of the ToggleMenuItem; enabled if `true`, disabled if `false`"
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":alignment",
              "docstring": "A WatchUi.MenuItem.MENU_ITEM_LABEL_ALIGN_* constant representing the label alignment, which defaults to the system default for toggle menu items if not specified."
            },
            {
              "name": ":icon",
              "docstring": "for the subscreen area when the menu item is in focus"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "isEnabled",
      "ast": {
        "name": "isEnabled",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "setEnabled",
      "ast": {
        "name": "setEnabled",
        "parameters": [
          {
            "name": "enabled",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "enabled",
          "docstring": "The intended state of the ToggleMenuItem; enabled if `true`, disabled if `false`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if enabled is not a valid type"
        }
      ],
      "returns": []
    },
    {
      "name": "setSubLabel",
      "ast": {
        "name": "setSubLabel",
        "parameters": [
          {
            "name": "subLabel",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "Lang.Dictionary",
                "keyType": [
                  {
                    "type": "Lang.Symbol"
                  }
                ],
                "valueType": [
                  {
                    "type": "Lang.String"
                  },
                  {
                    "type": "Lang.Symbol"
                  },
                  {
                    "type": "Null"
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "subLabel",
          "docstring": "The substring label for the item or a dictionary of toggle states mapped to sub-label strings, which can be `null`",
          "dictionary_keys": [
            {
              "name": ":enabled",
              "docstring": "The string displayed when the ToggleMenuItem is enabled, or `null`"
            },
            {
              "name": ":disabled",
              "docstring": "The string displayed when the ToggleMenuItem is disabled, or `null`"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.TextPickerDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/TextPickerDelegate.html",
  "docstring": "TextPickerDelegate responds to a TextPicker selection.  This class should be extended to handle the specified text.",
  "methods": [
    {
      "name": "onCancel",
      "ast": {
        "name": "onCancel",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTextEntered",
      "ast": {
        "name": "onTextEntered",
        "parameters": [
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "changed",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "text",
          "docstring": "The entered text"
        },
        {
          "name": "changed",
          "docstring": "The entered text differs from the initially specified text of the TextPicker"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.TextPicker",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/TextPicker.html",
  "docstring": "A representation of an on-screen text picker.  A TextPicker is a special View that provides a way to specify textual input in an app. A TextPicker is pushed using [pushView()](../../Toybox/WatchUi.html#pushView-instance_function), and provides a [TextPickerDelegate](../../Toybox/WatchUi/TextPickerDelegate.html) as the input delegate. A default value can be provided and is displayed as editable text with the cursor placed at the end.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "initialText",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "initialText",
          "docstring": "The initial text for the TextPicker"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.TextArea",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/TextArea.html",
  "docstring": "A representation of a text area that will automatically apply line breaks to fit as much text as possible.",
  "methods": [
    {
      "name": "draw",
      "ast": {
        "name": "draw",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The device context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "settings",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":text",
                    "types": [
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":color",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      }
                    ]
                  },
                  {
                    "name": ":backgroundColor",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      }
                    ]
                  },
                  {
                    "name": ":font",
                    "types": [
                      {
                        "type": "Graphics.FontType"
                      },
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Graphics.FontType"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":justification",
                    "types": [
                      {
                        "type": "Graphics.TextJustification"
                      },
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":identifier",
                    "types": [
                      {
                        "type": "Lang.Object"
                      }
                    ]
                  },
                  {
                    "name": ":locX",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":locY",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":width",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":height",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":visible",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "settings",
          "docstring": "A Dictionary containing the settings for the Text object",
          "dictionary_keys": [
            {
              "name": ":text",
              "docstring": "The text string or resource identifier of a string resource"
            },
            {
              "name": ":color",
              "docstring": "A Graphics.COLOR_* value representing the desired text color, defaults to COLOR_WHITE"
            },
            {
              "name": ":backgroundColor",
              "docstring": "A Graphics.COLOR_* value representing the desired background color, defaults to COLOR_TRANSPARENT"
            },
            {
              "name": ":font",
              "docstring": "A Graphics.FONT_* value representing the desired font face, or an array of such values. Defaults to FONT_MEDIUM"
            },
            {
              "name": ":justification",
              "docstring": "A Graphics.TEXT_JUSTIFY_* value representing the desired justification, defaults to TEXT_JUSTIFY_LEFT"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setBackgroundColor",
      "ast": {
        "name": "setBackgroundColor",
        "parameters": [
          {
            "name": "color",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "color",
          "docstring": "A Graphics.COLOR_* value representing the desired background color"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if color is not a valid type"
        }
      ],
      "returns": []
    },
    {
      "name": "setColor",
      "ast": {
        "name": "setColor",
        "parameters": [
          {
            "name": "color",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "color",
          "docstring": "A Graphics.COLOR_* value representing the desired text color"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if color is not a valid type"
        }
      ],
      "returns": []
    },
    {
      "name": "setFont",
      "ast": {
        "name": "setFont",
        "parameters": [
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              },
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Graphics.FontType"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "font",
          "docstring": "A Graphics.FONT_* value representing the desired font face or a resource object from [WatchUi.loadResource()](../../Toybox/WatchUi.html#loadResource- instance_function), or an [Array](../../Toybox/Lang/Array.html) of such values."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if font is not a valid type"
        }
      ],
      "returns": []
    },
    {
      "name": "setJustification",
      "ast": {
        "name": "setJustification",
        "parameters": [
          {
            "name": "justification",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "justification",
          "docstring": "A Graphics.TEXT_JUSTIFY_* value representing the desired justification"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if justification is not a valid type"
        }
      ],
      "returns": []
    },
    {
      "name": "setText",
      "ast": {
        "name": "setText",
        "parameters": [
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "text",
          "docstring": "The text String or the resource identifier of a string resource"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if text is not a valid type"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Text",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Text.html",
  "docstring": "A representation of a text resource.",
  "methods": [
    {
      "name": "draw",
      "ast": {
        "name": "draw",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The device context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "settings",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":text",
                    "types": [
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":color",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      }
                    ]
                  },
                  {
                    "name": ":backgroundColor",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      }
                    ]
                  },
                  {
                    "name": ":font",
                    "types": [
                      {
                        "type": "Graphics.FontType"
                      }
                    ]
                  },
                  {
                    "name": ":justification",
                    "types": [
                      {
                        "type": "Graphics.TextJustification"
                      },
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":identifier",
                    "types": [
                      {
                        "type": "Lang.Object"
                      }
                    ]
                  },
                  {
                    "name": ":locX",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":locY",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":width",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":height",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":visible",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "settings",
          "docstring": "A Dictionary containing the settings for the Text object",
          "dictionary_keys": [
            {
              "name": ":text",
              "docstring": "The text string or resource identifier of a string resource"
            },
            {
              "name": ":color",
              "docstring": "A Graphics.COLOR_* value representing the desired text color, defaults to COLOR_WHITE"
            },
            {
              "name": ":backgroundColor",
              "docstring": "A Graphics.COLOR_* value representing the desired background color, defaults to COLOR_TRANSPARENT"
            },
            {
              "name": ":font",
              "docstring": "A Graphics.FONT_* value representing the desired font face, defaults to FONT_MEDIUM"
            },
            {
              "name": ":justification",
              "docstring": "A Graphics.TEXT_JUSTIFY_* value representing the desired justification, defaults to TEXT_JUSTIFY_LEFT"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setBackgroundColor",
      "ast": {
        "name": "setBackgroundColor",
        "parameters": [
          {
            "name": "color",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "color",
          "docstring": "A Graphics.COLOR_* value representing the desired background color"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setColor",
      "ast": {
        "name": "setColor",
        "parameters": [
          {
            "name": "color",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "color",
          "docstring": "A Graphics.COLOR_* value representing the desired text color"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setFont",
      "ast": {
        "name": "setFont",
        "parameters": [
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "font",
          "docstring": "A Graphics.FONT_* value representing the desired font face or a resource object from [WatchUi.loadResource()](../../Toybox/WatchUi.html#loadResource- instance_function)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setJustification",
      "ast": {
        "name": "setJustification",
        "parameters": [
          {
            "name": "justification",
            "types": [
              {
                "type": "Graphics.TextJustification"
              },
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "justification",
          "docstring": "A Graphics.TEXT_JUSTIFY_* value representing the desired justification"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setText",
      "ast": {
        "name": "setText",
        "parameters": [
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "text",
          "docstring": "The text String or the resource identifier of a string resource"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.SwipeEvent",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/SwipeEvent.html",
  "docstring": "SwipeEvent is an object sent to [InputDelegate](../../Toybox/WatchUi/InputDelegate.html) when there is swipe interaction with the device's touch screen.",
  "methods": [
    {
      "name": "getDirection",
      "ast": {
        "name": "getDirection",
        "parameters": [],
        "returns": [
          {
            "type": "WatchUi.SwipeDirection"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.SimpleDataField",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/SimpleDataField.html",
  "docstring": "Create a SimpleDataField.  A SimpleDataField is a special View that automatically provides [Activity.Info](../../Toybox/Activity/Info.html) once per second via the [compute()](../../Toybox/WatchUi/SimpleDataField.html#compute- instance_function) method.  Just like in a [DataField](../../Toybox/WatchUi/DataField.html), a SimpleDataField automatically provides [Activity.Info](../../Toybox/Activity/Info.html) once per second via the [compute()](../../Toybox/WatchUi/SimpleDataField.html#compute- instance_function) method. In exchange for the flexibility offered in a DataField, all field layout is handled automatically in a SimpleDataField.  A SimpleDataField requires two items:    * A [compute()](../../Toybox/WatchUi/SimpleDataField.html#compute-instance_function) method should return the value to be displayed by the SimpleDataField. Allowed types are Number, Float, Long, Double, Duration, and String.     * A \"label\" variable, which should be assigned a String label for the field.",
  "attributes": [
    {
      "name": "label",
      "docstring": "The field label String.",
      "type": "Lang.String",
      "nullable": false,
      "returns": null
    }
  ],
  "methods": [
    {
      "name": "compute",
      "ast": {
        "name": "compute",
        "parameters": [
          {
            "name": "info",
            "types": [
              {
                "type": "Activity.Info"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Numeric"
          },
          {
            "type": "Time.Duration"
          },
          {
            "type": "Lang.String"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "info",
          "docstring": "The updated Activity.Info object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number",
        "Lang.Long",
        "Lang.Float",
        "Lang.Double",
        "Time.Duration",
        "Lang.String"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.SelectableEvent",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/SelectableEvent.html",
  "docstring": "SelectableEvent is an object sent to [InputDelegate](../../Toybox/WatchUi/InputDelegate.html) when a [Selectable](../../Toybox/WatchUi/Selectable.html) is manipulated using physical buttons or touch screen.",
  "methods": [
    {
      "name": "getInstance",
      "ast": {
        "name": "getInstance",
        "parameters": [],
        "returns": [
          {
            "type": "WatchUi.Selectable"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "getPreviousState",
      "ast": {
        "name": "getPreviousState",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Symbol"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Symbol"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Selectable",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Selectable.html",
  "docstring": "A representation of an on-screen selectable object with defined states depending on selection mode.",
  "attributes": [
    {
      "name": "stateDefault",
      "docstring": "The default state of a Selectable object.  A [Drawable](../../Toybox/WatchUi/Drawable.html), Graphics.COLOR_* constant, or 24-bit integer of the form 0xRRGGBB representing the default state of the Selectable",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": "Lang.Object"
    },
    {
      "name": "stateDisabled",
      "docstring": "The disabled state of a Selectable object.  A [Drawable](../../Toybox/WatchUi/Drawable.html), Graphics.COLOR_* constant, or 24-bit integer of the form 0xRRGGBB representing the disabled state of the Selectable",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": "Lang.Object"
    },
    {
      "name": "stateHighlighted",
      "docstring": "The highlighted state of a Selectable object.  A [Drawable](../../Toybox/WatchUi/Drawable.html), Graphics.COLOR_* constant, or 24-bit integer of the form 0xRRGGBB representing the highlighted state of the Selectable",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": "Lang.Object"
    },
    {
      "name": "stateSelected",
      "docstring": "The selected state of a Selectable object.  A [Drawable](../../Toybox/WatchUi/Drawable.html), Graphics.COLOR_* constant, or 24-bit integer of the form 0xRRGGBB representing the selected state of the Selectable",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": "Lang.Object"
    }
  ],
  "methods": [
    {
      "name": "draw",
      "ast": {
        "name": "draw",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The device context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getState",
      "ast": {
        "name": "getState",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Symbol"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Symbol"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "settings",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":locX",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":locY",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":width",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":height",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":stateDefault",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":stateHighlighted",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":stateSelected",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":stateDisabled",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":identifier",
                    "types": [
                      {
                        "type": "Lang.Object"
                      }
                    ]
                  },
                  {
                    "name": ":visible",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "settings",
          "docstring": "A Dictionary containing settings for the Selectable object",
          "dictionary_keys": [
            {
              "name": ":locX",
              "docstring": "The absolute, on-screen x-coordinate for the Selectable object (required)"
            },
            {
              "name": ":locY",
              "docstring": "The absolute, on-screen y-coordinate for the Selectable object (required)"
            },
            {
              "name": ":width",
              "docstring": "The clip width of the Selectable object (required)"
            },
            {
              "name": ":height",
              "docstring": "The clip height of the Selectable object (required)"
            },
            {
              "name": ":stateDefault",
              "docstring": "The Drawable or color to display in default state (optional)"
            },
            {
              "name": ":stateHighlighted",
              "docstring": "The Drawable or color to display in highlighted state (optional)"
            },
            {
              "name": ":stateSelected",
              "docstring": "The Drawable or color to display in selected state (optional)"
            },
            {
              "name": ":stateDisabled",
              "docstring": "The Drawable or color to display in disabled state (optional)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setState",
      "ast": {
        "name": "setState",
        "parameters": [
          {
            "name": "state",
            "types": [
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "state",
          "docstring": "The desired state:    * :stateDefault     * :stateHighlighted     * :stateSelected     * :stateDisabled",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "WatchUi.InvalidSelectableStateException"
          ],
          "docstring": ""
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Time.Gregorian",
  "name": "Toybox.Time.Gregorian.Info",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Time/Gregorian/Info.html",
  "docstring": "The Gregorian.Info class contains all of the necessary information to represent a Gregorian date.  The types of some returned values depend on the Time.FORMAT_* value specified when calling [info()](../../../Toybox/Time/Gregorian.html#info- instance_function) or [utcInfo()](../../../Toybox/Time/Gregorian.html#utcInfo- instance_function).",
  "attributes": [
    {
      "name": "day",
      "docstring": "The date, indicating the day of the month.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "day_of_week",
      "docstring": "The day of the week (e.g. Monday, Tuesday, Wednesday, etc,).",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "hour",
      "docstring": "The hour of the day based on a 24-hour clock.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "min",
      "docstring": "The minutes within an hour.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "month",
      "docstring": "The month of the year (e.g. January, February, March, etc.).",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "sec",
      "docstring": "The seconds within a minute.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "year",
      "docstring": "The year.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ReviewResponseToken",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ReviewResponseToken.html",
  "docstring": "Class that represents an opaque review response token"
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ProgressBar",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ProgressBar.html",
  "docstring": "A representation of an on-screen progress bar.  A ProgressBar is a special View that presents the user with a progress indicator. These can display a string and either an incremental progress bar from 0-100% or a \"busy\" indicator. A ProgressBar is pushed using [pushView()](../../Toybox/WatchUi.html#pushView-instance_function), which provides either `null` or a [BehaviorDelegate](../../Toybox/WatchUi/BehaviorDelegate.html). If a BehaviorDelegate is provided, the [onBack()](../../Toybox/WatchUi/BehaviorDelegate.html#onBack- instance_function) method will be called if Back button is pressed while the ProgressBar is displayed.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "displayString",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "startValue",
            "types": [
              {
                "type": "Lang.Float"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "displayString",
          "docstring": "The string to display on the ProgressBar"
        },
        {
          "name": "startValue",
          "docstring": "The initial value for the ProgressBar:    * An increment from 0 to 100     * `null` for \"busy\"",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setDisplayString",
      "ast": {
        "name": "setDisplayString",
        "parameters": [
          {
            "name": "displayString",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "displayString",
          "docstring": "The string to display on the ProgressBar"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setProgress",
      "ast": {
        "name": "setProgress",
        "parameters": [
          {
            "name": "progressValue",
            "types": [
              {
                "type": "Lang.Float"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "progressValue",
          "docstring": "The current value of the ProgressBar:    * An increment from 0 to 100     * `null` for \"busy\"",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.PickerFactory",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/PickerFactory.html",
  "docstring": "Create a PickerFactory.  A PickerFactory is used to specify which objects will be displayed by a [Picker](../../Toybox/WatchUi/Picker.html)",
  "methods": [
    {
      "name": "getDrawable",
      "ast": {
        "name": "getDrawable",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "isSelected",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "WatchUi.Drawable"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The item index"
        },
        {
          "name": "isSelected",
          "docstring": "`true` if the current item is the selected item, otherwise `false`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "WatchUi.Drawable"
      ]
    },
    {
      "name": "getSize",
      "ast": {
        "name": "getSize",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getValue",
      "ast": {
        "name": "getValue",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Object"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The item index"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.PickerDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/PickerDelegate.html",
  "docstring": "PickerDelegate responds to a Picker confirm or cancel.",
  "methods": [
    {
      "name": "onAccept",
      "ast": {
        "name": "onAccept",
        "parameters": [
          {
            "name": "values",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Boolean"
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "values",
          "docstring": "The values chosen in the Picker."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onCancel",
      "ast": {
        "name": "onCancel",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Picker",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Picker.html",
  "docstring": "A representation of an on-screen generic picker.  A Picker consists of one or more choose-able objects, a title, a next and previous arrow, and a confirmation button. The next and previous arrows and the confirmation button are device specific but can be overridden if desired. A Picker is pushed using [pushView()](../../Toybox/WatchUi.html#pushView- instance_function), which provides a [PickerDelegate](../../Toybox/WatchUi/PickerDelegate.html).  A [PickerFactory](../../Toybox/WatchUi/PickerFactory.html) is required to indicate what should be displayed for each pick-able value, and is capable of displaying any number of entries from which may be chosen. For example, consider the following:                     new NumberFactory();          new Ui.Text({:text=>\"-\"});          new NumberFactory();       This Picker will have three entries: a choosable number, a non-choosable \"-\", and another choosable number.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "settings"
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "settings",
          "docstring": "A Dictionary containing the settings for the Picker object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setOptions",
      "ast": {
        "name": "setOptions",
        "parameters": [
          {
            "name": "settings",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":title",
                    "types": [
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":pattern",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "WatchUi.Drawable"
                          },
                          {
                            "type": "WatchUi.PickerFactory"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":defaults",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Number"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":nextArrow",
                    "types": [
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":previousArrow",
                    "types": [
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":confirm",
                    "types": [
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "settings",
          "docstring": "A Dictionary containing the settings for the Picker object",
          "dictionary_keys": [
            {
              "name": ":title",
              "docstring": "The title for the Picker (required)"
            },
            {
              "name": ":pattern",
              "docstring": "An Array of either [Drawable](../../Toybox/WatchUi/Drawable.html) or [PickerFactory](../../Toybox/WatchUi/PickerFactory.html) objects for the Picker to display. A PickerFactory presents a choice of Pickers, while a Drawable immediately displays the Picker (required)"
            },
            {
              "name": ":defaults",
              "docstring": "An Array of [Number](../../Toybox/Lang/Number.html) objects indicating the starting index for each entry in the supplied pattern (optional)"
            },
            {
              "name": ":nextArrow",
              "docstring": "A custom next icon for the Picker (optional)"
            },
            {
              "name": ":previousArrow",
              "docstring": "A custom previous icon for the Picker (optional)"
            },
            {
              "name": ":confirm",
              "docstring": "A custom confirmation icon for the Picker (optional)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.NumberPickerDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/NumberPickerDelegate.html",
  "docstring": "NumberPickerDelegate responds to a NumberPicker selection.  This class should be extended to handle the specified number.",
  "methods": [
    {
      "name": "onNumberPicked",
      "ast": {
        "name": "onNumberPicked",
        "parameters": [
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Lang.Float"
              },
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "value",
          "docstring": "The entered number (type dependent upon the NumberPicker mode)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.NumberPicker",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/NumberPicker.html",
  "docstring": "A representation of an on-screen number picker.  A NumberPicker is a special View that provides a way to specify numeric values within an app. A NumberPicker is pushed using [pushView()](../../Toybox/WatchUi.html#pushView-instance_function) and provides a [NumberPickerDelegate](../../Toybox/WatchUi/NumberPickerDelegate.html) as the input delegate.  The NumberPicker class is limited to the eight specific modes described by the WatchUi.NUMBER_PICKER_* types enum. There are set minimum and maximum values enforced by the product for each mode, and the initial value of the NumberPicker will be adjusted to fall within these bounds.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "mode",
            "types": [
              {
                "type": "WatchUi.NumberPickerMode"
              }
            ]
          },
          {
            "name": "initialValue",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Lang.Float"
              },
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "mode",
          "docstring": "The NUMBER_PICKER_* value for the desired mode"
        },
        {
          "name": "initialValue",
          "docstring": "The initial value for the NumberPicker, dependent on the specified mode"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.MenuItem",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/MenuItem.html",
  "docstring": "A representation of a menu item in a Menu2.  A MenuItem is a element of a [Menu2](../../Toybox/WatchUi/Menu2.html) View that represents one of the options in the menu. A MenuItem can be added to a Menu2 using the [addItem()](../../Toybox/WatchUi/Menu2.html#addItem- instance_function) method.",
  "methods": [
    {
      "name": "getIcon",
      "ast": {
        "name": "getIcon",
        "parameters": [],
        "returns": [
          {
            "type": "Graphics.BitmapType"
          },
          {
            "type": "WatchUi.Drawable"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Graphics.BitmapType",
        "Lang.Symbol",
        "WatchUi.Drawable"
      ]
    },
    {
      "name": "getId",
      "ast": {
        "name": "getId",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Object"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "getLabel",
      "ast": {
        "name": "getLabel",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "getSubLabel",
      "ast": {
        "name": "getSubLabel",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          },
          {
            "type": "Lang.Dictionary",
            "keyType": [
              {
                "type": "Lang.Symbol"
              }
            ],
            "valueType": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "label",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          },
          {
            "name": "subLabel",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "identifier",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":alignment",
                    "types": [
                      {
                        "type": "MenuItem.Alignment"
                      }
                    ]
                  },
                  {
                    "name": ":icon",
                    "types": [
                      {
                        "type": "Graphics.BitmapType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "label",
          "docstring": "The string label for the MenuItem"
        },
        {
          "name": "subLabel",
          "docstring": "The substring label for the MenuItem, which can be `null`"
        },
        {
          "name": "identifier",
          "docstring": "The identifier for this MenuItem, which is typically a [String](../../Toybox/Lang/String.html)"
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options. Can be `null`",
          "dictionary_keys": [
            {
              "name": ":alignment",
              "docstring": "One of the WatchUi.MenuItem.MENU_ITEM_LABEL_ALIGN* values that indicates the text alignment for the menu item."
            },
            {
              "name": ":icon",
              "docstring": "for the subscreen area when the menu item is in focus"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setIcon",
      "ast": {
        "name": "setIcon",
        "parameters": [
          {
            "name": "icon",
            "types": [
              {
                "type": "Graphics.BitmapType"
              },
              {
                "type": "WatchUi.Drawable"
              },
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "icon",
          "docstring": "The icon"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setLabel",
      "ast": {
        "name": "setLabel",
        "parameters": [
          {
            "name": "label",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "label",
          "docstring": "The text label for the MenuItem"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if label is an invalid type, or if a resource ID does not point to a valid string resource"
        }
      ],
      "returns": []
    },
    {
      "name": "setSubLabel",
      "ast": {
        "name": "setSubLabel",
        "parameters": [
          {
            "name": "subLabel",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "subLabel",
          "docstring": "The substring text label for the MenuItem, which can be `null`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if label is an invalid type, or if a resource ID does not point to a valid string resource"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.MenuInputDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/MenuInputDelegate.html",
  "docstring": "MenuInputDelegate responds to a Menu selection.  This class should be extended to handle selected Menu items.",
  "methods": [
    {
      "name": "onMenuItem",
      "ast": {
        "name": "onMenuItem",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The identifier of the chosen Menu item"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Menu2InputDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Menu2InputDelegate.html",
  "docstring": "Menu2InputDelegate responds to a Menu2 selection.  This class should be extended to handle selected Menu2 items.",
  "methods": [
    {
      "name": "onBack",
      "ast": {
        "name": "onBack",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onDone",
      "ast": {
        "name": "onDone",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onFooter",
      "ast": {
        "name": "onFooter",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onSelect",
      "ast": {
        "name": "onSelect",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "WatchUi.MenuItem"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The selected MenuItem."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTitle",
      "ast": {
        "name": "onTitle",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onWrap",
      "ast": {
        "name": "onWrap",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "WatchUi.Key"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key from the WatchUi.KEY_* enumeration that is triggering the menu wrap."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Menu2",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Menu2.html",
  "docstring": "A representation of an on-screen menu. A Menu2 is a special View, similar to a [Toybox::WatchUi::Menu](../../Toybox/WatchUi/Menu.html), that presents the user with a list of options. A Menu2 offers more capabilities than a [Toybox::WatchUi::Menu](../../Toybox/WatchUi/Menu.html), like graphical titles, menu items that can be updated dynamically, and additional menu elements such as check boxes.  After an option is selected, the registered [onSelect()](../../Toybox/WatchUi/Menu2InputDelegate.html#onSelect- instance_function) method will be called. While a Menu2 can be generated programmatically, they should generally be created as a resource.  A Menu2 is pushed using [pushView()](../../Toybox/WatchUi.html#pushView- instance_function), which provides a [Menu2InputDelegate](../../Toybox/WatchUi/Menu2InputDelegate.html) as the input delegate.",
  "methods": [
    {
      "name": "addItem",
      "ast": {
        "name": "addItem",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "WatchUi.MenuItem"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The MenuItem to add to the Menu2    * May not be a [CheckboxMenuItem](../../Toybox/WatchUi/CheckboxMenuItem.html)",
          "dictionary_keys": [
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "WatchUi.InvalidMenuItemTypeException"
          ],
          "docstring": "Thrown if item is a [CheckboxMenuItem](../../Toybox/WatchUi/CheckboxMenuItem.html)"
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if item is not a valid type"
        }
      ],
      "returns": []
    },
    {
      "name": "deleteItem",
      "ast": {
        "name": "deleteItem",
        "parameters": [
          {
            "name": "index",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "index",
          "docstring": "The index of the [MenuItem](../../Toybox/WatchUi/MenuItem.html) that should be deleted from the Menu2."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "findItemById",
      "ast": {
        "name": "findItemById",
        "parameters": [
          {
            "name": "identifier",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "identifier",
          "docstring": "The identifier for which to search"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getIcon",
      "ast": {
        "name": "getIcon",
        "parameters": [],
        "returns": [
          {
            "type": "Graphics.BitmapType"
          },
          {
            "type": "WatchUi.Drawable"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Graphics.BitmapType",
        "Lang.Symbol",
        "WatchUi.Drawable"
      ]
    },
    {
      "name": "getItem",
      "ast": {
        "name": "getItem",
        "parameters": [
          {
            "name": "index",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "WatchUi.MenuItem"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "index",
          "docstring": "The index of the [MenuItem](../../Toybox/WatchUi/MenuItem.html) to get"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "WatchUi.MenuItem"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":title",
                    "types": [
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "Lang.Symbol"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":focus",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":icon",
                    "types": [
                      {
                        "type": "Graphics.BitmapType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":theme",
                    "types": [
                      {
                        "type": "WatchUi.MenuTheme"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options    * Can be `null`",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "name": ":title",
              "docstring": "The menu title"
            },
            {
              "name": ":focus",
              "docstring": "The index of the [MenuItem](../../Toybox/WatchUi/MenuItem.html) that should have initial focus"
            },
            {
              "name": ":icon",
              "docstring": "the default icon for the menu items"
            },
            {
              "name": ":theme",
              "docstring": "The menu theme, or `null` for no theme. Defaults to MENU_THEME_DEFAULT."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setFocus",
      "ast": {
        "name": "setFocus",
        "parameters": [
          {
            "name": "focus",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "focus",
          "docstring": "The index of the [MenuItem](../../Toybox/WatchUi/MenuItem.html) that should have focus"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if focus is not a valid type"
        }
      ],
      "returns": []
    },
    {
      "name": "setIcon",
      "ast": {
        "name": "setIcon",
        "parameters": [
          {
            "name": "icon",
            "types": [
              {
                "type": "Graphics.BitmapType"
              },
              {
                "type": "WatchUi.Drawable"
              },
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "icon",
          "docstring": "The icon"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setTheme",
      "ast": {
        "name": "setTheme",
        "parameters": [
          {
            "name": "theme",
            "types": [
              {
                "type": "WatchUi.MenuTheme"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "theme",
          "docstring": "The theme for this menu."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setTitle",
      "ast": {
        "name": "setTitle",
        "parameters": [
          {
            "name": "title",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "WatchUi.Drawable"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "title",
          "docstring": "The menu title text, `null`, the resource identifier of a string resource, or a Drawable"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if title is not a valid type"
        }
      ],
      "returns": []
    },
    {
      "name": "updateItem",
      "ast": {
        "name": "updateItem",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "WatchUi.MenuItem"
              }
            ]
          },
          {
            "name": "index",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The MenuItem to update"
        },
        {
          "name": "index",
          "docstring": "The index of the MenuItem to update"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Menu",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Menu.html",
  "docstring": "A representation of an on-screen menu.  A Menu is a special View that presents the user with a list of options. After an option is selected, the registered [onMenuItem()](../../Toybox/WatchUi/MenuInputDelegate.html#onMenuItem- instance_function) method will be called. While a Menu can be generated programmatically, they should generally be created as a resource.  A Menu is pushed using [pushView()](../../Toybox/WatchUi.html#pushView- instance_function), which provides a [MenuInputDelegate](../../Toybox/WatchUi/MenuInputDelegate.html) as the input delegate.",
  "methods": [
    {
      "name": "addItem",
      "ast": {
        "name": "addItem",
        "parameters": [
          {
            "name": "name",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          },
          {
            "name": "identifier",
            "types": [
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "name",
          "docstring": "The item text or the resource identifier of a string resource"
        },
        {
          "name": "identifier",
          "docstring": "A Symbol representing the Menu item value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setTitle",
      "ast": {
        "name": "setTitle",
        "parameters": [
          {
            "name": "title",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "title",
          "docstring": "The title text or the resource identifier of a string resource"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.MapView",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/MapView.html",
  "docstring": "A [View](../../Toybox/WatchUi/View.html) for rendering a map on the screen.  The map is rendered statically and focused on the bounding box and/or a MapMarker point or MapPolyline drawn on the map. The map can be rendered in [MAP_MODE_BROWSE](../../Toybox/WatchUi.html) or [MAP_MODE_PREVIEW](../../Toybox/WatchUi.html) mode.",
  "methods": [
    {
      "name": "clear",
      "ast": {
        "name": "clear",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getMapMode",
      "ast": {
        "name": "getMapMode",
        "parameters": [],
        "returns": [
          {
            "type": "WatchUi.MapMode"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setMapMarker",
      "ast": {
        "name": "setMapMarker",
        "parameters": [
          {
            "name": "markers",
            "types": [
              {
                "type": "WatchUi.MapMarker"
              },
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "WatchUi.MapMarker"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "markers",
          "docstring": "A MapMarker object or an Array of Marker objects to be rendered on the map"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if the `markers` param is not a valid MapMarker object or an Array of MapMarker objects"
        }
      ],
      "returns": []
    },
    {
      "name": "setMapMode",
      "ast": {
        "name": "setMapMode",
        "parameters": [
          {
            "name": "mode",
            "types": [
              {
                "type": "WatchUi.MapMode"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "mode",
          "docstring": "The mode in which the map will be rendered on the screen as a [MAP_MODE_*](../../Toybox/WatchUi.html) enum value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setMapVisibleArea",
      "ast": {
        "name": "setMapVisibleArea",
        "parameters": [
          {
            "name": "topLeft",
            "types": [
              {
                "type": "Position.Location"
              }
            ]
          },
          {
            "name": "bottomRight",
            "types": [
              {
                "type": "Position.Location"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "topLeft",
          "docstring": "The top left point of the visible area of the map"
        },
        {
          "name": "bottomRight",
          "docstring": "The bottom right point of the visible area of the map"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if `topLeft` or `bottomRight` are not a Location objects"
        }
      ],
      "returns": []
    },
    {
      "name": "setPolyline",
      "ast": {
        "name": "setPolyline",
        "parameters": [
          {
            "name": "polyline",
            "types": [
              {
                "type": "WatchUi.MapPolyline"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "polyline",
          "docstring": "The polyline to be rendered on the map"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if `polyline` is is not a valid MapPolyline object"
        }
      ],
      "returns": []
    },
    {
      "name": "setScreenVisibleArea",
      "ast": {
        "name": "setScreenVisibleArea",
        "parameters": [
          {
            "name": "topLeftX",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "topLeftY",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "bottomRightX",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "bottomRightY",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "topLeftX",
          "docstring": "The `x` location of the top-left visible pixel on the screen"
        },
        {
          "name": "topLeftY",
          "docstring": "The `y` location of the top-left visible pixel on the screen"
        },
        {
          "name": "bottomRightX",
          "docstring": "The `x` location of the bottom-right visible pixel on the screen"
        },
        {
          "name": "bottomRightY",
          "docstring": "The `y` location of the bottom-right visible pixel on the screen"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "WatchUi.InvalidPointException"
          ],
          "docstring": "Thrown if `topLeftX`, `topLeftY`, `bottomRightX`, or `bottomRightY` are outside the bounds of the device screen"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.MapTrackView",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/MapTrackView.html",
  "docstring": "A View for rendering a map on the screen while tracking the current location of the device.  This is a dynamic view where the map is centered on the current location of the device. This map will display the default navigation icons for the device (i.e. the navigation arrow).",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.MapPolyline",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/MapPolyline.html",
  "docstring": "An object representing a polyline (polygonal chain) on the map.  This object holds an [Array](../../Toybox/Lang/Array.html) of [Location](../../Toybox/Position/Location.html) objects to draw a polyline on the map.",
  "methods": [
    {
      "name": "addLocation",
      "ast": {
        "name": "addLocation",
        "parameters": [
          {
            "name": "location",
            "types": [
              {
                "type": "Position.Location"
              },
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Position.Location"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "location",
          "docstring": "A Location object or an Array of Location objects"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "clear",
      "ast": {
        "name": "clear",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getLocation",
      "ast": {
        "name": "getLocation",
        "parameters": [
          {
            "name": "index"
          }
        ],
        "returns": [
          {
            "type": "Position.Location"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "index",
          "docstring": "The index of the requested Location"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Position.Location"
      ]
    },
    {
      "name": "numLocations",
      "ast": {
        "name": "numLocations",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "setColor",
      "ast": {
        "name": "setColor",
        "parameters": [
          {
            "name": "color",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "color",
          "docstring": "The color to draw the line on the map as a [Graphics.COLOR_*](../../Toybox/Graphics.html) enum value."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setWidth",
      "ast": {
        "name": "setWidth",
        "parameters": [
          {
            "name": "width",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "width",
          "docstring": "The width of the line in pixels (px)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.MapMarker",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/MapMarker.html",
  "docstring": "The base class for the MapMarker object.  The MapMarker is used to hold a [BitmapResource](../../Toybox/WatchUi/BitmapResource.html), or a [MAP_MARKER_ICON_*](../../Toybox/WatchUi.html) enum value, and the corresponding `x, y` value to note the \"hotspot\" for the image to be used as an icon for a marker within a [MapView](../../Toybox/WatchUi/MapView.html). This class also contains the [Location](../../Toybox/Position/Location.html) at which the MapMarker should be displayed on the map.",
  "methods": [
    {
      "name": "getLocation",
      "ast": {
        "name": "getLocation",
        "parameters": [],
        "returns": [
          {
            "type": "Position.Location"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Position.Location"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "location",
            "types": [
              {
                "type": "Position.Location"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "location",
          "docstring": "The Location at which the MapMarker object will be rendered on the map"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if location is not a [Location](../../Toybox/Position/Location.html) type"
        }
      ],
      "returns": []
    },
    {
      "name": "setIcon",
      "ast": {
        "name": "setIcon",
        "parameters": [
          {
            "name": "icon",
            "types": [
              {
                "type": "Graphics.BitmapType"
              },
              {
                "type": "WatchUi.MapMarkerIcon"
              },
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "icon",
          "docstring": "A BitmapResource or [MAP_MARKER_ICON_*](../../Toybox/WatchUi.html) type"
        },
        {
          "name": "x",
          "docstring": "The `x` location of the hotspot on the [BitmapResource](../../Toybox/WatchUi/BitmapResource.html) in pixels (px). Used to align the hotspot with the longitude of the MapMarker. This value is required, but will be disregarded when used with [MAP_MARKER_ICON_*](../../Toybox/WatchUi.html) type."
        },
        {
          "name": "y",
          "docstring": "The `y` location of the hotspot on the [BitmapResource](../../Toybox/WatchUi/BitmapResource.html) in pixels (px). Used to align the hotspot with the latitude value of the MapMarker. This value is required, but will be disregarded when used with [MAP_MARKER_ICON_*](../../Toybox/WatchUi.html) type."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "WatchUi.InvalidPointException"
          ],
          "docstring": "Thrown if the `x, y` values for the hotspot fall outside the bounds of the icon image"
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if icon is not a supported type"
        }
      ],
      "returns": []
    },
    {
      "name": "setLabel",
      "ast": {
        "name": "setLabel",
        "parameters": [
          {
            "name": "label",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "label",
          "docstring": "The label for the marker object as a String or String Resource"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Layer",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Layer.html",
  "docstring": "A representation of View Layer that will be drawn (bitblit) by system onto the screen during screen update, which include regular View update (onUpdate/onPartialUpdate) as well as animation playback if supported.",
  "methods": [
    {
      "name": "getDc",
      "ast": {
        "name": "getDc",
        "parameters": [],
        "returns": [
          {
            "type": "Graphics.Dc"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getId",
      "ast": {
        "name": "getId",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Object"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number",
        "Lang.Object"
      ]
    },
    {
      "name": "getX",
      "ast": {
        "name": "getX",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Numeric"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getY",
      "ast": {
        "name": "getY",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Numeric"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":locX",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":locY",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":width",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":height",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":colorDepth",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":visibility",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  },
                  {
                    "name": ":identifier",
                    "types": [
                      {
                        "type": "Lang.Object"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options; can be `null`, which defaults to full screen layer",
          "dictionary_keys": [
            {
              "name": ":locX",
              "docstring": "The x coordinate of the top left corner of the layer (optional defaults to 0)"
            },
            {
              "name": ":locY",
              "docstring": "The y coordinate of the top left corner of the layer (optional defaults to 0)"
            },
            {
              "name": ":width",
              "docstring": "The width of the layers in pixels,"
            },
            {
              "name": ":height",
              "docstring": "The height of the layers in pixels,"
            },
            {
              "name": ":colorDepth",
              "docstring": "hidden option, Color depth in terms of bits/pixel, when missing, default to system value."
            },
            {
              "name": ":visibility",
              "docstring": "`true` if the layer is visible, otherwise `false` (optional, default to +true+)"
            },
            {
              "name": ":identifier",
              "docstring": "unique object for identification (optional)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "isVisible",
      "ast": {
        "name": "isVisible",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "setLocation",
      "ast": {
        "name": "setLocation",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "new x offset from screen origin"
        },
        {
          "name": "y",
          "docstring": "new y offset from screen origin"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setVisible",
      "ast": {
        "name": "setVisible",
        "parameters": [
          {
            "name": "visible",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "visible",
          "docstring": "`true` for visible (or to show), `false` for invisible (or to hide)."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setX",
      "ast": {
        "name": "setX",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "new x offset from screen origin"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setY",
      "ast": {
        "name": "setY",
        "parameters": [
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "y",
          "docstring": "new y offset from screen origin"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.KeyEvent",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/KeyEvent.html",
  "docstring": "KeyEvent is an object sent to an [InputDelegate](../../Toybox/WatchUi/InputDelegate.html) when a physical button on the device is pressed.",
  "methods": [
    {
      "name": "getKey",
      "ast": {
        "name": "getKey",
        "parameters": [],
        "returns": [
          {
            "type": "WatchUi.Key"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getType",
      "ast": {
        "name": "getType",
        "parameters": [],
        "returns": [
          {
            "type": "WatchUi.KeyPressType"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.InvalidSelectableStateException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/InvalidSelectableStateException.html",
  "docstring": "Indicates the instance of [Selectable](../../Toybox/WatchUi/Selectable.html) is assigned a state that it doesn't contain.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.InvalidPointException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/InvalidPointException.html",
  "docstring": "Indicates that an invalid point was set.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.InvalidMenuItemTypeException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/InvalidMenuItemTypeException.html",
  "docstring": "This exception indicates an invalid menu item type was passed to [addItem()](../../Toybox/WatchUi/Menu2.html#addItem-instance_function) for a menu.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.InputDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/InputDelegate.html",
  "docstring": "InputDelegate handles basic input events.  Note that on wearable products, input events are not supported for data fields.  There are four types of basic inputs InputDelegate can handle:    * Key, represented by [KeyEvent](../../Toybox/WatchUi/KeyEvent.html)    * Touch, represented by [ClickEvent](../../Toybox/WatchUi/ClickEvent.html)    * Swipe, represented by [SwipeEvent](../../Toybox/WatchUi/SwipeEvent.html)    * Selectable, represented by [SelectableEvent](../../Toybox/WatchUi/SelectableEvent.html)  This class is the base class for [BehaviorDelegate](../../Toybox/WatchUi/BehaviorDelegate.html), which goes beyond simple key and screen-based input.",
  "methods": [
    {
      "name": "onDrag",
      "ast": {
        "name": "onDrag",
        "parameters": [
          {
            "name": "dragEvent",
            "types": [
              {
                "type": "WatchUi.DragEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "dragEvent",
          "docstring": "The drag event that has occurred"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onFlick",
      "ast": {
        "name": "onFlick",
        "parameters": [
          {
            "name": "flickEvent",
            "types": [
              {
                "type": "WatchUi.FlickEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "flickEvent",
          "docstring": "The flick event that has occurred"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onHold",
      "ast": {
        "name": "onHold",
        "parameters": [
          {
            "name": "clickEvent",
            "types": [
              {
                "type": "WatchUi.ClickEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "clickEvent",
          "docstring": "The click event that has occurred"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onKey",
      "ast": {
        "name": "onKey",
        "parameters": [
          {
            "name": "keyEvent",
            "types": [
              {
                "type": "WatchUi.KeyEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "keyEvent",
          "docstring": "The key event that occurred"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onKeyPressed",
      "ast": {
        "name": "onKeyPressed",
        "parameters": [
          {
            "name": "keyEvent",
            "types": [
              {
                "type": "WatchUi.KeyEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "keyEvent",
          "docstring": "The key event that occurred."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onKeyReleased",
      "ast": {
        "name": "onKeyReleased",
        "parameters": [
          {
            "name": "keyEvent",
            "types": [
              {
                "type": "WatchUi.KeyEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "keyEvent",
          "docstring": "The key event that occurred"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onRelease",
      "ast": {
        "name": "onRelease",
        "parameters": [
          {
            "name": "clickEvent",
            "types": [
              {
                "type": "WatchUi.ClickEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "clickEvent",
          "docstring": "The click event that has occurred"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onSelectable",
      "ast": {
        "name": "onSelectable",
        "parameters": [
          {
            "name": "selectableEvent",
            "types": [
              {
                "type": "WatchUi.SelectableEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "selectableEvent",
          "docstring": "The selectable event containing the information about the Selectable whose state has changed"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onSwipe",
      "ast": {
        "name": "onSwipe",
        "parameters": [
          {
            "name": "swipeEvent",
            "types": [
              {
                "type": "WatchUi.SwipeEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "swipeEvent",
          "docstring": "The swipe event that has occurred"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onTap",
      "ast": {
        "name": "onTap",
        "parameters": [
          {
            "name": "clickEvent",
            "types": [
              {
                "type": "WatchUi.ClickEvent"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "clickEvent",
          "docstring": "The click event that occurred"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.IconMenuItem",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/IconMenuItem.html",
  "docstring": "A representation of an icon item in a Menu2.  An IconMenuItem is a element of a [Menu2](../../Toybox/WatchUi/Menu2.html) View that represents one of the options in the menu. An IconMenuItem has an icon displayed on the left or right of the menu item labels.  An IconMenuItem can be added to a Menu2 using the [addItem()](../../Toybox/WatchUi/Menu2.html#addItem-instance_function) method.",
  "methods": [
    {
      "name": "getIcon",
      "ast": {
        "name": "getIcon",
        "parameters": [],
        "returns": [
          {
            "type": "Graphics.BitmapType"
          },
          {
            "type": "WatchUi.Drawable"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Graphics.BitmapType",
        "WatchUi.Drawable"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "label",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          },
          {
            "name": "subLabel",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "identifier"
          },
          {
            "name": "icon",
            "types": [
              {
                "type": "Graphics.BitmapType"
              },
              {
                "type": "WatchUi.Drawable"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":alignment",
                    "types": [
                      {
                        "type": "MenuItem.Alignment"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "label",
          "docstring": "The string label for the IconMenuItem"
        },
        {
          "name": "subLabel",
          "docstring": "The substring label for the IconMenuItem, which can be `null`"
        },
        {
          "name": "identifier",
          "docstring": "The identifier for this IconMenuItem, which is typically a [String](../../Toybox/Lang/String.html)"
        },
        {
          "name": "icon",
          "docstring": "The Drawable used to render the icon for this item or the [Graphics::BitmapReference](../../Toybox/Graphics/BitmapReference.html) object."
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":alignment",
              "docstring": "A WatchUi.MenuItem.MENU_ITEM_LABEL_ALIGN_* constant representing the label alignment, which defaults to MENU_ITEM_LABEL_ALIGN_LEFT"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setIcon",
      "ast": {
        "name": "setIcon",
        "parameters": [
          {
            "name": "icon",
            "types": [
              {
                "type": "Graphics.BitmapType"
              },
              {
                "type": "WatchUi.Drawable"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "icon",
          "docstring": "The Drawable or resource identifier used to render the icon for this item"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if icon is not a valid type"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.GlanceViewDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/GlanceViewDelegate.html",
  "docstring": "The class that represents a glance view delegate, which can be used to relay events happened during widget glance (preview) mode.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onGlanceEvent",
      "ast": {
        "name": "onGlanceEvent",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.GlanceView",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/GlanceView.html",
  "docstring": "The class that represents a glance view which can be used to display the widget preview content in a restricted drawing context (dc) among other widgets.  Glance view behaves mostly like a regular WatchUi.View, e.g. user can load layout and update view using [View.onLayout()](../../Toybox/WatchUi/View.html#onLayout-instance_function) and [View.onUpdate()](../../Toybox/WatchUi/View.html#onUpdate- instance_function), however, the `dc` object passed in those calls will be bounded by glance area rather than a full screen `dc`.  GlanceView doesn't support [WatchUi.Layer](../../Toybox/WatchUi/Layer.html) or other View APIs that are associated with layering system, such as [View.addLayer()](../../Toybox/WatchUi/View.html#addLayer-instance_function) [View.removeLayer()](../../Toybox/WatchUi/View.html#removeLayer- instance_function), [View.insertLayer()](../../Toybox/WatchUi/View.html#insertLayer- instance_function), [View.clearLayers()](../../Toybox/WatchUi/View.html#clearLayers- instance_function)  The widget that's running in the glance mode are prohibited from using page control functionality, as there is only one view allowed during said mode.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.FontResource",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/FontResource.html",
  "docstring": "A representation of a font resource.  FontResource objects are returned by the [loadResource()](../../Toybox/WatchUi.html#loadResource-instance_function) method."
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.FlickEvent",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/FlickEvent.html",
  "docstring": "FlickEvent is an object sent to [InputDelegate](../../Toybox/WatchUi/InputDelegate.html) when there is a flick interaction with the device's touch screen.",
  "methods": [
    {
      "name": "getCoordinates",
      "ast": {
        "name": "getCoordinates",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getDirection",
      "ast": {
        "name": "getDirection",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getDistance",
      "ast": {
        "name": "getDistance",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getVelocity",
      "ast": {
        "name": "getVelocity",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Float"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Float"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Drawable",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Drawable.html",
  "docstring": "Drawable is the base class of a drawable object.  A Drawable can be constructed using the resource compiler and loaded through the resource (Rez) module.",
  "attributes": [
    {
      "name": "height",
      "docstring": "The clip height of the Drawable object.",
      "type": "Lang.Numeric",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "identifier",
      "docstring": "The ID used to identify the Drawable object.",
      "type": null,
      "nullable": false,
      "returns": "Lang.String"
    },
    {
      "name": "isVisible",
      "docstring": "The visibility of the Drawable object.",
      "type": "Lang.Boolean",
      "nullable": false,
      "returns": "Lang.Boolean"
    },
    {
      "name": "locX",
      "docstring": "The absolute, on-screen x-coordinate of the Drawable object.",
      "type": "Lang.Numeric",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "locY",
      "docstring": "The absolute, on-screen y-coordinate of the Drawable object.",
      "type": "Lang.Numeric",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "width",
      "docstring": "The clip width of the Drawable object.",
      "type": "Lang.Numeric",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ],
  "methods": [
    {
      "name": "draw",
      "ast": {
        "name": "draw",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The device context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "settings",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":identifier",
                    "types": [
                      {
                        "type": "Lang.Object"
                      }
                    ]
                  },
                  {
                    "name": ":locX",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":locY",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":width",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":height",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":visible",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "settings",
          "docstring": "A Dictionary containing settings for the Drawable object",
          "dictionary_keys": [
            {
              "name": ":identifier",
              "docstring": "The identifier for the Drawable object"
            },
            {
              "name": ":locX",
              "docstring": "The absolute, on-screen x-coordinate for the Drawable object"
            },
            {
              "name": ":locY",
              "docstring": "The absolute, on-screen y-coordinate for the Drawable object"
            },
            {
              "name": ":width",
              "docstring": "The clip width of the Drawable object"
            },
            {
              "name": ":height",
              "docstring": "The clip height of the Drawable object"
            },
            {
              "name": ":visible",
              "docstring": "The visibility of the Drawable object"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setLocation",
      "ast": {
        "name": "setLocation",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The horizontal position on the screen"
        },
        {
          "name": "y",
          "docstring": "The vertical position on the screen"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setSize",
      "ast": {
        "name": "setSize",
        "parameters": [
          {
            "name": "w",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "h",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "w",
          "docstring": "The width of the Drawable object"
        },
        {
          "name": "h",
          "docstring": "The height of the Drawable object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setVisible",
      "ast": {
        "name": "setVisible",
        "parameters": [
          {
            "name": "visible",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "visible",
          "docstring": "The visibility of the Drawable object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.DragEvent",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/DragEvent.html",
  "docstring": "DragEvent is an object sent to [InputDelegate](../../Toybox/WatchUi/InputDelegate.html) when there is a drag interaction with a device's touch screen.",
  "methods": [
    {
      "name": "getCoordinates",
      "ast": {
        "name": "getCoordinates",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getType",
      "ast": {
        "name": "getType",
        "parameters": [],
        "returns": [
          {
            "type": "WatchUi.DragType"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.DataFieldAlert",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/DataFieldAlert.html",
  "docstring": "Alert View for DataFields  Use this view for pushing alerts from a DataField",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.DataField",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/DataField.html",
  "docstring": "Create a Data Field.  A DataField is a special View that automatically provides [Activity.Info](../../Toybox/Activity/Info.html) once per second via the [compute()](../../Toybox/WatchUi/DataField.html#compute-instance_function) method. A DataField requires the implementation of the [compute()](../../Toybox/WatchUi/DataField.html#compute-instance_function) method to handle the incoming Activity info, and otherwise provides a significant amount of flexibility regarding the way the information is displayed. If less complexity is required, consider a [SimpleDataField](../../Toybox/WatchUi/SimpleDataField.html).",
  "methods": [
    {
      "name": "compute",
      "ast": {
        "name": "compute",
        "parameters": [
          {
            "name": "info",
            "types": [
              {
                "type": "Activity.Info"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "info",
          "docstring": "The updated Activity.Info object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "createField",
      "ast": {
        "name": "createField",
        "parameters": [
          {
            "name": "name",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "fieldId",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "type",
            "types": [
              {
                "type": "FitContributor.DataType"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":count",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":mesgType",
                    "types": [
                      {
                        "type": "FitContributor.MessageType"
                      }
                    ]
                  },
                  {
                    "name": ":units",
                    "types": [
                      {
                        "type": "Lang.String"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "FitContributor.Field"
          }
        ]
      },
      "parameters": [
        {
          "name": "name",
          "docstring": "The name of the Field"
        },
        {
          "name": "fieldId",
          "docstring": "The unique Field identifier of the Field"
        },
        {
          "name": "type",
          "docstring": "A FitContributor.DATA_TYPE_* value representing the type definition of the Field"
        },
        {
          "name": "options",
          "docstring": "Optional parameters for field creation",
          "dictionary_keys": [
            {
              "name": ":count",
              "docstring": "The number of elements to add to the field if it is an Array. This is also the maximum combined size of the Strings plus their `null` terminators if the Field type is FitContributor.DATA_TYPE_STRING (Default 1)."
            },
            {
              "name": ":mesgType",
              "docstring": "Optional. A FitContributor.MESG_TYPE_* value representing the Field message type. This defaults to FitContributor.MESG_TYPE_RECORD if not specified. Additionally, if FitContributor.MESG_TYPE_RECORD is used, the field type cannot be FitContributor.DATA_TYPE_STRING."
            },
            {
              "name": ":units",
              "docstring": "Optional. A String representing the display units (e.g. \"mph\", \"ft\", \"Pa\")"
            },
            {
              "name": ":nativeNum",
              "docstring": "Optional. A FIT Profile field number when this Field is meant as an equivalent to a native field included in the FIT SDK"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "FitContributor.Field"
      ]
    },
    {
      "name": "getBackgroundColor",
      "ast": {
        "name": "getBackgroundColor",
        "parameters": [],
        "returns": [
          {
            "type": "Graphics.ColorType"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getObscurityFlags",
      "ast": {
        "name": "getObscurityFlags",
        "parameters": [],
        "returns": [
          {
            "type": "DataField.Obscurity"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onNextMultisportLeg",
      "ast": {
        "name": "onNextMultisportLeg",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTimerLap",
      "ast": {
        "name": "onTimerLap",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTimerPause",
      "ast": {
        "name": "onTimerPause",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTimerReset",
      "ast": {
        "name": "onTimerReset",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTimerResume",
      "ast": {
        "name": "onTimerResume",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTimerStart",
      "ast": {
        "name": "onTimerStart",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTimerStop",
      "ast": {
        "name": "onTimerStop",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onWorkoutStarted",
      "ast": {
        "name": "onWorkoutStarted",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onWorkoutStepComplete",
      "ast": {
        "name": "onWorkoutStepComplete",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "showAlert",
      "ast": {
        "name": "showAlert",
        "parameters": [
          {
            "name": "alertView",
            "types": [
              {
                "type": "WatchUi.DataFieldAlert"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "alertView",
          "docstring": "View to push    * Only [Toybox::WatchUi::DataFieldAlert](../../Toybox/WatchUi/DataFieldAlert.html) is supported for this operation",
          "dictionary_keys": [
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown if called from an app type other than data field"
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if the view type is not [DataFieldAlert](../../Toybox/WatchUi/DataFieldAlert.html)"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.CustomMenuItem",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/CustomMenuItem.html",
  "docstring": "A representation of a custom item in a CustomMenu.  A CustomMenuItem is a element of a [CustomMenu](../../Toybox/WatchUi/CustomMenu.html) View that represents one of the items in the menu. When selected, the onSelect() delegate callback will be invoked. The selected state of the item may change when it is being selected. This state can be evaluated using the isSelected() method and can be used to control the look of a selected item.  A CustomMenuItem can be added to a CustomMenu using the [addItem()](../../Toybox/WatchUi/CustomMenu.html#addItem-instance_function) method.",
  "methods": [
    {
      "name": "draw",
      "ast": {
        "name": "draw",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The item's drawing context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "identifier"
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":alignment",
                    "types": [
                      {
                        "type": "MenuItem.Alignment"
                      }
                    ]
                  },
                  {
                    "name": ":drawable",
                    "types": [
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":icon",
                    "types": [
                      {
                        "type": "Graphics.BitmapType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "identifier",
          "docstring": "The identifier for this item which is typically a [String](../../Toybox/Lang/String.html)"
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":drawable",
              "docstring": "A Drawable that draws the item. (required)"
            },
            {
              "name": ":icon",
              "docstring": "for the subscreen area when the menu item is in focus"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if the `:drawable` option is not a [Drawable](../../Toybox/WatchUi/Drawable.html) or is `null`."
        }
      ],
      "returns": []
    },
    {
      "name": "isFocused",
      "ast": {
        "name": "isFocused",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "isSelected",
      "ast": {
        "name": "isSelected",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "setDrawable",
      "ast": {
        "name": "setDrawable",
        "parameters": [
          {
            "name": "drawable",
            "types": [
              {
                "type": "WatchUi.Drawable"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "drawable",
          "docstring": "A Drawable to render on top of the menu items, or `null`."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if `drawable` is not a [Drawable](../../Toybox/WatchUi/Drawable.html) or is `null`."
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.CustomMenu",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/CustomMenu.html",
  "docstring": "A representation of a custom menu.  A CustomMenu is a specialized [Menu2](../../Toybox/WatchUi/Menu2.html) View that presents the user with a list of custom rendered options. After an option is selected, the registered [onSelect()](../../Toybox/WatchUi/Menu2InputDelegate.html#onSelect- instance_function) method will be called.  A CustomMenu is pushed using [pushView()](../../Toybox/WatchUi.html#pushView- instance_function), which provides a [Menu2InputDelegate](../../Toybox/WatchUi/Menu2InputDelegate.html) as the input delegate.",
  "methods": [
    {
      "name": "addItem",
      "ast": {
        "name": "addItem",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "WatchUi.CustomMenuItem"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The CustomMenuItem to add to the CustomMenu. Other MenuItem variants cannot be added to a Custom Menu."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if item is not a [MenuItem](../../Toybox/WatchUi/MenuItem.html)."
        },
        {
          "types": [
            "WatchUi.InvalidMenuItemTypeException"
          ],
          "docstring": "Thrown if item is not a [CustomMenuItem](../../Toybox/WatchUi/CustomMenuItem.html)."
        }
      ],
      "returns": []
    },
    {
      "name": "drawFooter",
      "ast": {
        "name": "drawFooter",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The menu's drawing context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawForeground",
      "ast": {
        "name": "drawForeground",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The menu's drawing context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawTitle",
      "ast": {
        "name": "drawTitle",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The menu's drawing context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "itemHeight",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "backgroundColor",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":focus",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":focusItemHeight",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":title",
                    "types": [
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":footer",
                    "types": [
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":foreground",
                    "types": [
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":icon",
                    "types": [
                      {
                        "type": "Graphics.BitmapType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":titleItemHeight",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":footerItemHeight",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":theme",
                    "types": [
                      {
                        "type": "WatchUi.MenuTheme"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "itemHeight",
          "docstring": "The pixel height of menu items rendered by this menu."
        },
        {
          "name": "backgroundColor",
          "docstring": "The color that will be used to fill the background of the menu."
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options. Can be `null`",
          "dictionary_keys": [
            {
              "name": ":focus",
              "docstring": "The index of the [CheckboxMenuItem](../../Toybox/WatchUi/CheckboxMenuItem.html) that should have initial focus. (optional)"
            },
            {
              "name": ":focusItemHeight",
              "docstring": "The pixel height of the center menu item of this menu. This option is ignored on products with touch screens. (optional)"
            },
            {
              "name": ":title",
              "docstring": "A Drawable that will render the title area. (optional)"
            },
            {
              "name": ":footer",
              "docstring": "A Drawable that will render the area after the final item in the menu.(optional)"
            },
            {
              "name": ":foreground",
              "docstring": "A Drawable to render on top of menu items. (optional)"
            },
            {
              "name": ":titleItemHeight",
              "docstring": "The pixel height of the header menu item of this menu (optional)"
            },
            {
              "name": ":footerItemHeight",
              "docstring": "The pixel height of the footer menu item of this menu. (optional)"
            },
            {
              "name": ":icon",
              "docstring": "the default icon for the menu incase menuitem do not have it populated"
            },
            {
              "name": ":theme",
              "docstring": "The menu theme, or `null` for no theme. Defaults to MENU_THEME_DEFAULT."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if either `itemHeight` or `backgroundColor` are not of the expected type"
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if the `:focusItemHeight`, `:titleItemHeight`, `:footerItemHeight`, or `:focus` options are provided and are not Number objects"
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if the `:title`, `:footer`, or `:foreground` options are provided and are not Drawable objects."
        }
      ],
      "returns": []
    },
    {
      "name": "setBackgroundColor",
      "ast": {
        "name": "setBackgroundColor",
        "parameters": [
          {
            "name": "color",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "color",
          "docstring": "The color to fill the background of the menu with."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if color is not a [Number](../../Toybox/Lang/Number.html)."
        }
      ],
      "returns": []
    },
    {
      "name": "setFooter",
      "ast": {
        "name": "setFooter",
        "parameters": [
          {
            "name": "drawable",
            "types": [
              {
                "type": "WatchUi.Drawable"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "drawable",
          "docstring": "A drawable that will render the footer area or `null`."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if drawable is not a [Drawable](../../Toybox/WatchUi/Drawable.html) or `null`."
        }
      ],
      "returns": []
    },
    {
      "name": "setForeground",
      "ast": {
        "name": "setForeground",
        "parameters": [
          {
            "name": "drawable",
            "types": [
              {
                "type": "WatchUi.Drawable"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "drawable",
          "docstring": "A Drawable to render on top of the menu items or `null`."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if drawable is not a [Drawable](../../Toybox/WatchUi/Drawable.html) or `null`."
        }
      ],
      "returns": []
    },
    {
      "name": "setTitle",
      "ast": {
        "name": "setTitle",
        "parameters": [
          {
            "name": "drawable",
            "types": [
              {
                "type": "WatchUi.Drawable"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "drawable",
          "docstring": "A drawable that will render the title area or `null`."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if drawable is not a [Drawable](../../Toybox/WatchUi/Drawable.html) or `null`."
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ConfirmationDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ConfirmationDelegate.html",
  "docstring": "ConfirmationDelegate responds to a [Confirmation](../../Toybox/WatchUi/Confirmation.html) selection.",
  "methods": [
    {
      "name": "onResponse",
      "ast": {
        "name": "onResponse",
        "parameters": [
          {
            "name": "response",
            "types": [
              {
                "type": "WatchUi.Confirm"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "response",
          "docstring": "The WatchUi.CONFIRM_* value from this Confirmation"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Confirmation",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Confirmation.html",
  "docstring": "A representation of a confirmation dialog.  A Confirmation is a special View that presents the user with a yes/no question. After an option is selected, the registered [onResponse()](../../Toybox/WatchUi/ConfirmationDelegate.html#onResponse- instance_function) method will be called. A Confirmation is pushed using [pushView()](../../Toybox/WatchUi.html#pushView-instance_function), which provides a [ConfirmationDelegate](../../Toybox/WatchUi/ConfirmationDelegate.html) as the input delegate.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "message",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "message",
          "docstring": "The confirmation message to display in the confirmation dialog"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ClickEvent",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ClickEvent.html",
  "docstring": "ClickEvent is an object sent to [InputDelegate](../../Toybox/WatchUi/InputDelegate.html) there is tap interaction with a device's touch screen.",
  "methods": [
    {
      "name": "getCoordinates",
      "ast": {
        "name": "getCoordinates",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getType",
      "ast": {
        "name": "getType",
        "parameters": [],
        "returns": [
          {
            "type": "WatchUi.ClickType"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.CheckboxMenuItem",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/CheckboxMenuItem.html",
  "docstring": "A representation of a check box item in a CheckboxMenu.  A CheckboxMenuItem is a element of a [CheckboxMenu](../../Toybox/WatchUi/CheckboxMenu.html) View that represents one of the options in the menu, and can appear in one of two states: checked or unchecked. When selected, the state of the CheckboxMenuItem changes to the state opposite of the state prior to the onSelect delegate callback invocation.  A CheckboxMenuItem can be added to a CheckboxMenu using the [addItem()](../../Toybox/WatchUi/CheckboxMenu.html#addItem-instance_function) method.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "label",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          },
          {
            "name": "subLabel",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "identifier"
          },
          {
            "name": "checked",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":alignment",
                    "types": [
                      {
                        "type": "MenuItem.Alignment"
                      }
                    ]
                  },
                  {
                    "name": ":icon",
                    "types": [
                      {
                        "type": "Graphics.BitmapType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "label",
          "docstring": "The string label for the CheckboxMenuItem"
        },
        {
          "name": "subLabel",
          "docstring": "The substring label for the CheckboxMenuItem, which can be `null`"
        },
        {
          "name": "identifier",
          "docstring": "The identifier for this CheckboxMenuItem, which is typically a [String](../../Toybox/Lang/String.html)"
        },
        {
          "name": "checked",
          "docstring": "The initial state of the CheckboxMenuItem; checked if `true`, unchecked if `false`"
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":alignment",
              "docstring": "A WatchUi.MenuItem.MENU_ITEM_LABEL_ALIGN_* constant representing the label alignment, which defaults to the system default for check box menu items if not specified."
            },
            {
              "name": ":icon",
              "docstring": "for the subscreen area when the menu item is in focus"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "isChecked",
      "ast": {
        "name": "isChecked",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "setChecked",
      "ast": {
        "name": "setChecked",
        "parameters": [
          {
            "name": "checked",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "checked",
          "docstring": "The intended state of the CheckboxMenuItem; checked if `true`, unchecked if `false`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if checked is not a valid type"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.CheckboxMenu",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/CheckboxMenu.html",
  "docstring": "A representation of a check box menu.  A CheckboxMenu is a specialized [Menu2](../../Toybox/WatchUi/Menu2.html) View that presents the user with a list of check box options. After an option is selected, the registered [onSelect()](../../Toybox/WatchUi/Menu2InputDelegate.html#onSelect- instance_function) method will be called. While a CheckboxMenu can be generated programmatically, they should generally be created as a resource.  A CheckboxMenu is pushed using [pushView()](../../Toybox/WatchUi.html#pushView-instance_function), which provides a [Menu2InputDelegate](../../Toybox/WatchUi/Menu2InputDelegate.html) as the input delegate.",
  "methods": [
    {
      "name": "addItem",
      "ast": {
        "name": "addItem",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "WatchUi.CheckboxMenuItem"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The CheckboxMenuItem to add to the CheckboxMenu"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "WatchUi.InvalidMenuItemTypeException"
          ],
          "docstring": "Thrown if item is not a [Toybox::WatchUi::CheckboxMenuItem]"
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if item is not a valid type"
        }
      ],
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":title",
                    "types": [
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "Lang.Symbol"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":focus",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":icon",
                    "types": [
                      {
                        "type": "Graphics.BitmapType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":theme",
                    "types": [
                      {
                        "type": "WatchUi.MenuTheme"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options    * Can be `null`",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "name": ":title",
              "docstring": "The menu title"
            },
            {
              "name": ":focus",
              "docstring": "The index of the [CheckboxMenuItem](../../Toybox/WatchUi/CheckboxMenuItem.html) that should have initial focus"
            },
            {
              "name": ":icon",
              "docstring": "the default icon for menu items"
            },
            {
              "name": ":theme",
              "docstring": "The menu theme, or `null` for no theme. Defaults to MENU_THEME_DEFAULT."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.BitmapResource",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/BitmapResource.html",
  "docstring": "A representation of a bitmap resource.  BitmapResource objects are returned by the [loadResource()](../../Toybox/WatchUi.html#loadResource-instance_function) method.",
  "methods": [
    {
      "name": "getHeight",
      "ast": {
        "name": "getHeight",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getWidth",
      "ast": {
        "name": "getWidth",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Button",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Button.html",
  "docstring": "A representation of a Selectable button.  Button objects are mappable to a BehaviorDelegate method on selection.",
  "attributes": [
    {
      "name": "background",
      "docstring": "The Button background  A [Drawable](../../Toybox/WatchUi/Drawable.html), Graphics.COLOR_* value, or 24-bit integer of the form 0xRRGGBB to be drawn before the current Selectable state is drawn.",
      "type": "Graphics.ColorType",
      "nullable": false,
      "returns": "Lang.Object"
    },
    {
      "name": "behavior",
      "docstring": "A Symbol describing the behavior method executed when button is selected.  This Symbol must be a member of the active View object's registered BehaviorDelegate, such as :onBack, but may also be a Symbol from an extended class. If the value is `false` or `null`, then a [SelectableEvent](../../Toybox/WatchUi/SelectableEvent.html) will be issued.",
      "type": "Lang.Symbol",
      "nullable": false,
      "returns": "Lang.Symbol"
    }
  ],
  "methods": [
    {
      "name": "draw",
      "ast": {
        "name": "draw",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The device context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "settings",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":behavior",
                    "types": [
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":background",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":locX",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":locY",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":width",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":height",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":stateDefault",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":stateHighlighted",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":stateSelected",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":stateDisabled",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      },
                      {
                        "type": "WatchUi.Drawable"
                      }
                    ]
                  },
                  {
                    "name": ":identifier",
                    "types": [
                      {
                        "type": "Lang.Object"
                      }
                    ]
                  },
                  {
                    "name": ":visible",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "settings",
          "docstring": "A Dictionary containing settings for the Button object",
          "dictionary_keys": [
            {
              "name": ":behavior",
              "docstring": "A Symbol object to call when the Button is selected; set to `null` to use a [SelectableEvent](../../Toybox/WatchUi/SelectableEvent.html) (optional)"
            },
            {
              "name": ":background",
              "docstring": "A [Drawable](../../Toybox/WatchUi/Drawable.html), Graphics.COLOR_* constant, or 24-bit integer of the form 0xRRGGBB (optional)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.Bitmap",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/Bitmap.html",
  "docstring": "Bitmap is the class representation of a bitmap resource.  A Bitmap can be constructed using the resource compiler and loaded through the resource (Rez) module.",
  "methods": [
    {
      "name": "draw",
      "ast": {
        "name": "draw",
        "parameters": [
          {
            "name": "dc",
            "types": [
              {
                "type": "Graphics.Dc"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "dc",
          "docstring": "The device context"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getDimensions",
      "ast": {
        "name": "getDimensions",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "settings",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":rezId",
                    "types": [
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":bitmap",
                    "types": [
                      {
                        "type": "Graphics.BitmapType"
                      }
                    ]
                  },
                  {
                    "name": ":identifier",
                    "types": [
                      {
                        "type": "Lang.Object"
                      }
                    ]
                  },
                  {
                    "name": ":locX",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":locY",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":width",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":height",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":visible",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "settings",
          "docstring": "A Dictionary containing the settings for the Bitmap object",
          "dictionary_keys": [
            {
              "name": ":rezId",
              "docstring": "The resource identifier for the Bitmap object"
            },
            {
              "name": ":bitmap",
              "docstring": "The BitmapResource, BufferedBitmap, BitmapReference, or BufferedBitmapReference object to use"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setBitmap",
      "ast": {
        "name": "setBitmap",
        "parameters": [
          {
            "name": "identifier",
            "types": [
              {
                "type": "Graphics.BitmapType"
              },
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "identifier",
          "docstring": "The resource identifier or the Bitmap object"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.BehaviorDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/BehaviorDelegate.html",
  "docstring": "BehaviorDelegate handles behavior input events.  A BehaviorDelegate differs from an [InputDelegate](../../Toybox/WatchUi/InputDelegate.html) in that it acts upon device-independent behaviors, such as \"next page\" and \"previous page\" instead of device-specific button presses. For example, these behaviors might be mapped to swipe left and swipe right inputs on touch screen devices, while on non-touch screen devices these behaviors might be mapped to physical buttons.  Since BehaviorDelegate extends InputDelegate, so it can also act on basic inputs as well. If a BehaviorDelegate returns `true` for a function (indicating the input was used) then the InputDelegate function that corresponds to the behavior will not be called.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onBack",
      "ast": {
        "name": "onBack",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onMenu",
      "ast": {
        "name": "onMenu",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onNextMode",
      "ast": {
        "name": "onNextMode",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onNextPage",
      "ast": {
        "name": "onNextPage",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onPreviousMode",
      "ast": {
        "name": "onPreviousMode",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onPreviousPage",
      "ast": {
        "name": "onPreviousPage",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onSelect",
      "ast": {
        "name": "onSelect",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.AnimationResource",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/AnimationResource.html",
  "docstring": "A representation of an animation resource.  AnimationResource objects are returned by the [loadResource()](../../Toybox/WatchUi.html#loadResource-instance_function) method.",
  "methods": [
    {
      "name": "getColorDepth",
      "ast": {
        "name": "getColorDepth",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getFrameRate",
      "ast": {
        "name": "getFrameRate",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getHeight",
      "ast": {
        "name": "getHeight",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getNumberOfFrames",
      "ast": {
        "name": "getNumberOfFrames",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getWidth",
      "ast": {
        "name": "getWidth",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.AnimationLayer",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/AnimationLayer.html",
  "docstring": "The class that represents an Animation layer",
  "methods": [
    {
      "name": "getDc",
      "ast": {
        "name": "getDc",
        "parameters": [],
        "returns": [
          {
            "type": "Graphics.Dc"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getResource",
      "ast": {
        "name": "getResource",
        "parameters": [],
        "returns": [
          {
            "type": "WatchUi.AnimationResource"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "WatchUi.AnimationResource"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "rez",
            "types": [
              {
                "type": "Lang.Symbol"
              },
              {
                "type": "WatchUi.AnimationResource"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":locX",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":locY",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  },
                  {
                    "name": ":identifier",
                    "types": [
                      {
                        "type": "Lang.Object"
                      }
                    ]
                  },
                  {
                    "name": ":visibility",
                    "types": [
                      {
                        "type": "Lang.Boolean"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "rez",
          "docstring": "either an animation resource id or a [WatchUi.AnimationResource](../../Toybox/WatchUi/AnimationResource.html)"
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options, can be `null`",
          "dictionary_keys": [
            {
              "name": ":locX",
              "docstring": "The initial absolute, on-screen x-coordinate for the Animation object (optional defaults to 0)"
            },
            {
              "name": ":locY",
              "docstring": "The initial absolute, on-screen y-coordinate for the Animation object (optional defaults to 0)"
            },
            {
              "name": ":identifier",
              "docstring": "unique object for identification (optional)"
            },
            {
              "name": ":visibility",
              "docstring": "`true` if the layer is visible, otherwise `false` (optional, default to +true+)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if the `rez` is not an animation resource or resource id"
        }
      ],
      "returns": []
    },
    {
      "name": "play",
      "ast": {
        "name": "play",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":delegate",
                    "types": [
                      {
                        "type": "WatchUi.AnimationDelegate"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options, can be `null`",
          "dictionary_keys": [
            {
              "name": ":delegate",
              "docstring": "An [AnimationDelegate ](../../Toybox/WatchUi/AnimationDelegate.html)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "stop",
      "ast": {
        "name": "stop",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.AnimationDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/AnimationDelegate.html",
  "docstring": "AnimationDelegate responds to an Animation event.",
  "methods": [
    {
      "name": "onAnimationEvent",
      "ast": {
        "name": "onAnimationEvent",
        "parameters": [
          {
            "name": "event",
            "types": [
              {
                "type": "WatchUi.AnimationEvent"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "event",
          "docstring": "The animation event, a WatchUi.ANIMATION_EVENT* value"
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ActionMenuItem",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ActionMenuItem.html",
  "docstring": "Class that represents an action menu item.",
  "methods": [
    {
      "name": "getId",
      "ast": {
        "name": "getId",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Object"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "getLabel",
      "ast": {
        "name": "getLabel",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "ActionMenuItem.Options"
              }
            ]
          },
          {
            "name": "identifier",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options.",
          "dictionary_keys": [
            {
              "name": ":label",
              "docstring": "label string (or string resource id) for the MenuItem"
            }
          ]
        },
        {
          "name": "identifier",
          "docstring": "The identifier for this MenuItem"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ActionMenuDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ActionMenuDelegate.html",
  "docstring": "Class that represents an action menu delegate, which can be used to relay events regarding the action menu.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onBack",
      "ast": {
        "name": "onBack",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onSelect",
      "ast": {
        "name": "onSelect",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "WatchUi.ActionMenuItem"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The selected ActionMenuItem."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.WatchUi",
  "name": "Toybox.WatchUi.ActionMenu",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/WatchUi/ActionMenu.html",
  "docstring": "Class that represents an action menu view.",
  "methods": [
    {
      "name": "addItem",
      "ast": {
        "name": "addItem",
        "parameters": [
          {
            "name": "item",
            "types": [
              {
                "type": "WatchUi.ActionMenuItem"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "item",
          "docstring": "The MenuItem to add to the ActionMenu"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if item is not a MenuItem"
        }
      ],
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "ActionMenu.Options"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Options for the ActionMenu.",
          "dictionary_keys": [
            {
              "name": ":theme",
              "docstring": "theme for the action menu UI."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "If invalid theme is provided"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Weather",
  "name": "Toybox.Weather.DailyForecast",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Weather/DailyForecast.html",
  "docstring": "Represents the forecast for a given day.",
  "attributes": [
    {
      "name": "condition",
      "docstring": "The weather condition",
      "type": "Weather.Condition",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "forectTime",
      "docstring": "The time the forecast is valid in UTC time",
      "type": "Time.Moment",
      "nullable": true,
      "returns": "Time.Moment"
    },
    {
      "name": "highTemperature",
      "docstring": "The high temperature in Celsius",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "lowTemperature",
      "docstring": "The low temperature in Celsius",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "precipitationChance",
      "docstring": "The chance of precipitation [0-100%]",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Weather",
  "name": "Toybox.Weather.CurrentConditions",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Weather/CurrentConditions.html",
  "docstring": "Represents the most recently cached weather conditions.",
  "attributes": [
    {
      "name": "condition",
      "docstring": "The current weather condition",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "feelsLikeTemperature",
      "docstring": "The wind chill or heat index, in Celsius",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "highTemperature",
      "docstring": "The forecasted high temperature for the day in Celsius",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "lowTemperature",
      "docstring": "The forecasted low temperature for the day in Celsius",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "observationLocationName",
      "docstring": "Textual description of the observation location.  If the app does not have the position permission then this will be `null`.",
      "type": "Lang.String",
      "nullable": true,
      "returns": "Lang.String"
    },
    {
      "name": "observationLocationPosition",
      "docstring": "Location where the conditions were observed.  If the app does not have the position permission then this will be `null`.",
      "type": "Position.Location",
      "nullable": true,
      "returns": "Position.Location"
    },
    {
      "name": "observationTime",
      "docstring": "UTC time the conditions were observed",
      "type": "Time.Moment",
      "nullable": true,
      "returns": "Time.Moment"
    },
    {
      "name": "precipitationChance",
      "docstring": "The chance of precipitation [0-100%]",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "relativeHumidity",
      "docstring": "The relative humidity [0-100%]",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "temperature",
      "docstring": "The current temperature in Celsius",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "windBearing",
      "docstring": "The wind bearing in degrees. North = 0, East = 90, South = 180, West = 270",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "windSpeed",
      "docstring": "The current wind speed in meters per second",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Graphics",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics.html",
  "docstring": "The Graphics module provides a set of tools that allow developers to use basic drawing functionality.  This provides the ability to draw shapes, lines, fill shapes, and use dynamic layouts for graphic elements based on specific device contexts. The Device Context (Dc) is useful for developers who are interested in creating content for multiple device platforms with differing screen shapes, sizes, and color palettes.",
  "classes": [
    "AffineTransform",
    "BitmapReference",
    "BitmapTexture",
    "BoundingBox",
    "BufferedBitmap",
    "BufferedBitmapReference",
    "Dc",
    "FontReference",
    "InvalidBitmapResourceException",
    "InvalidPaletteException",
    "ResourceReference",
    "VectorFont"
  ],
  "constants": [
    {
      "name": "FONT_XTINY",
      "value": "0",
      "since": "API Level 1.0.0",
      "description": "Extra tiny Connect IQ font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_TINY",
      "value": "1",
      "since": "API Level 1.0.0",
      "description": "Tiny Connect IQ font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SMALL",
      "value": "2",
      "since": "API Level 1.0.0",
      "description": "Small Connect IQ font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_MEDIUM",
      "value": "3",
      "since": "API Level 1.0.0",
      "description": "Medium Connect IQ font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_LARGE",
      "value": "4",
      "since": "API Level 1.0.0",
      "description": "Large Connect IQ font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_NUMBER_MILD",
      "value": "5",
      "since": "API Level 1.0.0",
      "description": "Normal size number only Connect IQ font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_NUMBER_MEDIUM",
      "value": "6",
      "since": "API Level 1.0.0",
      "description": "Medium size number only Connect IQ font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_NUMBER_HOT",
      "value": "7",
      "since": "API Level 1.0.0",
      "description": "Large size number only Connect IQ font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_NUMBER_THAI_HOT",
      "value": "8",
      "since": "API Level 1.0.0",
      "description": "Huge size number only Connect IQ font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SYSTEM_XTINY",
      "value": "9",
      "since": "API Level 1.3.0",
      "description": "Extra tiny system font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SYSTEM_TINY",
      "value": "10",
      "since": "API Level 1.3.0",
      "description": "Tiny system font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SYSTEM_SMALL",
      "value": "11",
      "since": "API Level 1.3.0",
      "description": "Small system font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SYSTEM_MEDIUM",
      "value": "12",
      "since": "API Level 1.3.0",
      "description": "Medium system font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SYSTEM_LARGE",
      "value": "13",
      "since": "API Level 1.3.0",
      "description": "Large system font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SYSTEM_NUMBER_MILD",
      "value": "14",
      "since": "API Level 1.3.0",
      "description": "Normal size number only system font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SYSTEM_NUMBER_MEDIUM",
      "value": "15",
      "since": "API Level 1.3.0",
      "description": "Medium size number only system font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SYSTEM_NUMBER_HOT",
      "value": "16",
      "since": "API Level 1.3.0",
      "description": "Large size number only system font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_SYSTEM_NUMBER_THAI_HOT",
      "value": "17",
      "since": "API Level 1.3.0",
      "description": "Huge size number only system font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_GLANCE",
      "value": "18",
      "since": "API Level 3.1.8",
      "description": "Glance text font",
      "parent": "FontDefinition"
    },
    {
      "name": "FONT_GLANCE_NUMBER",
      "value": "19",
      "since": "API Level 3.1.8",
      "description": "Glance number only font",
      "parent": "FontDefinition"
    }
  ],
  "typedefs": [
    {
      "name": "BitmapType",
      "types": [
        "WatchUi.BitmapResource",
        "Graphics.BufferedBitmap",
        "Graphics.BitmapReference",
        "Graphics.BufferedBitmapReference"
      ]
    },
    {
      "name": "ColorType",
      "types": [
        "Lang.Number",
        "Graphics.ColorValue"
      ]
    },
    {
      "name": "FontType",
      "types": [
        "WatchUi.FontResource",
        "Graphics.FontDefinition",
        "Graphics.FontReference",
        "Graphics.VectorFont"
      ]
    },
    {
      "name": "Point2D",
      "types": [
        "Lang.Array",
        "Lang.Numeric"
      ]
    }
  ],
  "methods": [
    {
      "name": "createBufferedBitmap",
      "ast": {
        "name": "createBufferedBitmap",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":width",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":height",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":palette",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Graphics.ColorType"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":colorDepth",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":bitmapResource",
                    "types": [
                      {
                        "type": "WatchUi.BitmapResource"
                      },
                      {
                        "type": "Graphics.BitmapReference"
                      }
                    ]
                  },
                  {
                    "name": ":alphaBlending",
                    "types": [
                      {
                        "type": "Graphics.AlphaBlending"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Graphics.BufferedBitmapReference"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Dictionary of options. Must contain width and height, with optional palette, or a [BitmapResource](../Toybox/WatchUi/BitmapResource.html). This resource is not allowed to have an alpha channel.",
          "dictionary_keys": [
            {
              "name": ":width",
              "docstring": "The width of the surface in pixels. Must be a positive integer value."
            },
            {
              "name": ":height",
              "docstring": "The height of the surface in pixels. Must be a positive integer value."
            },
            {
              "name": ":palette",
              "docstring": "The colors used in this surface. Using less will reduce the bitmap size. The bitmap will use the system default if not provided. The maximum palette size allowed is 256 colors. If a palette is provided, the number of colors must also be <= to the number of system colors."
            },
            {
              "name": ":colorDepth",
              "docstring": "Color depth in terms of bits/pixel, when missing, default to system value."
            },
            {
              "name": ":bitmapResource",
              "docstring": "A [BitmapResource](../Toybox/WatchUi/BitmapResource.html) or [BitmapReference](../Toybox/Graphics/BitmapReference.html) to initialize"
            },
            {
              "name": ":alphaBlending",
              "docstring": "A [AlphaBlending](../Toybox/Graphics.html#AlphaBlending-module) enum to specify the level of alpha blending support for this buffered bitmap object."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if the palette size exceeds the number of system colors."
        },
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if the palette size exceeds 256 colors."
        },
        {
          "types": [
            "Graphics.InvalidBitmapResourceException"
          ],
          "docstring": "Thrown if the [BitmapResource](../Toybox/WatchUi/BitmapResource.html) provided has an alpha channel."
        }
      ],
      "returns": []
    },
    {
      "name": "createColor",
      "ast": {
        "name": "createColor",
        "parameters": [
          {
            "name": "alpha",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "red",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "green",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "blue",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "alpha",
          "docstring": "Number value ranging from 0-255 representing alpha channel"
        },
        {
          "name": "red",
          "docstring": "Number value ranging from 0-255 representing red channel"
        },
        {
          "name": "green",
          "docstring": "Number value ranging from 0-255 representing green channel"
        },
        {
          "name": "blue",
          "docstring": "Number value ranging from 0-255 representing blue channel"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "fitTextToArea",
      "ast": {
        "name": "fitTextToArea",
        "parameters": [
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              }
            ]
          },
          {
            "name": "width",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "height",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "truncate",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "text",
          "docstring": "The text to fit into the given area, which may include newlines"
        },
        {
          "name": "font",
          "docstring": "The font to use when determining line break placement"
        },
        {
          "name": "width",
          "docstring": "The width of the area to fit within"
        },
        {
          "name": "height",
          "docstring": "The height of the area to fit within"
        },
        {
          "name": "truncate",
          "docstring": "If `true`, the resulting string may be truncated to fit within the provided area using the provided font"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getFontAscent",
      "ast": {
        "name": "getFontAscent",
        "parameters": [
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "font",
          "docstring": "The font to use"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getFontDescent",
      "ast": {
        "name": "getFontDescent",
        "parameters": [
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "font",
          "docstring": "The font to use"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getFontHeight",
      "ast": {
        "name": "getFontHeight",
        "parameters": [
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "font",
          "docstring": "The font to use"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getVectorFont",
      "ast": {
        "name": "getVectorFont",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":face",
                    "types": [
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.String"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":size",
                    "types": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Graphics.VectorFont"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A description of the font to retrieve.",
          "dictionary_keys": [
            {
              "name": ":face",
              "docstring": "A String representing the face name requested, or an Array of face names that are acceptable."
            },
            {
              "name": ":size",
              "docstring": "The height of the font requested in pixels as a positive number."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if invalid :size value is provided."
        },
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if invalid :face value is provided."
        }
      ],
      "returns": [
        "Graphics.VectorFont"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.FitContributor",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/FitContributor.html",
  "docstring": "The FitContributor module allows Applications and Data Fields to record [Field](../Toybox/FitContributor/Field.html) data into FIT files on the device's file system during an activity. This is useful for recording data that is not already calculated by the device, which can be synced to a service like Garmin Connect.  There are three FitContributor message types available:  MESG_TYPE_SESSION        Session data is written once per recording session at the end of the recording, and is used for data that pertains to the entire session (e.g. average speed).  MESG_TYPE_LAP        Lap data is written once for every lap in the session, and used for data that pertains to each lap (e.g. average lap speed).  MESG_TYPE_RECORD        Depending on the device, record data is written once per second or when new data is available (Smart Recording), but is never written faster than once per second. This message type is used for instantaneous values (e.g. current speed).  Data type constants are also available for use with the [createField()](../Toybox/ActivityRecording/Session.html#createField- instance_function) method.",
  "classes": [
    "Field"
  ],
  "constants": [
    {
      "name": "MESG_TYPE_SESSION",
      "value": "18",
      "since": "API Level 1.3.0",
      "description": "The message type for session messages.",
      "parent": "MessageType"
    },
    {
      "name": "MESG_TYPE_LAP",
      "value": "19",
      "since": "API Level 1.3.0",
      "description": "The message type for lap messages.",
      "parent": "MessageType"
    },
    {
      "name": "MESG_TYPE_RECORD",
      "value": "20",
      "since": "API Level 1.3.0",
      "description": "The message type for record messages.",
      "parent": "MessageType"
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Cryptography",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Cryptography.html",
  "docstring": "The Cryptography Module will allow the application to create a [Cipher](../Toybox/Cryptography/Cipher.html) object that can encrypt and decrypt [ByteArray](../Toybox/Lang/ByteArray.html) objects.",
  "classes": [
    "Cipher",
    "CipherBasedMessageAuthenticationCode",
    "Hash",
    "HashBasedMessageAuthenticationCode",
    "InvalidBlockSizeException",
    "Key",
    "KeyAgreement",
    "KeyPair"
  ],
  "constants": [
    {
      "name": "HASH_SHA1",
      "value": "0",
      "since": "API Level 3.0.0",
      "description": "SHA-1 implementation for Hash objects",
      "parent": "HashAlgorithm"
    },
    {
      "name": "HASH_SHA256",
      "value": "1",
      "since": "API Level 3.0.0",
      "description": "SHA-256 implementation for Hash objects",
      "parent": "HashAlgorithm"
    },
    {
      "name": "HASH_MD5",
      "value": "2",
      "since": "API Level 3.0.0",
      "description": "MD5 implementation for Hash objects",
      "parent": "HashAlgorithm"
    }
  ],
  "methods": [
    {
      "name": "createPublicKey",
      "ast": {
        "name": "createPublicKey",
        "parameters": [
          {
            "name": "algorithm",
            "types": [
              {
                "type": "Cryptography.HashAlgorithm"
              }
            ]
          },
          {
            "name": "bytes",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Cryptography.Key"
          }
        ]
      },
      "parameters": [
        {
          "name": "algorithm",
          "docstring": "The hash algorithm to use as a KEY_PAIR_ELLIPTIC_CURVE_* constant"
        },
        {
          "name": "bytes",
          "docstring": "The public key bytes to be used to generate the [Key](../Toybox/Cryptography/Key.html)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if an argument is not the correct type"
        },
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if the ByteArray provided is not the correct size for the selected algorithm, or the algorithm selected is not supported."
        }
      ],
      "returns": [
        "Cryptography.Key"
      ]
    },
    {
      "name": "randomBytes",
      "ast": {
        "name": "randomBytes",
        "parameters": [
          {
            "name": "size",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": [
        {
          "name": "size",
          "docstring": "The number of requested random bytes"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Complications",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Complications.html",
  "docstring": "The Complications module allows apps to both subscribe to and publish complications. Complications are exposed via an iterator, or can be queried by identifier. Watch faces can register a callback and subscribe to multiple complications. Device apps and audio content providers can publish complication information.",
  "classes": [
    "Complication",
    "ComplicationNotFoundException",
    "Id",
    "Iterator"
  ],
  "constants": [
    {
      "name": "UNIT_INVALID",
      "value": "0",
      "since": "API Level 4.2.0",
      "parent": "Unit"
    },
    {
      "name": "UNIT_DISTANCE",
      "value": "1",
      "since": "API Level 4.2.0",
      "description": "Complication is a distance; value is in meters",
      "parent": "Unit"
    },
    {
      "name": "UNIT_ELEVATION",
      "value": "2",
      "since": "API Level 4.2.0",
      "description": "Complication is a elevation; value is in meters",
      "parent": "Unit"
    },
    {
      "name": "UNIT_HEIGHT",
      "value": "3",
      "since": "API Level 4.2.0",
      "description": "Complication is a height; value is in meters",
      "parent": "Unit"
    },
    {
      "name": "UNIT_SPEED",
      "value": "4",
      "since": "API Level 4.2.0",
      "description": "Complication is a speed; value is in meters/second",
      "parent": "Unit"
    },
    {
      "name": "UNIT_TEMPERATURE",
      "value": "5",
      "since": "API Level 4.2.0",
      "description": "Complication is a temperature; value is in degrees Celsius",
      "parent": "Unit"
    },
    {
      "name": "UNIT_WEIGHT",
      "value": "6",
      "since": "API Level 4.2.0",
      "description": "Complication is a weight; value is in grams",
      "parent": "Unit"
    }
  ],
  "typedefs": [
    {
      "name": "ComplicationChangedCallback",
      "types": [
        "Lang.Method",
        "Complications.Id"
      ]
    },
    {
      "name": "Data",
      "types": [
        "Complications.Label",
        "Complications.Value",
        "Complications.Unit",
        "Lang.String",
        "Complications.Ranges"
      ]
    },
    {
      "name": "Icon",
      "types": [
        "WatchUi.BitmapResource",
        "Graphics.BitmapReference"
      ]
    },
    {
      "name": "Label",
      "types": [
        "Lang.String"
      ]
    },
    {
      "name": "RangeValue",
      "types": [
        "Lang.Number",
        "Lang.Float",
        "Lang.Long",
        "Lang.Double"
      ]
    },
    {
      "name": "Ranges",
      "types": [
        "Lang.Array",
        "Complications.RangeValue"
      ]
    },
    {
      "name": "Value",
      "types": [
        "Lang.String",
        "Complications.RangeValue"
      ]
    }
  ],
  "methods": [
    {
      "name": "exitTo",
      "ast": {
        "name": "exitTo",
        "parameters": [
          {
            "name": "id",
            "types": [
              {
                "type": "Complications.Id"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "docstring": "The complication Id to launch"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if complication id is not a from a valid app"
        }
      ],
      "returns": []
    },
    {
      "name": "getComplication",
      "ast": {
        "name": "getComplication",
        "parameters": [
          {
            "name": "id",
            "types": [
              {
                "type": "Complications.Id"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Complications.Complication"
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "docstring": "Complication Id to fetch"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Complications.ComplicationNotFoundException"
          ],
          "docstring": "Thrown if the given complication is not found."
        }
      ],
      "returns": [
        "Complications.Complication"
      ]
    },
    {
      "name": "getComplications",
      "ast": {
        "name": "getComplications",
        "parameters": [],
        "returns": [
          {
            "type": "Complications.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Complications.Iterator"
      ]
    },
    {
      "name": "registerComplicationChangeCallback",
      "ast": {
        "name": "registerComplicationChangeCallback",
        "parameters": [
          {
            "name": "callback",
            "types": [
              {
                "type": "Complications.ComplicationChangedCallback"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "callback",
          "docstring": "Callback to be invoked when complication is changed or becomes unavailable."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "subscribeToUpdates",
      "ast": {
        "name": "subscribeToUpdates",
        "parameters": [
          {
            "name": "id",
            "types": [
              {
                "type": "Complications.Id"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown if too many active subscriptions"
        },
        {
          "types": [
            "Complications.ComplicationNotFoundException"
          ],
          "docstring": "Thrown if the given complication is not found."
        }
      ],
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "unsubscribeFromAllUpdates",
      "ast": {
        "name": "unsubscribeFromAllUpdates",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "unsubscribeFromUpdates",
      "ast": {
        "name": "unsubscribeFromUpdates",
        "parameters": [
          {
            "name": "id",
            "types": [
              {
                "type": "Complications.Id"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "docstring": "Complication Td to unsubscribe from"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "updateComplication",
      "ast": {
        "name": "updateComplication",
        "parameters": [
          {
            "name": "index",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "data",
            "types": [
              {
                "type": "Complications.Data"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "index",
          "docstring": "Application complication to be updated"
        },
        {
          "name": "data",
          "docstring": "Updated values for the complication"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown if the id of the complication is not associated with this application"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Communications",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Communications.html",
  "docstring": "The Communications Module provides tools for communication.  With the Communications module, widgets and apps will be able to communicate with a mobile phone via Bluetooth Low Energy (BLE). The mobile phone may be sharing data with the device, or it may act as a bridge between the app and the Internet. This allows the device to become part of the Internet of Things.",
  "classes": [
    "ConnectionListener",
    "MailboxIterator",
    "Message",
    "OAuthMessage",
    "PhoneAppMessage",
    "SyncDelegate"
  ],
  "constants": [
    {
      "name": "UNKNOWN_ERROR",
      "value": "0",
      "since": "API Level 1.0.0",
      "description": "An unknown error has occurred.",
      "parent": "Error"
    },
    {
      "name": "BLE_ERROR",
      "value": "-1",
      "since": "API Level 1.0.0",
      "description": "A generic BLE error has occurred.",
      "parent": "Error"
    },
    {
      "name": "BLE_HOST_TIMEOUT",
      "value": "-2",
      "since": "API Level 1.0.0",
      "description": "We timed out waiting for a response from the host.",
      "parent": "Error"
    },
    {
      "name": "BLE_SERVER_TIMEOUT",
      "value": "-3",
      "since": "API Level 1.0.0",
      "description": "We timed out waiting for a response from a server.",
      "parent": "Error"
    },
    {
      "name": "BLE_NO_DATA",
      "value": "-4",
      "since": "API Level 1.0.0",
      "description": "Response contained no data.",
      "parent": "Error"
    },
    {
      "name": "BLE_REQUEST_CANCELLED",
      "value": "-5",
      "since": "API Level 1.0.0",
      "description": "The request was cancelled at the request of the system.",
      "parent": "Error"
    },
    {
      "name": "BLE_QUEUE_FULL",
      "value": "-101",
      "since": "API Level 1.0.0",
      "description": "Too many requests have been made.",
      "parent": "Error"
    },
    {
      "name": "BLE_REQUEST_TOO_LARGE",
      "value": "-102",
      "since": "API Level 1.0.0",
      "description": "Serialized input data for the request was too large.",
      "parent": "Error"
    },
    {
      "name": "BLE_UNKNOWN_SEND_ERROR",
      "value": "-103",
      "since": "API Level 1.0.0",
      "description": "Send failed for an unknown reason.",
      "parent": "Error"
    },
    {
      "name": "BLE_CONNECTION_UNAVAILABLE",
      "value": "-104",
      "since": "API Level 1.0.0",
      "description": "No BLE connection is available.",
      "parent": "Error"
    },
    {
      "name": "INVALID_HTTP_HEADER_FIELDS_IN_REQUEST",
      "value": "-200",
      "since": "API Level 1.0.0",
      "description": "Request contained invalid http header fields.",
      "parent": "Error"
    },
    {
      "name": "INVALID_HTTP_BODY_IN_REQUEST",
      "value": "-201",
      "since": "API Level 1.0.0",
      "description": "Request contained an invalid http body.",
      "parent": "Error"
    },
    {
      "name": "INVALID_HTTP_METHOD_IN_REQUEST",
      "value": "-202",
      "since": "API Level 1.0.0",
      "description": "Request used an invalid http method.",
      "parent": "Error"
    },
    {
      "name": "NETWORK_REQUEST_TIMED_OUT",
      "value": "-300",
      "since": "API Level 1.0.0",
      "description": "Request timed out before a response was received.",
      "parent": "Error"
    },
    {
      "name": "INVALID_HTTP_BODY_IN_NETWORK_RESPONSE",
      "value": "-400",
      "since": "API Level 1.0.0",
      "description": "Response body data is invalid for the request type.",
      "parent": "Error"
    },
    {
      "name": "INVALID_HTTP_HEADER_FIELDS_IN_NETWORK_RESPONSE",
      "value": "-401",
      "since": "API Level 1.0.0",
      "description": "Response contained invalid http header fields.",
      "parent": "Error"
    },
    {
      "name": "NETWORK_RESPONSE_TOO_LARGE",
      "value": "-402",
      "since": "API Level 1.0.0",
      "description": "Serialized response was too large.",
      "parent": "Error"
    },
    {
      "name": "NETWORK_RESPONSE_OUT_OF_MEMORY",
      "value": "-403",
      "since": "API Level 3.0.0",
      "description": "Ran out of memory processing network response.",
      "parent": "Error"
    },
    {
      "name": "STORAGE_FULL",
      "value": "-1000",
      "since": "API Level 2.2.0",
      "description": "Filesystem too full to store response data.",
      "parent": "Error"
    },
    {
      "name": "SECURE_CONNECTION_REQUIRED",
      "value": "-1001",
      "since": "API Level 2.3.0",
      "description": "Indicates an https connection is required for the request.",
      "parent": "Error"
    },
    {
      "name": "UNSUPPORTED_CONTENT_TYPE_IN_RESPONSE",
      "value": "-1002",
      "since": "API Level 2.4.1",
      "description": "Content type given in response is not supported or does not match what is expected.",
      "parent": "Error"
    },
    {
      "name": "REQUEST_CANCELLED",
      "value": "-1003",
      "since": "API Level 2.4.2",
      "description": "Http request was cancelled by the system.",
      "parent": "Error"
    },
    {
      "name": "REQUEST_CONNECTION_DROPPED",
      "value": "-1004",
      "since": "API Level 3.0.0",
      "description": "Connection was lost before a response could be obtained.",
      "parent": "Error"
    },
    {
      "name": "UNABLE_TO_PROCESS_MEDIA",
      "value": "-1005",
      "since": "API Level 3.0.2",
      "description": "Downloaded media file was unable to be read.",
      "parent": "Error"
    },
    {
      "name": "UNABLE_TO_PROCESS_IMAGE",
      "value": "-1006",
      "since": "API Level 3.0.3",
      "description": "Downloaded image file was unable to be processed.",
      "parent": "Error"
    },
    {
      "name": "UNABLE_TO_PROCESS_HLS",
      "value": "-1007",
      "since": "API Level 3.0.10",
      "description": "HLS content could not be downloaded.\nMost often occurs when requested and provided bit rates do not match.",
      "parent": "Error"
    }
  ],
  "typedefs": [
    {
      "name": "PhoneMessageCallback",
      "types": [
        "Lang.Method",
        "Communications.Message"
      ]
    }
  ],
  "methods": [
    {
      "name": "cancelAllRequests",
      "ast": {
        "name": "cancelAllRequests",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "checkWifiConnection",
      "ast": {
        "name": "checkWifiConnection",
        "parameters": [
          {
            "name": "connectionStatusCallback",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "result",
                    "types": [
                      {
                        "type": "Lang.Dictionary",
                        "keys": [
                          {
                            "name": ":wifiAvailable",
                            "types": [
                              {
                                "type": "Lang.Boolean"
                              }
                            ]
                          },
                          {
                            "name": ":errorCode",
                            "types": [
                              {
                                "type": "Communications.WifiConnectionStatus"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "connectionStatusCallback",
          "docstring": "A callback that will be invoked after the connection test has completed. This callback accepts a single dictionary parameter. This dictionary has two keys:    * :wifiAvailable `true` if an access point with internet access could be connected to, `false` otherwise     * :errorCode If :wifiAvailable is `false` the value will be a WIFI_CONNECTION_STATUS_* indicating why the connection is not available.",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "emptyMailbox",
      "ast": {
        "name": "emptyMailbox",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": []
    },
    {
      "name": "encodeURL",
      "ast": {
        "name": "encodeURL",
        "parameters": [
          {
            "name": "url",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": [
        {
          "name": "url",
          "docstring": "The URL String to be encoded"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "generateSignedOAuthHeader",
      "ast": {
        "name": "generateSignedOAuthHeader",
        "parameters": [
          {
            "name": "url",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "params",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keyType": [
                  {
                    "type": "Lang.String"
                  }
                ],
                "valueType": [
                  {
                    "type": "Lang.Object"
                  }
                ]
              }
            ]
          },
          {
            "name": "requestMethod",
            "types": [
              {
                "type": "Communications.HttpRequestMethod"
              }
            ]
          },
          {
            "name": "signatureMethod",
            "types": [
              {
                "type": "Communications.SigningMethod"
              }
            ]
          },
          {
            "name": "token",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "tokenSecret",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "consumerKey",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "consumerSecret",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": [
        {
          "name": "url",
          "docstring": "The request URL"
        },
        {
          "name": "params",
          "docstring": "The parameters of the request"
        },
        {
          "name": "requestMethod",
          "docstring": "An HTTP_REQUEST_METHOD_* value"
        },
        {
          "name": "signatureMethod",
          "docstring": "An OAUTH_SIGNING_METHOD_* value"
        },
        {
          "name": "token",
          "docstring": "The token given by the OAuth service    * Can be `null`",
          "dictionary_keys": [
            {
              "docstring": ""
            }
          ]
        },
        {
          "name": "tokenSecret",
          "docstring": "The token secret given by the OAuth service. Used to sign the request"
        },
        {
          "name": "consumerKey",
          "docstring": "The key that identifies your application"
        },
        {
          "name": "consumerSecret",
          "docstring": "The consumer secret that is used to sign the request"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "getMailbox",
      "ast": {
        "name": "getMailbox",
        "parameters": [],
        "returns": [
          {
            "type": "Communications.MailboxIterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": [
        "Communications.MailboxIterator"
      ]
    },
    {
      "name": "makeImageRequest",
      "ast": {
        "name": "makeImageRequest",
        "parameters": [
          {
            "name": "url",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "parameters",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":palette",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Number"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":maxWidth",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":maxHeight",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":dithering",
                    "types": [
                      {
                        "type": "Communications.Dithering"
                      }
                    ]
                  },
                  {
                    "name": ":packingFormat",
                    "types": [
                      {
                        "type": "Communications.PackingFormat"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "responseCallback",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "responseCode",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": "data",
                    "types": [
                      {
                        "type": "WatchUi.BitmapResource"
                      },
                      {
                        "type": "Graphics.BitmapReference"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "url",
          "docstring": "The URL of an image to request"
        },
        {
          "name": "parameters",
          "docstring": "The Dictionary of keys and values    * Appended to the URL     * Can be `null`",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        },
        {
          "name": "options",
          "docstring": "Additional image options",
          "dictionary_keys": [
            {
              "name": ":palette",
              "docstring": "The color palette to restrict the image dithering to. Using a smaller palette can reduce the size of the image data to speed up transfers"
            },
            {
              "name": ":maxWidth",
              "docstring": "The maximum width an image should be scaled to"
            },
            {
              "name": ":maxHeight",
              "docstring": "The maximum height an image should be scaled to"
            },
            {
              "name": ":dithering",
              "docstring": "The type of dithering to use when processing the image. Defaults to IMAGE_DITHERING_FLOYD_STEINBERG"
            },
            {
              "name": ":packingFormat",
              "docstring": "The format of the image data to request. Defaults to PACKING_FORMAT_DEFAULT"
            }
          ]
        },
        {
          "name": "responseCallback",
          "docstring": "A reference to a callback method which must accept two arguments:    * responseCode: The server response code or a BLE_* error type     * data: A [BitmapResource](../Toybox/WatchUi/BitmapResource.html) or [BitmapReference](../Toybox/Graphics/BitmapReference.html) from a successful request, or `null` on error",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "makeJsonRequest",
      "ast": {
        "name": "makeJsonRequest",
        "parameters": [
          {
            "name": "url",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "parameters",
            "types": [
              {
                "type": "Lang.Dictionary"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": "Content",
                    "types": [
                      {
                        "type": "Communications.HttpRequestContentType"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "responseCallback",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "responseCode",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": "data",
                    "types": [
                      {
                        "type": "Lang.Dictionary"
                      },
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "PersistedContent.Iterator"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "url",
          "docstring": "The URL being requested"
        },
        {
          "name": "parameters",
          "docstring": "A Dictionary of keys and values    * Appended to the URL for GET/DELETE request     * Set as the body for a POST/PUT request     * These values must be URL encoded     * Can be `null`",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options    * Can be `null`",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "name": ":method",
              "docstring": "The HTTP method of the request. This option should be an HTTP_REQUEST_METHOD_* value."
            },
            {
              "name": ":headers",
              "docstring": "A Dictionary of HTTP headers to include in the request    * The \"Content-Type\" header for the body of the request can be specified using a REQUEST_CONTENT_TYPE_* value       * This is only valid for methods PUT and POST (you cannot set a body for a GET or DELETE request)       * If the content type is not specified, it will default to \"application/json\" for GET and DELETE requests, and will default to \"application/x-www-form-urlencoded\" for POST and PUT requests",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        },
        {
          "name": "responseCallback",
          "docstring": "A reference to a callback method which must accept two arguments:    * responseCode: the server response code     * data: the content if the request was successful, or `null`",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": []
    },
    {
      "name": "makeOAuthRequest",
      "ast": {
        "name": "makeOAuthRequest",
        "parameters": [
          {
            "name": "requestUrl",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "requestParams",
            "types": [
              {
                "type": "Lang.Dictionary"
              }
            ]
          },
          {
            "name": "resultUrl",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "resultType",
            "types": [
              {
                "type": "Communications.TokenResult"
              }
            ]
          },
          {
            "name": "resultKeys",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keyType": [
                  {
                    "type": "Lang.String"
                  }
                ],
                "valueType": [
                  {
                    "type": "Lang.String"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "requestUrl",
          "docstring": "The URL to load in the web view to begin authentication"
        },
        {
          "name": "requestParams",
          "docstring": "Non-URL encoded parameters for the `requestUrl`"
        },
        {
          "name": "resultUrl",
          "docstring": "The URL of the final page of authentication that contains the `resultKeys`"
        },
        {
          "name": "resultType",
          "docstring": "An OAUTH_RESULT_TYPE_* value that specifies the format of the result"
        },
        {
          "name": "resultKeys",
          "docstring": "The desired OAuth response values passed to the callback method. The keys map to the actual OAuth response keys, and the values map to the keys of the [OAuthMessage](../Toybox/Communications/OAuthMessage.html) data."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "makeWebRequest",
      "ast": {
        "name": "makeWebRequest",
        "parameters": [
          {
            "name": "url",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "parameters",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":method",
                    "types": [
                      {
                        "type": "Communications.HttpRequestMethod"
                      }
                    ]
                  },
                  {
                    "name": ":headers",
                    "types": [
                      {
                        "type": "Lang.Dictionary"
                      }
                    ]
                  },
                  {
                    "name": ":responseType",
                    "types": [
                      {
                        "type": "Communications.HttpResponseContentType"
                      }
                    ]
                  },
                  {
                    "name": ":context",
                    "types": [
                      {
                        "type": "Lang.Object"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": ":maxBandwidth",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":fileDownloadProgressCallback",
                    "types": [
                      {
                        "type": "Lang.Method",
                        "parameters": [
                          {
                            "name": "totalBytesTransferred",
                            "types": [
                              {
                                "type": "Lang.Number"
                              }
                            ]
                          },
                          {
                            "name": "fileSize",
                            "types": [
                              {
                                "type": "Lang.Number"
                              },
                              {
                                "type": "Null"
                              }
                            ]
                          }
                        ],
                        "returns": [
                          {
                            "type": "Void"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "responseCallback",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "responseCode",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": "data",
                    "types": [
                      {
                        "type": "Lang.Dictionary"
                      },
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "PersistedContent.Iterator"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              },
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "responseCode",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": "data",
                    "types": [
                      {
                        "type": "Lang.Dictionary"
                      },
                      {
                        "type": "Lang.String"
                      },
                      {
                        "type": "PersistedContent.Iterator"
                      },
                      {
                        "type": "Null"
                      }
                    ]
                  },
                  {
                    "name": "context",
                    "types": [
                      {
                        "type": "Lang.Object"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "url",
          "docstring": "The URL being requested"
        },
        {
          "name": "parameters",
          "docstring": "A Dictionary of keys and values.    * These values should not be URL encoded.     * Can be `null`.",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        },
        {
          "name": "options",
          "docstring": "A Dictionary of options.",
          "dictionary_keys": [
            {
              "name": ":method",
              "docstring": "The HTTP method of the request. This should be an HTTP_REQUEST_METHOD_* value."
            },
            {
              "name": ":headers",
              "docstring": "A Dictionary of HTTP headers to include in the request.    * The \"Content-Type\" header for the body of the request can be specified using a [REQUEST_CONTENT_TYPE_*](../Toybox/Communications.html) value.     * If the content type is not specified, it will default to \"application/json\" for GET and DELETE requests, and will default to \"application/x-www-form-urlencoded\" for POST and PUT requests.     * By default, DELETE requests will have their parameters appended to the URL.     * Setting the method as DELETE as well as a \"Content-Type\" header will result in the parameters being set in the body of the request and they will not be appended to the URL.     * GET requests can only have their parameters appended to the URL, specifying the \"Content-Type\" header will not set the body.",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":responseType",
              "docstring": "The format of the response.    * This should be an [HTTP_RESPONSE_CONTENT_TYPE_*](../Toybox/Communications.html) value.     * If HTTP_RESPONSE_CONTENT_TYPE_FIT or HTTP_RESPONSE_CONTENT_TYPE_GPX is given, the system will attempt to download and parse a FIT or GPX file and store the contained data in the device, based on the contents of the file.     * If not given, the system will use the Content-Type header from the server response to determine the format of the response body. If the Content-Type header from the response is not one of the known HTTP_RESPONSE_CONTENT_TYPE_* types, an error will occur.",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":context",
              "docstring": "A user-specific context object to be passed to the response callback. The callback will need to accept a third parameter if this value is populated."
            },
            {
              "name": ":mediaEncoding",
              "docstring": "The encoding of the audio content that is being downloaded. Should be a [Media.ENCODING_*](../Toybox/Media.html) value."
            },
            {
              "name": ":maxBandwidth",
              "docstring": "maximum bandwidth. TVM will select the audio stream with the highest bandwidth that's less than or equal to the maximum This option is only effective when processing HLS content"
            },
            {
              "name": ":fileDownloadProgressCallback",
              "docstring": "a callback method which must accept two parameters    * totalBytesTransferred: The total number of bytes transferred for the current file download     * fileSize: The size of the file being downloaded. Note that this can be `null` if file size cannot be determined from the server.     * This option is only supported for media file download progress     * This option is supported since CIQ 3.2.0",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        },
        {
          "name": "responseCallback",
          "docstring": "A reference to a callback method which must accept two arguments:    * responseCode: The server response code or a BLE_* error type     * data: The content if the request was successful, or `null`",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if a required option for a particular request is omitted"
        },
        {
          "types": [
            "Lang.SymbolNotAllowedException"
          ],
          "docstring": "Thrown if a given :responseType option is not supported for the device the reqest is being made from. An example would be using HTTP_RESPONSE_CONTENT_TYPE_AUDIO on a device that does not support audio content provider apps"
        }
      ],
      "returns": []
    },
    {
      "name": "notifySyncComplete",
      "ast": {
        "name": "notifySyncComplete",
        "parameters": [
          {
            "name": "errorMessage",
            "types": [
              {
                "type": "Lang.String"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "errorMessage",
          "docstring": "A descriptive error message if a failure occurred. If the sync completes successfully, `null` should be passed to this method."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "notifySyncProgress",
      "ast": {
        "name": "notifySyncProgress",
        "parameters": [
          {
            "name": "percentageComplete",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "percentageComplete",
          "docstring": "An integer from 0 to 100 indicating the completion percentage."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "openWebPage",
      "ast": {
        "name": "openWebPage",
        "parameters": [
          {
            "name": "url",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "params",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "url",
          "docstring": "The URL to open."
        },
        {
          "name": "params",
          "docstring": "The URL parameters used to add to the pages web page URL. Parameters should not be URL encoded."
        },
        {
          "name": "options",
          "docstring": "Additional options for the request"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForOAuthMessages",
      "ast": {
        "name": "registerForOAuthMessages",
        "parameters": [
          {
            "name": "method",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "data",
                    "types": [
                      {
                        "type": "Communications.OAuthMessage"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "method",
          "docstring": "A reference to a callback, which must receive a `data` argument of the type [OAuthMessage](../Toybox/Communications/OAuthMessage.html)."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForPhoneAppMessages",
      "ast": {
        "name": "registerForPhoneAppMessages",
        "parameters": [
          {
            "name": "method",
            "types": [
              {
                "type": "Communications.PhoneMessageCallback"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "method",
          "docstring": "A reference to a callback, which must receive a `data` argument of the type [PhoneAppMessage](../Toybox/Communications/PhoneAppMessage.html)."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setMailboxListener",
      "ast": {
        "name": "setMailboxListener",
        "parameters": [
          {
            "name": "listener"
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "A reference to a callback method which must accept an iterator. The iterator is the mailbox iterator for the app"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": []
    },
    {
      "name": "startSync",
      "ast": {
        "name": "startSync",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "startSync2",
      "ast": {
        "name": "startSync2",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":message",
                    "types": [
                      {
                        "type": "Lang.String"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "a dictionary of options, can be null",
          "dictionary_keys": [
            {
              "name": ":message",
              "docstring": "the sync message to display"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "transmit",
      "ast": {
        "name": "transmit",
        "parameters": [
          {
            "name": "content",
            "types": [
              {
                "type": "Application.PersistableType"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "listener",
            "types": [
              {
                "type": "Communications.ConnectionListener"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "content",
          "docstring": "The object to be sent"
        },
        {
          "name": "options",
          "docstring": "Additional transmit options for future proofing. For now, an empty Dictionary is used."
        },
        {
          "name": "listener",
          "docstring": "An extension of the ConnectionListener class"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.BluetoothLowEnergy",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy.html",
  "docstring": "The BluetoothLowEnergy module provides access to Generic BLE communication functionality in the central role. Including the ability to scan for peripheral devices, pair with sensors, and performing GATTC operations on a peripheral  This module also provides several sets of constants:",
  "classes": [
    "BleDelegate",
    "Characteristic",
    "Descriptor",
    "Device",
    "DevicePairException",
    "InvalidRequestException",
    "Iterator",
    "ProfileRegistrationException",
    "ScanResult",
    "Service",
    "Uuid",
    "UuidFormatException"
  ],
  "constants": [
    {
      "name": "STATUS_SUCCESS",
      "value": "0",
      "since": "API Level 3.1.0",
      "description": "Operation Successful",
      "parent": "Status"
    },
    {
      "name": "STATUS_NOT_ENOUGH_RESOURCES",
      "value": "1",
      "since": "API Level 3.1.0",
      "description": "Operation failed due to lack of resources",
      "parent": "Status"
    },
    {
      "name": "STATUS_READ_FAIL",
      "value": "12",
      "since": "API Level 3.1.0",
      "description": "Read Request Failed",
      "parent": "Status"
    },
    {
      "name": "STATUS_WRITE_FAIL",
      "value": "14",
      "since": "API Level 3.1.0",
      "description": "Write Request Failed",
      "parent": "Status"
    }
  ],
  "methods": [
    {
      "name": "cccdUuid",
      "ast": {
        "name": "cccdUuid",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Uuid"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Uuid"
      ]
    },
    {
      "name": "getAvailableConnectionCount",
      "ast": {
        "name": "getAvailableConnectionCount",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getPairedDevices",
      "ast": {
        "name": "getPairedDevices",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Iterator"
      ]
    },
    {
      "name": "longToUuid",
      "ast": {
        "name": "longToUuid",
        "parameters": [
          {
            "name": "mostSigBits",
            "types": [
              {
                "type": "Lang.Long"
              }
            ]
          },
          {
            "name": "leastSigBits",
            "types": [
              {
                "type": "Lang.Long"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Uuid"
          }
        ]
      },
      "parameters": [
        {
          "name": "mostSigBits",
          "docstring": "Most Significant 64-bits of the UUID"
        },
        {
          "name": "leastSigBits",
          "docstring": "Least Significant 64-bits of the UUID"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Uuid"
      ]
    },
    {
      "name": "pairDevice",
      "ast": {
        "name": "pairDevice",
        "parameters": [
          {
            "name": "scanResult",
            "types": [
              {
                "type": "BluetoothLowEnergy.ScanResult"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Device"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "scanResult",
          "docstring": "A scan result for the device that should be paired. Cannot be `null`."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "BluetoothLowEnergy.DevicePairException"
          ],
          "docstring": "Thrown if the requested device is already paired, if the maximum number of paired devices has already been reached, or if pairing failed for unkown reason"
        }
      ],
      "returns": [
        "BluetoothLowEnergy.Device"
      ]
    },
    {
      "name": "registerProfile",
      "ast": {
        "name": "registerProfile",
        "parameters": [
          {
            "name": "profile",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":uuid",
                    "types": [
                      {
                        "type": "BluetoothLowEnergy.Uuid"
                      }
                    ]
                  },
                  {
                    "name": ":characteristics",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Dictionary",
                            "keys": [
                              {
                                "name": ":uuid",
                                "types": [
                                  {
                                    "type": "BluetoothLowEnergy.Uuid"
                                  }
                                ]
                              },
                              {
                                "name": ":descriptors",
                                "types": [
                                  {
                                    "type": "Lang.Array",
                                    "valueType": [
                                      {
                                        "type": "BluetoothLowEnergy.Uuid"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "profile",
          "docstring": "Profile Definition. Defines the expected Profile UUID, Profile Characteristics and Characteristic Descriptors. Cannot be `null`."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "BluetoothLowEnergy.ProfileRegistrationException"
          ],
          "docstring": "If registration could not be completed"
        }
      ],
      "returns": []
    },
    {
      "name": "setDelegate",
      "ast": {
        "name": "setDelegate",
        "parameters": [
          {
            "name": "delegate",
            "types": [
              {
                "type": "BluetoothLowEnergy.BleDelegate"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "delegate",
          "docstring": "An implementation of the BleDelegate Class to register as the handler for callbacks, or `null` to deregister the current handler."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setScanState",
      "ast": {
        "name": "setScanState",
        "parameters": [
          {
            "name": "scanState",
            "types": [
              {
                "type": "BluetoothLowEnergy.ScanState"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "stringToUuid",
      "ast": {
        "name": "stringToUuid",
        "parameters": [
          {
            "name": "str",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Uuid"
          }
        ]
      },
      "parameters": [
        {
          "name": "str",
          "docstring": "String Representation of the Uuid formatted as \"XXXXXXXX-XXXX-XXXX-XXXX- XXXXXXXXXXXX\""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "BluetoothLowEnergy.UuidFormatException"
          ],
          "docstring": "If string is not in valid format"
        }
      ],
      "returns": [
        "BluetoothLowEnergy.Uuid"
      ]
    },
    {
      "name": "unpairDevice",
      "ast": {
        "name": "unpairDevice",
        "parameters": [
          {
            "name": "device",
            "types": [
              {
                "type": "BluetoothLowEnergy.Device"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "device",
          "docstring": "the device to remove from the paired device store. Cannot be `null`"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Background",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Background.html",
  "docstring": "Background events are special events that trigger in the background when either certain system events occur, such as when an activity goal has been met, or at certain times (called temporal events). This allows an application to update its data even when the application is not active.",
  "classes": [
    "ExitDataSizeLimitException",
    "InvalidBackgroundTimeException",
    "MessageSizeLimitException"
  ],
  "methods": [
    {
      "name": "deleteActivityCompletedEvent",
      "ast": {
        "name": "deleteActivityCompletedEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "deleteGoalEvent",
      "ast": {
        "name": "deleteGoalEvent",
        "parameters": [
          {
            "name": "goalType",
            "types": [
              {
                "type": "Application.GoalType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "goalType",
          "docstring": "An Application.GOAL_TYPE_* value representing the goal type of the event to remove"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "deleteOAuthResponseEvent",
      "ast": {
        "name": "deleteOAuthResponseEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "deletePhoneAppMessageEvent",
      "ast": {
        "name": "deletePhoneAppMessageEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "deletePushNotificationEvent",
      "ast": {
        "name": "deletePushNotificationEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "deleteSleepEvent",
      "ast": {
        "name": "deleteSleepEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "deleteStepsEvent",
      "ast": {
        "name": "deleteStepsEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "deleteTemporalEvent",
      "ast": {
        "name": "deleteTemporalEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "deleteWakeEvent",
      "ast": {
        "name": "deleteWakeEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "exit",
      "ast": {
        "name": "exit",
        "parameters": [
          {
            "name": "backgroundData",
            "types": [
              {
                "type": "Application.PropertyValueType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "backgroundData",
          "docstring": "The object to pass to the main process's [AppBase.onBackgroundData()](../Toybox/Application/AppBase.html#onBackgroundData- instance_function) method. Passing `null` will not override previous data values not yet consumed by the parent application's AppBase.onBackgroundData() method."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Background.ExitDataSizeLimitException"
          ],
          "docstring": "Indicates the data provided exceeds the data size limit (approximately 8 KB). If this exception is caught, the process will not exit and should attempt to call `Background.exit()` again with less data."
        }
      ],
      "returns": []
    },
    {
      "name": "getActivityCompletedEventRegistered",
      "ast": {
        "name": "getActivityCompletedEventRegistered",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getBackgroundData",
      "ast": {
        "name": "getBackgroundData",
        "parameters": [],
        "returns": [
          {
            "type": "Application.PropertyValueType"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getGoalEventRegistered",
      "ast": {
        "name": "getGoalEventRegistered",
        "parameters": [
          {
            "name": "goalType",
            "types": [
              {
                "type": "Application.GoalType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "goalType",
          "docstring": "An Application.GOAL_TYPE_* value representing the goal type to check for registered background events"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getLastTemporalEventTime",
      "ast": {
        "name": "getLastTemporalEventTime",
        "parameters": [],
        "returns": [
          {
            "type": "Time.Moment"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment"
      ]
    },
    {
      "name": "getOAuthResponseEventRegistered",
      "ast": {
        "name": "getOAuthResponseEventRegistered",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getPhoneAppMessageEventRegistered",
      "ast": {
        "name": "getPhoneAppMessageEventRegistered",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getPushNotificationEventRegistered",
      "ast": {
        "name": "getPushNotificationEventRegistered",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getSleepEventRegistered",
      "ast": {
        "name": "getSleepEventRegistered",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getStepsEventRegistered",
      "ast": {
        "name": "getStepsEventRegistered",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getTemporalEventRegisteredTime",
      "ast": {
        "name": "getTemporalEventRegisteredTime",
        "parameters": [],
        "returns": [
          {
            "type": "Time.Moment"
          },
          {
            "type": "Time.Duration"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Time.Moment",
        "Time.Duration"
      ]
    },
    {
      "name": "getWakeEventRegistered",
      "ast": {
        "name": "getWakeEventRegistered",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "registerForActivityCompletedEvent",
      "ast": {
        "name": "registerForActivityCompletedEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForGoalEvent",
      "ast": {
        "name": "registerForGoalEvent",
        "parameters": [
          {
            "name": "goalType",
            "types": [
              {
                "type": "Application.GoalType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "goalType",
          "docstring": "An Application.GOAL_TYPE_* value representing the goal type on which to trigger the background event"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForOAuthResponseEvent",
      "ast": {
        "name": "registerForOAuthResponseEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForPhoneAppMessageEvent",
      "ast": {
        "name": "registerForPhoneAppMessageEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForPushNotificationEvent",
      "ast": {
        "name": "registerForPushNotificationEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForSleepEvent",
      "ast": {
        "name": "registerForSleepEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForStepsEvent",
      "ast": {
        "name": "registerForStepsEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForTemporalEvent",
      "ast": {
        "name": "registerForTemporalEvent",
        "parameters": [
          {
            "name": "time",
            "types": [
              {
                "type": "Time.Moment"
              },
              {
                "type": "Time.Duration"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "time",
          "docstring": "The specific Moment in time at which to run a background event, or the interval Duration at which to repeat a background event"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Background.InvalidBackgroundTimeException"
          ],
          "docstring": "Indicates an application has attempted to schedule a background event which either: * Occurs less than five minutes after the last background event occurred * Has a duration of less than five minutes"
        }
      ],
      "returns": []
    },
    {
      "name": "registerForWakeEvent",
      "ast": {
        "name": "registerForWakeEvent",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "requestApplicationWake",
      "ast": {
        "name": "requestApplicationWake",
        "parameters": [
          {
            "name": "message",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "message",
          "docstring": "The message to display in the dialog when requesting to launch the app"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Background.MessageSizeLimitException"
          ],
          "docstring": "Indicates the provided message exceeds the size limit (255 Bytes). Note that some characters may be larger than 1 Byte"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Authentication",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Authentication.html",
  "docstring": "The Authentication Module provides tools for authentication.  With the Authentication module, Connect IQ apps will be able to make OAuth requests redirected through Connect IQ mobile app.",
  "classes": [
    "Message",
    "OAuthMessage"
  ],
  "methods": [
    {
      "name": "makeOAuthRequest",
      "ast": {
        "name": "makeOAuthRequest",
        "parameters": [
          {
            "name": "requestUrl"
          },
          {
            "name": "requestParams"
          },
          {
            "name": "resultUrl"
          },
          {
            "name": "resultType"
          },
          {
            "name": "resultKeys"
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "requestUrl",
          "docstring": "The URL to load in the web view to begin authentication"
        },
        {
          "name": "requestParams",
          "docstring": "Non-URL encoded parameters for the `requestUrl`"
        },
        {
          "name": "resultUrl",
          "docstring": "The URL of the final page of authentication that contains the `resultKeys`"
        },
        {
          "name": "resultType",
          "docstring": "An OAUTH_RESULT_TYPE_* value that specifies the format of the result"
        },
        {
          "name": "resultKeys",
          "docstring": "The desired OAuth response values passed to the callback method. The keys map to the actual OAuth response keys, and the values map to the keys of the [OAuthMessage](../Toybox/Authentication/OAuthMessage.html) data."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "registerForOAuthMessages",
      "ast": {
        "name": "registerForOAuthMessages",
        "parameters": [
          {
            "name": "method"
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "method",
          "docstring": "A reference to a callback, which must receive a `data` argument of the type [OAuthMessage](../Toybox/Authentication/OAuthMessage.html)."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Attention",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Attention.html",
  "docstring": "The Attention module provides the ability to play pre-defined sounds, methods for managing vibration, and control of the back light.  Not all devices fully support this module, so `has` checks are recommended. For example, the vivoactive does not have a tone generator and will trigger an error if an app attempts to play sounds.",
  "classes": [
    "BacklightOnTooLongException",
    "ToneProfile",
    "VibeProfile"
  ],
  "constants": [
    {
      "name": "TONE_KEY",
      "value": "0",
      "since": "API Level 1.0.0",
      "description": "Indicates that a key was pressed",
      "parent": "Tone"
    },
    {
      "name": "TONE_START",
      "value": "1",
      "since": "API Level 1.0.0",
      "description": "Indicates that an activity has started",
      "parent": "Tone"
    },
    {
      "name": "TONE_STOP",
      "value": "2",
      "since": "API Level 1.0.0",
      "description": "Indicates that an activity has stopped",
      "parent": "Tone"
    },
    {
      "name": "TONE_MSG",
      "value": "3",
      "since": "API Level 1.0.0",
      "description": "Indicates that a message is available",
      "parent": "Tone"
    },
    {
      "name": "TONE_ALERT_HI",
      "value": "4",
      "since": "API Level 1.0.0",
      "description": "An alert ending with a high note",
      "parent": "Tone"
    },
    {
      "name": "TONE_ALERT_LO",
      "value": "5",
      "since": "API Level 1.0.0",
      "description": "An alert ending with a low note",
      "parent": "Tone"
    },
    {
      "name": "TONE_LOUD_BEEP",
      "value": "6",
      "since": "API Level 1.0.0",
      "description": "A loud beep",
      "parent": "Tone"
    },
    {
      "name": "TONE_INTERVAL_ALERT",
      "value": "7",
      "since": "API Level 1.0.0",
      "description": "Indicates a change in interval",
      "parent": "Tone"
    },
    {
      "name": "TONE_ALARM",
      "value": "8",
      "since": "API Level 1.0.0",
      "description": "Indicates an alarm has triggered",
      "parent": "Tone"
    },
    {
      "name": "TONE_RESET",
      "value": "9",
      "since": "API Level 1.0.0",
      "description": "Indicates that the activity was reset",
      "parent": "Tone"
    },
    {
      "name": "TONE_LAP",
      "value": "10",
      "since": "API Level 1.0.0",
      "description": "Indicates that the user has completed a lap",
      "parent": "Tone"
    },
    {
      "name": "TONE_CANARY",
      "value": "11",
      "since": "API Level 1.0.0",
      "description": "An annoying sound to get the users attention",
      "parent": "Tone"
    },
    {
      "name": "TONE_TIME_ALERT",
      "value": "12",
      "since": "API Level 1.0.0",
      "description": "An alert that a time threshold has been met",
      "parent": "Tone"
    },
    {
      "name": "TONE_DISTANCE_ALERT",
      "value": "13",
      "since": "API Level 1.0.0",
      "description": "An alert that a distance threshold has been met",
      "parent": "Tone"
    },
    {
      "name": "TONE_FAILURE",
      "value": "14",
      "since": "API Level 1.0.0",
      "description": "Indicates that the activity was a failure",
      "parent": "Tone"
    },
    {
      "name": "TONE_SUCCESS",
      "value": "15",
      "since": "API Level 1.0.0",
      "description": "Indicates that the activity was a success",
      "parent": "Tone"
    },
    {
      "name": "TONE_POWER",
      "value": "16",
      "since": "API Level 1.0.0",
      "description": "The power on tone",
      "parent": "Tone"
    },
    {
      "name": "TONE_LOW_BATTERY",
      "value": "17",
      "since": "API Level 1.0.0",
      "description": "Indicates that the device has low battery power",
      "parent": "Tone"
    },
    {
      "name": "TONE_ERROR",
      "value": "18",
      "since": "API Level 1.0.0",
      "description": "Indicates an error occurred",
      "parent": "Tone"
    }
  ],
  "methods": [
    {
      "name": "backlight",
      "ast": {
        "name": "backlight",
        "parameters": [
          {
            "name": "setting",
            "types": [
              {
                "type": "Lang.Boolean"
              },
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "setting",
          "docstring": "* If `setting` is a [Boolean](../Toybox/Lang/Boolean.html), `false` will disable the backlight and `true` will enable the backlight at the system backlight level.     * If `setting` is a [Float](../Toybox/Lang/Float.html), the value 0.0 will disable the backlight and values greater than 0.0 and less than or equal to 1.0 will enable the backlight at the specified brightness.",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "BacklightOnTooLongException On products with burn in protection, this exception is thrown if the backlight is held on for too long continuously"
        },
        {
          "types": [],
          "docstring": "InvalidOptionsException If the Float value is outside the valid range."
        }
      ],
      "returns": []
    },
    {
      "name": "hasFlashlightColor",
      "ast": {
        "name": "hasFlashlightColor",
        "parameters": [
          {
            "name": "color",
            "types": [
              {
                "type": "Attention.FlashlightColor"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "color",
          "docstring": "Color to check"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Raised if called from an app type other than watch-app."
        }
      ],
      "returns": []
    },
    {
      "name": "playTone",
      "ast": {
        "name": "playTone",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Attention.Tone"
              },
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":toneProfile",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Attention.ToneProfile"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":repeatCount",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A TONE_* value or [Dictionary](../Toybox/Lang/Dictionary.html) of options.",
          "dictionary_keys": [
            {
              "name": ":toneProfile",
              "docstring": "Array containing at least one [ToneProfile](../Toybox/Attention/ToneProfile.html) object to be played in sequence."
            },
            {
              "name": ":repeatCount",
              "docstring": "Number of times to repeat the given tone sequence."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if passing an options hash with invalid values when using new ToneProfile objects"
        }
      ],
      "returns": []
    },
    {
      "name": "setFlashlightMode",
      "ast": {
        "name": "setFlashlightMode",
        "parameters": [
          {
            "name": "mode",
            "types": [
              {
                "type": "Attention.FlashlightMode"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":color",
                    "types": [
                      {
                        "type": "Attention.FlashlightColor"
                      }
                    ]
                  },
                  {
                    "name": ":brightness",
                    "types": [
                      {
                        "type": "Lang.Number"
                      },
                      {
                        "type": "Attention.FlashlightBrightness"
                      }
                    ]
                  },
                  {
                    "name": ":strobeMode",
                    "types": [
                      {
                        "type": "Attention.FlashlightStrobeMode"
                      }
                    ]
                  },
                  {
                    "name": ":strobeSpeed",
                    "types": [
                      {
                        "type": "Attention.FlashlightStrobeSpeed"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Attention.FlashlightResult"
          }
        ]
      },
      "parameters": [
        {
          "name": "mode",
          "docstring": ""
        },
        {
          "name": "options",
          "docstring": "Flashlight mode options",
          "dictionary_keys": [
            {
              "name": ":color",
              "docstring": "Color of flashlight. Default is FLASHLIGHT_COLOR_WHITE."
            },
            {
              "name": ":strobeMode",
              "docstring": "Mode of strobe. Default is FLASHLIGHT_STROBE_MODE_BLINK."
            },
            {
              "name": ":strobeSpeed",
              "docstring": "Speed of strobe. Default is FLASHLIGHT_STROBE_SPEED_MEDIUM."
            },
            {
              "name": ":brightness",
              "docstring": "Intensity of the flashlight. Default is FLASHLIGHT_BRIGHTNESS_MEDIUM."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Raised if called from an app type other than watch-app."
        }
      ],
      "returns": [
        "Attention.FlashlightResult"
      ]
    },
    {
      "name": "vibrate",
      "ast": {
        "name": "vibrate",
        "parameters": [
          {
            "name": "vibeProfiles",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Attention.VibeProfile"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "vibeProfiles",
          "docstring": "An Array of [VibeProfile](../Toybox/Attention/VibeProfile.html) objects"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Application",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Application.html",
  "docstring": "The Application module contains the base class for every Connect IQ app.  The Application Module includes the [AppBase](../Toybox/Application/AppBase.html) class which is responsible for controlling the app life cycle. This module also includes set and get methods to control the settings and properties values held in the Object Store and a GOAL_TYPE enum that defines the different goal types that can be triggered.",
  "modules": [
    "Application.Properties",
    "Application.Storage"
  ],
  "classes": [
    "AppBase",
    "AudioContentProviderApp",
    "ObjectStoreAccessException"
  ],
  "constants": [
    {
      "name": "GOAL_TYPE_STEPS",
      "value": "0",
      "since": "API Level 1.3.0",
      "parent": "GoalType"
    },
    {
      "name": "GOAL_TYPE_FLOORS_CLIMBED",
      "value": "1",
      "since": "API Level 1.3.0",
      "parent": "GoalType"
    },
    {
      "name": "GOAL_TYPE_ACTIVE_MINUTES",
      "value": "2",
      "since": "API Level 1.3.0",
      "parent": "GoalType"
    }
  ],
  "typedefs": [
    {
      "name": "PersistableType",
      "types": [
        "Application.PropertyValueType"
      ]
    },
    {
      "name": "PropertyKeyType",
      "types": [
        "Lang.Number",
        "Lang.Float",
        "Lang.Long",
        "Lang.Double",
        "Lang.String",
        "Lang.Boolean",
        "Lang.Char"
      ]
    },
    {
      "name": "PropertyValueType",
      "types": [
        "Application.PropertyKeyType",
        "Lang.Array",
        "Application.PropertyValueType",
        "Lang.Dictionary",
        "Application.PropertyKeyType",
        "Application.PropertyValueType",
        "WatchUi.BitmapResource"
      ]
    },
    {
      "name": "ResourceReferenceType",
      "types": [
        "Graphics.BitmapReference",
        "Graphics.FontReference"
      ]
    },
    {
      "name": "ResourceType",
      "types": [
        "Lang.Array",
        "Lang.Dictionary",
        "Lang.String",
        "WatchUi.AnimationResource",
        "WatchUi.BitmapResource",
        "WatchUi.FontResource"
      ]
    }
  ],
  "methods": [
    {
      "name": "getApp",
      "ast": {
        "name": "getApp",
        "parameters": [],
        "returns": [
          {
            "type": "Application.AppBase"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Application.AppBase"
      ]
    },
    {
      "name": "loadResource",
      "ast": {
        "name": "loadResource",
        "parameters": [
          {
            "name": "resource",
            "types": [
              {
                "type": "Lang.Symbol"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Application.ResourceType"
          },
          {
            "type": "Application.ResourceReferenceType"
          }
        ]
      },
      "parameters": [
        {
          "name": "resource",
          "docstring": "An identifier for a resource defined in the project's `resources.xml` file"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array",
        "Lang.Dictionary",
        "Lang.String",
        "WatchUi.AnimationResource",
        "WatchUi.BitmapResource",
        "WatchUi.FontResource"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.AntPlus",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus.html",
  "docstring": "The AntPlus module contains the interface for ANT+ data.  ANT+ is built on top of ANT. It is a set of mutually agreed upon device profiles for what the information sent over ANT represents. For example, a heart rate monitor will send information about your heart rate over ANT as defined in the ANT+ Heart Rate Device Profile. CIQ devices can use the [ANT Module](../Toybox/Ant.html) to implement ANT+ device profiles and talk to nearby devices that also implement the same ANT+ device profile (such as heart rate, bike power and fitness equipment control). The AntPlus Module provides the APIs to communicate in specific and standard ways with the ANT+ profiles defined in the document available at the link below titled, \"ANT+ Device Profiles\".",
  "classes": [
    "AntPlusNotAllowedException",
    "BatteryStatus",
    "BikeCadence",
    "BikeCadenceInfo",
    "BikeCadenceListener",
    "BikeLight",
    "BikePower",
    "BikePowerListener",
    "BikeRadar",
    "BikeRadarListener",
    "BikeSpeed",
    "BikeSpeedCadence",
    "BikeSpeedCadenceInfo",
    "BikeSpeedCadenceListener",
    "BikeSpeedInfo",
    "BikeSpeedListener",
    "CalculatedCadence",
    "CalculatedPower",
    "CalculatedWheelDistance",
    "CalculatedWheelSpeed",
    "CommonData",
    "DerailleurStatus",
    "Device",
    "DeviceListener",
    "DeviceState",
    "FitnessEquipment",
    "FitnessEquipmentData",
    "FitnessEquipmentListener",
    "FitnessEquipmentMode",
    "LightNetwork",
    "LightNetworkListener",
    "ManufacturerInfo",
    "PedalPowerBalance",
    "ProductInfo",
    "RadarTarget",
    "ResistanceSettings",
    "RunningDynamics",
    "RunningDynamicsData",
    "RunningDynamicsListener",
    "SensorPosition",
    "Shifting",
    "ShiftingListener",
    "ShiftingStatus",
    "SimulationSettings",
    "TargetPowerSettings",
    "TorqueEffectivenessPedalSmoothness",
    "UserSettings"
  ],
  "constants": [
    {
      "name": "BATT_STATUS_NEW",
      "value": "1",
      "since": "API Level 2.2.0",
      "parent": "BatteryStatusValue"
    },
    {
      "name": "BATT_STATUS_GOOD",
      "value": "2",
      "since": "API Level 2.2.0",
      "parent": "BatteryStatusValue"
    },
    {
      "name": "BATT_STATUS_OK",
      "value": "3",
      "since": "API Level 2.2.0",
      "parent": "BatteryStatusValue"
    },
    {
      "name": "BATT_STATUS_LOW",
      "value": "4",
      "since": "API Level 2.2.0",
      "parent": "BatteryStatusValue"
    },
    {
      "name": "BATT_STATUS_CRITICAL",
      "value": "5",
      "since": "API Level 2.2.0",
      "parent": "BatteryStatusValue"
    },
    {
      "name": "BATT_STATUS_INVALID",
      "value": "7",
      "since": "API Level 2.2.0",
      "parent": "BatteryStatusValue"
    },
    {
      "name": "BATT_STATUS_CNT",
      "value": "8",
      "since": "API Level 2.2.0",
      "parent": "BatteryStatusValue"
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Ant",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant.html",
  "docstring": "This module provide the interface for the ANT wireless protocol.  The ANT wireless protocol is a low level communications protocol that provides very efficient transfer of data by directly controlling the radio on the device. The ANT module provides a list of constants to be used with different Class objects and Methods provided within the module. These include:    * MSG_ID_* Constants - Message IDs     * MSG_CODE_* Constants - Message Codes for the response event     * NETWORK_* Constants - Network Types     * CHANNEL_TYPE_* Constants - Channel Types     * BURST_ERROR_* Constants - Burst Error types   ANT resources and documentation can be found at the links below.",
  "classes": [
    "BurstListener",
    "BurstPayload",
    "BurstPayloadIterator",
    "ChannelAssignment",
    "CryptoConfig",
    "DeviceConfig",
    "EncryptionInvalidSettingsException",
    "GenericChannel",
    "Message",
    "UnableToAcquireChannelException",
    "UnableToAcquireEncryptedChannelException"
  ],
  "constants": [
    {
      "name": "MSG_ID_RF_EVENT",
      "value": "0x01",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_UNASSIGN_CHANNEL",
      "value": "0x41",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_ASSIGN_CHANNEL",
      "value": "0x42",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_CHANNEL_ID",
      "value": "0x51",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_CHANNEL_PERIOD",
      "value": "0x43",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_SEARCH_TIMEOUT",
      "value": "0x44",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_CHANNEL_RF_FREQUENCY",
      "value": "0x45",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_NETWORK_KEY",
      "value": "0x46",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_TRANSMIT_POWER",
      "value": "0x47",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_CHANNEL_TRANSMIT_POWER",
      "value": "0x60",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_LOW_PRIORITY_SEARCH_TIMEOUT",
      "value": "0x63",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_LIB_CONFIG",
      "value": "0x6E",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_PROXIMITY_SEARCH",
      "value": "0x71",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_RESET_SYSTEM",
      "value": "0x4A",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_OPEN_CHANNEL",
      "value": "0x4B",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_CLOSE_CHANNEL",
      "value": "0x4C",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_BROADCAST_DATA",
      "value": "0x4E",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_ACKNOWLEDGED_DATA",
      "value": "0x4F",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    },
    {
      "name": "MSG_ID_CHANNEL_RESPONSE_EVENT",
      "value": "0x40",
      "since": "API Level 1.0.0",
      "parent": "MessageId"
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.ActivityRecording",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/ActivityRecording.html",
  "docstring": "The Activity Recording module will allow Apps to access the FIT file recording capabilities of the device.  Apps can use this module to allow the user to start and stop recordings, create laps, and save recorded data. SPORT_* and SUB_SPORT_* constants are provided as enums.  The SPORT_* defines the type of activity, but is not guaranteed to change device behavior. This may cause different algorithms to be applied to the sensor data. For example, a device that does not natively support SPORT_MULTISPORT recording will not gain SPORT_MULTISPORT transition features. However, the FIT file can be defined as SPORT_MULTISPORT and MULTI_SPORT algorithms may be applied to the sensor data.  SUB_SPORT_* allows for clarification of sport when recording.",
  "classes": [
    "Session"
  ],
  "constants": [
    {
      "name": "SPORT_GENERIC",
      "value": "0",
      "since": "API Level 1.0.0",
      "description": "Sport used for sports not on the list",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_RUNNING",
      "value": "1",
      "since": "API Level 1.0.0",
      "description": "Sport used for running",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_CYCLING",
      "value": "2",
      "since": "API Level 1.0.0",
      "description": "Sport used for multi-sport transitions",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_TRANSITION",
      "value": "3",
      "since": "API Level 1.0.0",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_FITNESS_EQUIPMENT",
      "value": "4",
      "since": "API Level 1.0.0",
      "description": "Sport used for ANT enabled exercise equipment",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_SWIMMING",
      "value": "5",
      "since": "API Level 1.0.0",
      "description": "Sport used for swimming",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_BASKETBALL",
      "value": "6",
      "since": "API Level 1.0.0",
      "description": "Sport used for basketball",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_SOCCER",
      "value": "7",
      "since": "API Level 1.0.0",
      "description": "Sport used for soccer",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_TENNIS",
      "value": "8",
      "since": "API Level 1.0.0",
      "description": "Sport used for Tennis",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_AMERICAN_FOOTBALL",
      "value": "9",
      "since": "API Level 1.0.0",
      "description": "Sport used for American football",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_TRAINING",
      "value": "10",
      "since": "API Level 1.0.0",
      "description": "Sport used for activities such as strength training, cardio, etc",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_WALKING",
      "value": "11",
      "since": "API Level 1.0.0",
      "description": "Sport used for walking",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_CROSS_COUNTRY_SKIING",
      "value": "12",
      "since": "API Level 1.0.0",
      "description": "Sport used for cross-country skiing",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_ALPINE_SKIING",
      "value": "13",
      "since": "API Level 1.0.0",
      "description": "Sport used for alpine skiing",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_SNOWBOARDING",
      "value": "14",
      "since": "API Level 1.0.0",
      "description": "Sport used for snowboarding",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_ROWING",
      "value": "15",
      "since": "API Level 1.0.0",
      "description": "Sport used for rowing",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_MOUNTAINEERING",
      "value": "16",
      "since": "API Level 1.0.0",
      "description": "Sport used for mountaineering",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_HIKING",
      "value": "17",
      "since": "API Level 1.0.0",
      "description": "Sport used for hiking",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_MULTISPORT",
      "value": "18",
      "since": "API Level 1.0.0",
      "description": "Sport used for multi-sport events",
      "parent": "Sport1"
    },
    {
      "name": "SPORT_PADDLING",
      "value": "19",
      "since": "API Level 1.0.0",
      "description": "Sport used for paddling",
      "parent": "Sport1"
    }
  ],
  "typedefs": [
    {
      "name": "Sport",
      "types": [
        "ActivityRecording.Sport1",
        "ActivityRecording.Sport2"
      ]
    }
  ],
  "methods": [
    {
      "name": "createSession",
      "ast": {
        "name": "createSession",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":sport",
                    "types": [
                      {
                        "type": "ActivityRecording.Sport"
                      },
                      {
                        "type": "Activity.Sport"
                      }
                    ]
                  },
                  {
                    "name": ":subSport",
                    "types": [
                      {
                        "type": "ActivityRecording.SubSport"
                      },
                      {
                        "type": "Activity.SubSport"
                      }
                    ]
                  },
                  {
                    "name": ":name",
                    "types": [
                      {
                        "type": "Lang.String"
                      }
                    ]
                  },
                  {
                    "name": ":poolLength",
                    "types": [
                      {
                        "type": "Lang.Float"
                      }
                    ]
                  },
                  {
                    "name": ":sensorLogger",
                    "types": [
                      {
                        "type": "SensorLogging.SensorLogger"
                      }
                    ]
                  },
                  {
                    "name": ":autoLap",
                    "types": [
                      {
                        "type": "Lang.Dictionary",
                        "keys": [
                          {
                            "name": ":type",
                            "types": [
                              {
                                "type": "Lang.Symbol"
                              }
                            ]
                          },
                          {
                            "name": ":entry",
                            "types": [
                              {
                                "type": "Lang.Array",
                                "valueType": [
                                  {
                                    "type": "Position.Location"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "name": ":exit",
                            "types": [
                              {
                                "type": "Lang.Array",
                                "valueType": [
                                  {
                                    "type": "Position.Location"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "ActivityRecording.Session"
          }
        ]
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary containing session creation options.",
          "dictionary_keys": [
            {
              "name": ":sport",
              "docstring": "The primary sport being recorded (SPORT_GENERIC by default)."
            },
            {
              "name": ":subSport",
              "docstring": "The sport subcategory being recorded (SUB_SPORT_GENERIC by default)."
            },
            {
              "name": ":name",
              "docstring": "Required. This is the name that will be associated with the sport being recorded. The suggested maximum length of the name is 15 characters (some devices support longer names)."
            },
            {
              "name": ":poolLength",
              "docstring": "This is the length of the pool in meters for this activity. If this session object is configured with `:sport=>SPORT_SWIMMING` and `:subSport=>SUB_SPORT_LAP_SWIMMING`, this option is required to configure the system in this mode. If it is not provided, activity data may have undefined behavior. For all other sport modes, this option is ignored."
            },
            {
              "name": ":autoLap",
              "docstring": "A dictionary containing auto-lap detection options. If present, this dictionary must have a `:type` key; If the value of `:type` is `:lines`, the `:entry` and `:exit` keys are required. The values associated with `:entry` and `:exit` describe the endpoints of the auto lap entry and exit line segments, each being defined as an [Array](../Toybox/Lang/Array.html) of two [Location](../Toybox/Position/Location.html) objects. (added in 3.0.10)"
            },
            {
              "name": ":sensorLogger",
              "docstring": "The SensorLogger to use to record this session."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if required options are missing or provided options are invalid in `:autoLap` options dictionary"
        }
      ],
      "returns": [
        "ActivityRecording.Session"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.ActivityMonitor",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/ActivityMonitor.html",
  "docstring": "The ActivityMonitor module contains the interface for Activity Monitoring data.",
  "classes": [
    "ActiveMinutes",
    "HeartRateIterator",
    "HeartRateSample",
    "History",
    "Info"
  ],
  "methods": [
    {
      "name": "getHeartRateHistory",
      "ast": {
        "name": "getHeartRateHistory",
        "parameters": [
          {
            "name": "period",
            "types": [
              {
                "type": "Time.Duration"
              },
              {
                "type": "Lang.Number"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "newestFirst",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "ActivityMonitor.HeartRateIterator"
          }
        ]
      },
      "parameters": [
        {
          "name": "period",
          "docstring": "The period of time from which to retrieve heart rate samples    * If period is `null`, the entire available history is retrieved     * If period is a [Duration](../Toybox/Time/Duration.html), then the history for the given Duration is retrieved     * If period is a [Number](../Toybox/Lang/Number.html), then the last Number entries are retrieved",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        },
        {
          "name": "newestFirst",
          "docstring": "The order in which to retrieve heart rate samples    * `true` to get the samples newest first     * `false` to get the samples oldest first",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "ActivityMonitor.HeartRateIterator"
      ]
    },
    {
      "name": "getHistory",
      "ast": {
        "name": "getHistory",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "ActivityMonitor.History"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getInfo",
      "ast": {
        "name": "getInfo",
        "parameters": [],
        "returns": [
          {
            "type": "ActivityMonitor.Info"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "ActivityMonitor.Info"
      ]
    }
  ]
},
{
  "type": "module",
  "name": "Toybox.Activity",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Activity.html",
  "docstring": "The Activity module provides a way to retrieve available info for the current activity.  Activity Info is automatically provided by the [compute()](../Toybox/WatchUi/DataField.html#compute-instance_function) method in Data Fields. The [getActivityInfo()](../Toybox/Activity.html#getActivityInfo-instance_function) method is available for use within apps or in other cases, such as data field initialization.  This module also provides two sets of constants:    * **SWIM_STROKE:** Indicates the [swimStrokeType()](../Toybox/Activity/Info.html#swimStrokeType-var), such as freestyle, backstroke, or butterfly.     * **TIMER_STATE:** Indicates the activity recording [timerState()](../Toybox/Activity/Info.html#timerState-var), such as stopped, started, paused, etc.",
  "classes": [
    "Info",
    "ProfileInfo",
    "WorkoutIntervalStep",
    "WorkoutStep",
    "WorkoutStepInfo"
  ],
  "constants": [
    {
      "name": "SWIM_STROKE_FREESTYLE",
      "value": "0",
      "since": "API Level 1.2.2",
      "description": "Freestyle stroke",
      "parent": "SwimStrokeType"
    },
    {
      "name": "SWIM_STROKE_BACKSTROKE",
      "value": "1",
      "since": "API Level 1.2.2",
      "description": "Backstroke",
      "parent": "SwimStrokeType"
    },
    {
      "name": "SWIM_STROKE_BREASTSTROKE",
      "value": "2",
      "since": "API Level 1.2.2",
      "description": "Breaststroke",
      "parent": "SwimStrokeType"
    },
    {
      "name": "SWIM_STROKE_BUTTERFLY",
      "value": "3",
      "since": "API Level 1.2.2",
      "description": "Butterfly stroke",
      "parent": "SwimStrokeType"
    },
    {
      "name": "SWIM_STROKE_DRILL",
      "value": "4",
      "since": "API Level 1.2.2",
      "description": "Drill mode",
      "parent": "SwimStrokeType"
    },
    {
      "name": "SWIM_STROKE_MIXED",
      "value": "5",
      "since": "API Level 1.2.2",
      "description": "Mixed stroke mode",
      "parent": "SwimStrokeType"
    },
    {
      "name": "SWIM_STROKE_IM",
      "value": "6",
      "since": "API Level 1.2.2",
      "description": "Mixed interval with equal number of butterfly, backstroke, breaststroke,\nand freestyle, in that order.",
      "parent": "SwimStrokeType"
    }
  ],
  "methods": [
    {
      "name": "getActivityInfo",
      "ast": {
        "name": "getActivityInfo",
        "parameters": [],
        "returns": [
          {
            "type": "Activity.Info"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Activity.Info"
      ]
    },
    {
      "name": "getCurrentWorkoutStep",
      "ast": {
        "name": "getCurrentWorkoutStep",
        "parameters": [],
        "returns": [
          {
            "type": "Activity.WorkoutStepInfo"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown if called from a data field app"
        }
      ],
      "returns": [
        "Activity.WorkoutStepInfo"
      ]
    },
    {
      "name": "getNextWorkoutStep",
      "ast": {
        "name": "getNextWorkoutStep",
        "parameters": [],
        "returns": [
          {
            "type": "Activity.WorkoutStepInfo"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.OperationNotAllowedException"
          ],
          "docstring": "Thrown if called from a data field app"
        }
      ],
      "returns": [
        "Activity.WorkoutStepInfo"
      ]
    },
    {
      "name": "getProfileInfo",
      "ast": {
        "name": "getProfileInfo",
        "parameters": [],
        "returns": [
          {
            "type": "Activity.ProfileInfo"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Activity.ProfileInfo"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.AffineTransform",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/AffineTransform.html",
  "docstring": "A 2D affine transformation matrix  This is a 2D transform, typically used for converting coordinates from one 2D coordinate system to another. These transformations can represent a sequence of rotations, scales, shears, and translations.                   | m00  m01  m02 |        | m10  m11  m12 |        |   0    0    1 |",
  "methods": [
    {
      "name": "concatenate",
      "ast": {
        "name": "concatenate",
        "parameters": [
          {
            "name": "xform",
            "types": [
              {
                "type": "Graphics.AffineTransform"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "xform",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getDeterminant",
      "ast": {
        "name": "getDeterminant",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Float"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getMatrix",
      "ast": {
        "name": "getMatrix",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "invert",
      "ast": {
        "name": "invert",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "ValueOutOfBoundsException if self cannot be inverted."
        }
      ],
      "returns": []
    },
    {
      "name": "preConcatenate",
      "ast": {
        "name": "preConcatenate",
        "parameters": [
          {
            "name": "xform",
            "types": [
              {
                "type": "Graphics.AffineTransform"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "xform",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "rotate",
      "ast": {
        "name": "rotate",
        "parameters": [
          {
            "name": "theta",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "theta",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "scale",
      "ast": {
        "name": "scale",
        "parameters": [
          {
            "name": "sx",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          },
          {
            "name": "sy",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "sx",
          "docstring": ""
        },
        {
          "name": "sy",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setMatrix",
      "ast": {
        "name": "setMatrix",
        "parameters": [
          {
            "name": "m",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Float"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "UnexpectedTypeException if parameter is not an Array"
        },
        {
          "types": [],
          "docstring": "InvalidValueException if parameter does not have exactly 6 elements"
        }
      ],
      "returns": []
    },
    {
      "name": "setToRotation",
      "ast": {
        "name": "setToRotation",
        "parameters": [
          {
            "name": "theta",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "theta",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setToScale",
      "ast": {
        "name": "setToScale",
        "parameters": [
          {
            "name": "sx",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          },
          {
            "name": "sy",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "sx",
          "docstring": ""
        },
        {
          "name": "sy",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setToShear",
      "ast": {
        "name": "setToShear",
        "parameters": [
          {
            "name": "shx",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          },
          {
            "name": "shy",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "shx",
          "docstring": ""
        },
        {
          "name": "shy",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setToTranslation",
      "ast": {
        "name": "setToTranslation",
        "parameters": [
          {
            "name": "tx",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          },
          {
            "name": "ty",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "tx",
          "docstring": ""
        },
        {
          "name": "ty",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "shear",
      "ast": {
        "name": "shear",
        "parameters": [
          {
            "name": "shx",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          },
          {
            "name": "shy",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "shx",
          "docstring": ""
        },
        {
          "name": "shy",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "transformPoint",
      "ast": {
        "name": "transformPoint",
        "parameters": [
          {
            "name": "pt",
            "types": [
              {
                "type": "Graphics.Point2D"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Graphics.Point2D"
          }
        ]
      },
      "parameters": [
        {
          "name": "pt",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Graphics.Point2D"
      ]
    },
    {
      "name": "transformPoints",
      "ast": {
        "name": "transformPoints",
        "parameters": [
          {
            "name": "pts",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Graphics.Point2D"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Graphics.Point2D"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "pts",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "translate",
      "ast": {
        "name": "translate",
        "parameters": [
          {
            "name": "tx",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          },
          {
            "name": "ty",
            "types": [
              {
                "type": "Lang.Float"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "tx",
          "docstring": ""
        },
        {
          "name": "ty",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.VectorFont",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/VectorFont.html",
  "docstring": "A representation of a vector font.  VectorFont objects are returned by the [getVectorFont()](../../Toybox/Graphics.html#getVectorFont-instance_function) method."
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.ResourceReference",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/ResourceReference.html",
  "docstring": "Object represents a reference for the resource allocated from the graphics memory pool rather than from the app's local memory. The underlying resource object could be temporarily purged from the system memory pool when all `strong` references are destroyed. The memory allocation is performed only when [ResourceReference::get()](../../Toybox/Graphics/ResourceReference.html#get- instance_function) method is invoked.",
  "methods": [
    {
      "name": "get",
      "ast": {
        "name": "get",
        "parameters": [],
        "returns": [
          {
            "type": "WatchUi.BitmapResource"
          },
          {
            "type": "Graphics.BufferedBitmap"
          },
          {
            "type": "WatchUi.FontResource"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "Thrown if resource cannot be loaded or restored because there isn't enough free pool to load the resource"
        }
      ],
      "returns": [
        "Lang.Object"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.InvalidPaletteException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/InvalidPaletteException.html",
  "docstring": "This Exception indicates an incompatible palette was used.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Cryptography",
  "name": "Toybox.Cryptography.KeyPair",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Cryptography/KeyPair.html",
  "docstring": "A public and private key pair.",
  "methods": [
    {
      "name": "getPrivateKey",
      "ast": {
        "name": "getPrivateKey",
        "parameters": [],
        "returns": [
          {
            "type": "Cryptography.Key"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Cryptography.Key"
      ]
    },
    {
      "name": "getPublicKey",
      "ast": {
        "name": "getPublicKey",
        "parameters": [],
        "returns": [
          {
            "type": "Cryptography.Key"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Cryptography.Key"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":algorithm",
                    "types": [
                      {
                        "type": "Cryptography.KeyPairAlgorithm"
                      }
                    ]
                  },
                  {
                    "name": ":privateKey",
                    "types": [
                      {
                        "type": "Lang.ByteArray"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A dictionary of options",
          "dictionary_keys": [
            {
              "name": ":algorithm",
              "docstring": "The hash algorithm to use as a KEY_PAIR_* constant (required)"
            },
            {
              "name": ":privateKey",
              "docstring": "The private key to be used to generate the KeyPair (optional)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if the specified `:algorithm` is not supported, or if a required option is not provided"
        },
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if the specified `:privateKey` is not the correct size for the selected algorithm"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Complications",
  "name": "Toybox.Complications.Iterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Complications/Iterator.html",
  "docstring": "Get the next complication",
  "methods": [
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "Complications.Complication"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Complications.Complication"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Complications",
  "name": "Toybox.Complications.Id",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Complications/Id.html",
  "docstring": "Unique identifier for complications",
  "methods": [
    {
      "name": "equals",
      "ast": {
        "name": "equals",
        "parameters": [
          {
            "name": "id",
            "types": [
              {
                "type": "Complications.Id"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "docstring": "Complication id to compare with"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getType",
      "ast": {
        "name": "getType",
        "parameters": [],
        "returns": [
          {
            "type": "Complications.Type"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Complications.Type"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "id",
            "types": [
              {
                "type": "Complications.Type"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "id",
          "docstring": "Complication type"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.UuidFormatException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/UuidFormatException.html",
  "docstring": "This exception indicates that the provided initializer for the Uuid was not valid"
},
{
  "type": "class",
  "parent": "Toybox.Background",
  "name": "Toybox.Background.MessageSizeLimitException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Background/MessageSizeLimitException.html",
  "docstring": "Indicates the message provided to [Background.requestApplicationWake()](../../Toybox/Background.html#requestApplicationWake- instance_function) exceeds the maximum allowed message size (255 Bytes).",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Authentication",
  "name": "Toybox.Authentication.OAuthMessage",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Authentication/OAuthMessage.html",
  "docstring": "An OAuthMessage received by the callback registered in [registerForOAuthMessages()](../../Toybox/Authentication.html#registerForOAuthMessages- instance_function).  Unlike the `data` in the [Message](../../Toybox/Authentication/Message.html) parent class, data in an OAuthMessage should always be a [Dictionary](../../Toybox/Lang/Dictionary.html).",
  "attributes": [
    {
      "name": "responseCode",
      "docstring": "An HTTP response code (positive value) or BLE error code (negative value).",
      "type": null,
      "nullable": false,
      "returns": "Lang.Number"
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Attention",
  "name": "Toybox.Attention.VibeProfile",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Attention/VibeProfile.html",
  "docstring": "Define a vibration pattern.  Vibrations have two characteristics: duty cycle and length. These characteristics are used to define a single VibeProfile object, which can then be passed with a collection of other VibeProfile objects in an Array to the vibrate() method. The vibrate() method will play through each of the VibeProfile objects within the Array in order.",
  "attributes": [
    {
      "name": "dutyCycle",
      "docstring": "The strength of the vibration.  Duty cycle is the felt strength of the vibration, and is analogous in practice to the frequency of the vibration. It is specified as a value from 0 to 100%, 0 indicating no vibration and 100 indicating the strongest vibration.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "length",
      "docstring": "Length of the vibration in milliseconds (ms).",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "dutyCycleVal",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "lengthVal",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "dutyCycleVal",
          "docstring": "The strength of the vibration"
        },
        {
          "name": "lengthVal",
          "docstring": "The length of the vibration in milliseconds (ms)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Application",
  "name": "Toybox.Application.ObjectStoreAccessException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Application/ObjectStoreAccessException.html",
  "docstring": "Indicates a [Background](../../Toybox/Background.html) process has attempted to access or modify the object store.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.UserSettings",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/UserSettings.html",
  "docstring": "Represents user configurations of fitness equipment for equipment that supports simulation training mode. Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "bikeWeight",
      "docstring": "The bike weight set for simulation training mode",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "gearRatio",
      "docstring": "The gear ratio set for simulation training mode",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "userWeight",
      "docstring": "The user weight set for simulation training mode",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "wheelDiameter",
      "docstring": "The wheel diameter set for simulation training mode",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.TorqueEffectivenessPedalSmoothness",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/TorqueEffectivenessPedalSmoothness.html",
  "docstring": "The TorqueEffectivenessPedalSmoothness object represents the instantaneous torque effectiveness and pedal smoothness.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "leftOrCombinedPedalSmoothness",
      "docstring": "Left pedal smoothness if separate is supported, else it is the combined smoothness (%).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "leftTorqueEffectiveness",
      "docstring": "Left torque effectiveness.  0xFF: Invalid or negative values (%).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "rightPedalSmoothness",
      "docstring": "Right pedal smoothness (%).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "rightTorqueEffectiveness",
      "docstring": "Right torque effectiveness.  0xFF: Invalid or negative values (%).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "separatePedalSmoothnessSupport",
      "docstring": "Define if pedal smoothness is separate.",
      "type": "Lang.Boolean",
      "nullable": true,
      "returns": "Lang.Boolean"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.ActivityRecording",
  "name": "Toybox.ActivityRecording.Session",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/ActivityRecording/Session.html",
  "docstring": "Session objects control the FIT recording state machine.",
  "methods": [
    {
      "name": "addLap",
      "ast": {
        "name": "addLap",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "createField",
      "ast": {
        "name": "createField",
        "parameters": [
          {
            "name": "name",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "fieldId",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "type",
            "types": [
              {
                "type": "FitContributor.DataType"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":count",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":mesgType",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":units",
                    "types": [
                      {
                        "type": "Lang.String"
                      }
                    ]
                  },
                  {
                    "name": ":nativeNum",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "FitContributor.Field"
          }
        ]
      },
      "parameters": [
        {
          "name": "name",
          "docstring": "The name of the Field as a String    * The maximum length may vary between products     * At least 64 bytes are available",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        },
        {
          "name": "fieldId",
          "docstring": "The unique Field Identifier for the Field"
        },
        {
          "name": "type",
          "docstring": "The type definition for the Field from the DATA_TYPE_* enumerator in the [FitContributor](../../Toybox/FitContributor.html) module"
        },
        {
          "name": "options",
          "docstring": "Optional parameters that can be specified for Field creation",
          "dictionary_keys": [
            {
              "name": ":count",
              "docstring": "The number of elements to add to the Field if it is an Array    * This is also the maximum combined size of strings plus `null` terminators if the type is DATA_TYPE_STRING (Default 1)     * Apps are limited to 256 total bytes per message     * Data fields are limited to 32 bytes per message     * Messages larger than the limit will result in a \"New Field out of memory for FIT data\" error.",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":mesgType",
              "docstring": "The message type that this Field should be added to    * Defaults to MESG_TYPE_RECORD if not provided     * If mesgType == MESG_TYPE_RECORD, DATA_TYPE_STRING cannot be used as the Field type.",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":units",
              "docstring": "The display units as a String    * This should use the current device language     * The maximum length may vary between products     * At least 16 bytes are available",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":nativeNum",
              "docstring": "If this Field can be treated equivalently to a Field that is included in the FIT SDK use this to indicate the Field Number that is specified by the FIT Profile."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "FitContributor.Field"
      ]
    },
    {
      "name": "discard",
      "ast": {
        "name": "discard",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "isRecording",
      "ast": {
        "name": "isRecording",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "save",
      "ast": {
        "name": "save",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "setTimerEventListener",
      "ast": {
        "name": "setTimerEventListener",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "eventType",
                    "types": [
                      {
                        "type": "ActivityRecording.TimerEventType"
                      }
                    ]
                  },
                  {
                    "name": "eventData",
                    "types": [
                      {
                        "type": "Lang.Dictionary"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "A reference to a callback which must accept two arguments.    * eventType: A TIMER_EVENT_* enum that describes the event that occurred.     * eventData: A [Dictionary](../../Toybox/Lang/Dictionary.html) containing data relevant to the timer event or `null`. If eventType is TIMER_EVENT_LAP, the following are provided if available:       * `:elapsedDistance` [Float](../../Toybox/Lang/Float.html) (meters)       * `:averageSpeed` [Float](../../Toybox/Lang/Float.html) (meters/second)       * `:maxSpeed` [Float](../../Toybox/Lang/Float.html) (meters/second)       * `:startTime` [Moment](../../Toybox/Time/Moment.html) (Moment)       * `:elapsedTime` [Number](../../Toybox/Lang/Number.html) (milliseconds)       * `:timerTime` [Number](../../Toybox/Lang/Number.html) (milliseconds)",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "start",
      "ast": {
        "name": "start",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "stop",
      "ast": {
        "name": "stop",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.ActivityMonitor",
  "name": "Toybox.ActivityMonitor.Info",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/ActivityMonitor/Info.html",
  "docstring": "The ActivityMonitor.Info contains information about the user's current activity status.  The fields in this class may return `null`. It is recommended to `null` check a value before using it. If the value is not available, an error indicating that the symbol was not found will be thrown.",
  "attributes": [
    {
      "name": "activeMinutesDay",
      "docstring": "The number of active minutes for the current day.  Contains the moderate, vigorous, and total accumulated minutes for the day. Value may be `null`.",
      "type": "ActivityMonitor.ActiveMinutes",
      "nullable": true,
      "returns": "ActivityMonitor.ActiveMinutes"
    },
    {
      "name": "activeMinutesWeek",
      "docstring": "The number of active minutes for the current week.  Contains the moderate, vigorous, and total accumulated minutes for the week. Value may be `null`.",
      "type": "ActivityMonitor.ActiveMinutes",
      "nullable": true,
      "returns": "ActivityMonitor.ActiveMinutes"
    },
    {
      "name": "activeMinutesWeekGoal",
      "docstring": "The value of the active minutes goal for the current week. Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "calories",
      "docstring": "The calories burned so far for the current day in kilocalories (kCal). Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "distance",
      "docstring": "The distance since midnight for the current day in centimeters (cm). Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "floorsClimbed",
      "docstring": "The number of floors climbed for the current day. Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "floorsClimbedGoal",
      "docstring": "The current floor climb goal. Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "floorsDescended",
      "docstring": "The number of floors descended for the current day. Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "isSleepMode",
      "docstring": "Determine whether the device is in sleep mode. Value may be `null`.",
      "type": "Lang.Boolean",
      "nullable": true,
      "returns": "Lang.Boolean"
    },
    {
      "name": "metersClimbed",
      "docstring": "The vertical distance of floors climbed in meters (m).  This only counts the vertical distance associated with the floors climbed metric recorded by the device. Value may be `null`.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "metersDescended",
      "docstring": "The vertical distance of floors descended in meters (m).  This only counts the vertical distance associated with the floors descended metric recorded by the device. Value may be `null`.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "moveBarLevel",
      "docstring": "The current level of the move bar between [MOVE_BAR_LEVEL_MIN](../../Toybox/ActivityMonitor/MOVE_BAR_LEVEL_MIN.html) and [MOVE_BAR_LEVEL_MAX](../../Toybox/ActivityMonitor/MOVE_BAR_LEVEL_MAX.html). Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "pushDistance",
      "docstring": "The wheelchair push distance for the day in centimeters (cm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "pushGoal",
      "docstring": "The wheelchair push goal for the day in number of pushes.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "pushes",
      "docstring": "Wheelchair push count for the day in number of pushes.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "respirationRate",
      "docstring": "Current respiration rate for the user, in breaths per minute Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "stepGoal",
      "docstring": "The step goal for the current day in number of steps. Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "steps",
      "docstring": "The step count since midnight for the current day in number of steps. Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "timeToRecovery",
      "docstring": "Time to recovery from the last activity, in hours Value may be `null`.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Activity",
  "name": "Toybox.Activity.WorkoutStepInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Activity/WorkoutStepInfo.html",
  "docstring": "The Activity.WorkoutStepInfo class contain information about current workout.  This information can be retrieved with the [getCurrentWorkoutStep()](../../Toybox/Activity.html#getCurrentWorkoutStep- instance_function) or [getNextWorkoutStep()](../../Toybox/Activity.html#getNextWorkoutStep- instance_function) methods.",
  "attributes": [
    {
      "name": "intensity",
      "docstring": "The intensity of the step",
      "type": "Activity.WorkoutIntensity",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "name",
      "docstring": "The name of the current step",
      "type": "Lang.String",
      "nullable": false,
      "returns": "Lang.String"
    },
    {
      "name": "notes",
      "docstring": "The notes for the current step",
      "type": "Lang.String",
      "nullable": false,
      "returns": "Lang.String"
    },
    {
      "name": "sport",
      "docstring": "The sport for the workout step",
      "type": "Activity.Sport",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "step",
      "docstring": "Duration and target information about the step",
      "type": "Activity.WorkoutStep",
      "nullable": false,
      "returns": "Activity.WorkoutStep"
    },
    {
      "name": "subSport",
      "docstring": "The subsport for the workout step. Currently only valid for breathing and swim workouts",
      "type": "Activity.SubSport",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Activity",
  "name": "Toybox.Activity.WorkoutStep",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Activity/WorkoutStep.html",
  "docstring": "The Activity.WorkoutStep class contain information about current workout step",
  "attributes": [
    {
      "name": "durationType",
      "docstring": "The duration of the workout step",
      "type": "Activity.WorkoutStepDurationType",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "durationValue",
      "docstring": "How long the step should last",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "targetType",
      "docstring": "The target of the workout step",
      "type": "Activity.WorkoutStepTargetType",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "targetValueHigh",
      "docstring": "The high value for the target range.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "targetValueLow",
      "docstring": "The low value for the target range.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Activity",
  "name": "Toybox.Activity.WorkoutIntervalStep",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Activity/WorkoutIntervalStep.html",
  "docstring": "The Activity.WorkoutIntervalStep class contain information about current workout interval step",
  "attributes": [
    {
      "name": "activeStep",
      "docstring": "The step data for the active portion of the interval",
      "type": "Activity.WorkoutStep",
      "nullable": false,
      "returns": "Activity.WorkoutStep"
    },
    {
      "name": "repetitionNumber",
      "docstring": "The repetition number in the interval",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "restStep",
      "docstring": "The step data for the rest portion of the interval",
      "type": "Activity.WorkoutStep",
      "nullable": false,
      "returns": "Activity.WorkoutStep"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Activity",
  "name": "Toybox.Activity.ProfileInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Activity/ProfileInfo.html",
  "docstring": "The Activity.ProfileInfo class contains information about the active profile.  This information can be retrieved with the [getProfileInfo()](../../Toybox/Activity.html#getProfileInfo- instance_function) method. Fields in this class may return `null` so should be checked for `null` values prior to use.",
  "attributes": [
    {
      "name": "name",
      "docstring": "The profile name",
      "type": "Lang.String",
      "nullable": true,
      "returns": "Lang.String"
    },
    {
      "name": "sport",
      "docstring": "An Activity.SPORT_* enum value",
      "type": "Activity.Sport",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "subSport",
      "docstring": "An Activity.SUB_SPORT_* enum value. Can be `null`.",
      "type": "Activity.SubSport",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "uniqueIdentifier",
      "docstring": "An unique identifer of the profile",
      "type": "Lang.ByteArray",
      "nullable": true,
      "returns": "Lang.ByteArray"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Activity",
  "name": "Toybox.Activity.Info",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Activity/Info.html",
  "docstring": "The Activity.Info class contains information about the current activity.  This information can be retrieved with the [getActivityInfo()](../../Toybox/Activity.html#getActivityInfo- instance_function) method. Fields in this class may return `null` so should be checked for `null` values prior to use.",
  "attributes": [
    {
      "name": "altitude",
      "docstring": "The altitude above mean sea level in meters (m).  Elevation is derived from the most accurate source: Barometer or GPS",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "ambientPressure",
      "docstring": "The ambient pressure in Pascals (Pa).  This returns ambient (local) barometric pressure as measured by the pressure sensor. The data is smoothed by a two-stage filter to reduce noise and instantaneous variation.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "averageCadence",
      "docstring": "The average cadence during the current activity in revolutions per minute (rpm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "averageDistance",
      "docstring": "The average swim stroke distance from the previous interval in meters (m).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "averageHeartRate",
      "docstring": "The average heart rate during the current activity in beats per minute (bpm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "averagePower",
      "docstring": "The average power during the current activity in Watts (W).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "averageSpeed",
      "docstring": "The average speed during the current activity in meters per second (mps).  The average is computed as the elapsed 3-D accumulated distance divided by the elapsed time.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "bearing",
      "docstring": "The current bearing in radians.  Bearing is the direction from your current location or position to the destination of navigation, dependent on your current location.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "bearingFromStart",
      "docstring": "The bearing from the starting location to the destination in radians.  Bearing from start is the direction of desired track from the start of navigation to the destination in radians. This is only dependent on your location when a course is set, and it is not dependent on where you may have moved to during an activity",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "calories",
      "docstring": "The calories burned throughout the current activity in kilocalories (kcal).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "currentCadence",
      "docstring": "The current cadence in revolutions per minute (rpm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "currentHeading",
      "docstring": "The true north referenced heading in radians.  This provides compass orientation if it is supported by the device.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "currentHeartRate",
      "docstring": "The current heart rate in beats per minute (bpm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "currentLocation",
      "docstring": "The current location.  This member will always provide a `null` value unless the Positioning Permission is enabled.",
      "type": "Position.Location",
      "nullable": true,
      "returns": "Position.Location"
    },
    {
      "name": "currentLocationAccuracy",
      "docstring": "The current GPS accuracy.  GPS accuracy values range from 0-4. A value of 0 indicates an accuracy value is not available, while a value of 4 indicates a good GPS fix.",
      "type": "Position.Quality",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "currentOxygenSaturation",
      "docstring": "The current oxygen saturation in percent (%)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "currentPower",
      "docstring": "The current power in Watts (W).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "currentSpeed",
      "docstring": "The current speed in meters per second (mps).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "distanceToDestination",
      "docstring": "The distance to the destination in meters (m).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "distanceToNextPoint",
      "docstring": "The distance to the next point in meters (m).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "elapsedDistance",
      "docstring": "The elapsed distance of the current activity in meters (m).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "elapsedTime",
      "docstring": "Elapsed time of the current activity in milliseconds (ms).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "elevationAtDestination",
      "docstring": "The elevation at the destination in meters (m).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "elevationAtNextPoint",
      "docstring": "The elevation at the next point in meters (m).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "energyExpenditure",
      "docstring": "The current energy expenditure in kilocalories per minute (kcals/min).  Energy expenditure is a metric developed by FirstBeat that provides an estimation of the calorie burn rate calculated from heart rate data.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "frontDerailleurIndex",
      "docstring": "The current front bicycle derailleur index.  Index values range from from 1 to the frontDerailleurMax.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "frontDerailleurMax",
      "docstring": "The front bicycle derailleur maximum index.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "frontDerailleurSize",
      "docstring": "The front bicycle derailleur gear size in number of teeth.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "maxCadence",
      "docstring": "The maximum cadence recorded during the current activity in revolutions per minute (rpm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "maxHeartRate",
      "docstring": "The maximum heart rate recorded during the current activity in beats per minute (bpm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "maxPower",
      "docstring": "The maximum power recorded during the current activity in Watts (W).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "maxSpeed",
      "docstring": "The maximum speed recorded during the current activity in meters per second (mps).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "meanSeaLevelPressure",
      "docstring": "The mean sea level barometric pressure in Pascals (Pa).  This returns barometric pressure calibrated to sea level. Since pressure varies dues to several factors, a GPS-based altitude must first be obtained, then the ambient (local) pressure is measured by the pressure sensor before conversion to a calibrated barometric pressure value.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "nameOfDestination",
      "docstring": "The name of the destination.",
      "type": "Lang.String",
      "nullable": true,
      "returns": "Lang.String"
    },
    {
      "name": "nameOfNextPoint",
      "docstring": "The name of the next point.",
      "type": "Lang.String",
      "nullable": true,
      "returns": "Lang.String"
    },
    {
      "name": "offCourseDistance",
      "docstring": "The distance to the nearest point on the current course in meters (m).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "rawAmbientPressure",
      "docstring": "The raw ambient pressure in Pascals (Pa).  This returns ambient (local) barometric pressure as measured by the internal pressure sensor. The data is the temperature compensated information read directly from the internal sensor.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "rearDerailleurIndex",
      "docstring": "The current rear bicycle derailleur index.  Index values range from from 1 to the rearDerailleurMax.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "rearDerailleurMax",
      "docstring": "The rear bicycle derailleur maximum index.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "rearDerailleurSize",
      "docstring": "The rear bicycle derailleur gear size in number of teeth.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "startLocation",
      "docstring": "The starting location of the current activity.  This member will always provide a `null` value unless the Positioning Permission is enabled.",
      "type": "Position.Location",
      "nullable": true,
      "returns": "Position.Location"
    },
    {
      "name": "startTime",
      "docstring": "The starting time of the current activity.",
      "type": "Time.Moment",
      "nullable": true,
      "returns": "Time.Moment"
    },
    {
      "name": "swimStrokeType",
      "docstring": "The swim stroke type from the previous length.  Swim stroke type values range from 0-6. Each Number value represents a different swim stroke type (e.g. freestyle, backstroke, etc.).",
      "type": "Activity.SwimStrokeType",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "swimSwolf",
      "docstring": "The SWOLF score from the previous length.  SWOLF is an abbreviation for Swim-Golf, a measure of swimming efficiency. The score is obtained by adding the strokes per length to the total time of the length. For example, if it takes ten strokes and thirty seconds to swim a pool length, the SWOLF score is 40. Just like golf, a lower SWOLF score is better.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "timerState",
      "docstring": "The recording timer state.  The timer state ranges from 0-3. A value of 0 indicates that the timer is off and there is no active recording, while a value of 3 indicates timer is on and there is an active recording.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "timerTime",
      "docstring": "The current Timer value in milliseconds (ms).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "totalAscent",
      "docstring": "The total ascent during the current activity in meters (m).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "totalDescent",
      "docstring": "The total descent during the current activity in meters (m).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "track",
      "docstring": "The current track in radians.  Track is the direction of travel in radians based on GPS movement. If supported by the device, this provides compass orientation when stopped.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "trainingEffect",
      "docstring": "The Training Effect score of the current activity.  Training Effect is a score developed by FirstBeat, which indicates an activity's level of effect on aerobic fitness. Scores range from 1.0 (easy) to 5.0 (overreaching).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.ActivityMonitor",
  "name": "Toybox.ActivityMonitor.History",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/ActivityMonitor/History.html",
  "docstring": "A class containing information about the user's activity history.  The fields in this class may return `null`. It is recommended to `null` check a value before using it. If the value is not available, an error indicating that the symbol was not found will be thrown.",
  "attributes": [
    {
      "name": "activeMinutes",
      "docstring": "Number of active minutes.  Contains the moderate, vigorous, and total accumulated minutes for the day.",
      "type": "ActivityMonitor.ActiveMinutes",
      "nullable": true,
      "returns": "ActivityMonitor.ActiveMinutes"
    },
    {
      "name": "calories",
      "docstring": "The calories for the day in kilocalories (kCal).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "distance",
      "docstring": "The distance for the day in centimeters (cm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "floorsClimbed",
      "docstring": "The number of floors climbed for the day.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "floorsClimbedGoal",
      "docstring": "Floors climbed goal for the day.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "floorsDescended",
      "docstring": "The number of floors descended for the day.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "pushDistance",
      "docstring": "The wheelchair push distance for the day in centimeters (cm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "pushGoal",
      "docstring": "The wheelchair push goal for the day in number of pushes.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "pushes",
      "docstring": "Wheelchair push count for the day in number of pushes.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "startOfDay",
      "docstring": "A [Moment](../../Toybox/Time/Moment.html) object representing the start time of the day recorded by this History object",
      "type": "Time.Moment",
      "nullable": true,
      "returns": "Time.Moment"
    },
    {
      "name": "stepGoal",
      "docstring": "The step goal for the day in number of steps.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "steps",
      "docstring": "The step count for the day in number of steps.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.ActivityMonitor",
  "name": "Toybox.ActivityMonitor.HeartRateSample",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/ActivityMonitor/HeartRateSample.html",
  "docstring": "A class containing heart rate data at a given time.",
  "attributes": [
    {
      "name": "heartRate",
      "docstring": "Heart rate in beats per minute (bpm).  Before using heart rate information, check for [INVALID_HR_SAMPLE](../../Toybox/ActivityMonitor/INVALID_HR_SAMPLE.html) to be sure data is available.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "when",
      "docstring": "The time of the heart rate sample",
      "type": "Time.Moment",
      "nullable": true,
      "returns": "Time.Moment"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.ActivityMonitor",
  "name": "Toybox.ActivityMonitor.HeartRateIterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/ActivityMonitor/HeartRateIterator.html",
  "docstring": "A class containing heart rate data for a given period of time.",
  "methods": [
    {
      "name": "getMax",
      "ast": {
        "name": "getMax",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getMin",
      "ast": {
        "name": "getMin",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "ActivityMonitor.HeartRateSample"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "ActivityMonitor.HeartRateSample"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.ActivityMonitor",
  "name": "Toybox.ActivityMonitor.ActiveMinutes",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/ActivityMonitor/ActiveMinutes.html",
  "docstring": "A class representing the active minutes recorded by the device.",
  "attributes": [
    {
      "name": "moderate",
      "docstring": "The total number of moderate activity minutes recorded by the device.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "total",
      "docstring": "The total number of active minutes recorded by the device.  This value is equal to the total number of moderate minutes plus twice the total number of vigorous minutes.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "vigorous",
      "docstring": "The total number of vigorous activity minutes recorded by the device.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.UnableToAcquireEncryptedChannelException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/UnableToAcquireEncryptedChannelException.html",
  "docstring": "Thrown if the Encryption Manager's enableEncryption is unable to acquire an encryption channel either because there are too many encrypted channels or an error occurred while acquiring an encrypted channel.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.UnableToAcquireChannelException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/UnableToAcquireChannelException.html",
  "docstring": "Thrown if the [GenericChannel.initialize()](../../Toybox/Ant/GenericChannel.html#initialize- instance_function) is unable to acquire an ANT channel from the system. This indicates that all available ANT channels are in use.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.Message",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/Message.html",
  "docstring": "A class to hold and define the information in an ANT wireless data payload.",
  "attributes": [
    {
      "name": "deviceNumber",
      "docstring": "The Unique device number (ANT-id).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    },
    {
      "name": "deviceType",
      "docstring": "A 1-Byte device type identifier.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    },
    {
      "name": "length",
      "docstring": "Number of data bytes in the data payload (not including any extended data if applicable).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    },
    {
      "name": "messageId",
      "docstring": "The Data Type Identifier",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    },
    {
      "name": "rssi",
      "docstring": "The Received Signal Strength Indication.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    },
    {
      "name": "timestamp",
      "docstring": "The time stamp of received message generated off of a 32.768 kHz clock.  Rolls over every 2 seconds.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    },
    {
      "name": "transmissionType",
      "docstring": "The manufacturer-specific transport type and extended device number.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    }
  ],
  "methods": [
    {
      "name": "getPayload",
      "ast": {
        "name": "getPayload",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "setPayload",
      "ast": {
        "name": "setPayload",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Number"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "An Array of Numbers as integers representing the bytes of the data payload"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.GenericChannel",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/GenericChannel.html",
  "docstring": "A class for controlling an ANT wireless channel.  The GenericChannel provides the methods necessary for initialization, life cycle, and encryption of ANT channels.",
  "methods": [
    {
      "name": "close",
      "ast": {
        "name": "close",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "disableEncryption",
      "ast": {
        "name": "disableEncryption",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "enableEncryption",
      "ast": {
        "name": "enableEncryption",
        "parameters": [
          {
            "name": "configuration",
            "types": [
              {
                "type": "Ant.CryptoConfig"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "configuration",
          "docstring": "The CryptoConfig object to set for the current channel"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Ant.EncryptionInvalidSettingsException"
          ],
          "docstring": "Thrown if invalid encryption settings are used"
        },
        {
          "types": [
            "Ant.UnableToAcquireEncryptedChannelException"
          ],
          "docstring": "Thrown if an ecrypted channel cannot be acquired because all channels are in use"
        }
      ],
      "returns": []
    },
    {
      "name": "getDeviceConfig",
      "ast": {
        "name": "getDeviceConfig",
        "parameters": [],
        "returns": [
          {
            "type": "Ant.DeviceConfig"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Ant.DeviceConfig"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "Lang.Method",
                "parameters": [
                  {
                    "name": "msg",
                    "types": [
                      {
                        "type": "Ant.Message"
                      }
                    ]
                  }
                ],
                "returns": [
                  {
                    "type": "Void"
                  }
                ]
              }
            ]
          },
          {
            "name": "channelAssignment",
            "types": [
              {
                "type": "Ant.ChannelAssignment"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "The Method object to call with channel messages"
        },
        {
          "name": "channelAssignment",
          "docstring": "The ChannelAssignment object for the channel"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Ant.UnableToAcquireChannelException"
          ],
          "docstring": "Thrown if the the system does not have a channel available."
        }
      ],
      "returns": []
    },
    {
      "name": "open",
      "ast": {
        "name": "open",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "release",
      "ast": {
        "name": "release",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "sendAcknowledge",
      "ast": {
        "name": "sendAcknowledge",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Ant.Message"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "An 8 byte data packet as an Array of 8 numbers"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "sendBroadcast",
      "ast": {
        "name": "sendBroadcast",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Ant.Message"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "An 8 byte data packet as an Array of 8 numbers"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "sendBurst",
      "ast": {
        "name": "sendBurst",
        "parameters": [
          {
            "name": "burstData",
            "types": [
              {
                "type": "Ant.BurstPayload"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "burstData",
          "docstring": "The data to burst across the channel"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.SymbolNotAllowedException"
          ],
          "docstring": "Thrown if called from a data field app"
        }
      ],
      "returns": []
    },
    {
      "name": "setBurstListener",
      "ast": {
        "name": "setBurstListener",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "Ant.BurstListener"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "An extension of the BurstListener class"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.SymbolNotAllowedException"
          ],
          "docstring": "Thrown if called from a data field app"
        }
      ],
      "returns": []
    },
    {
      "name": "setDeviceConfig",
      "ast": {
        "name": "setDeviceConfig",
        "parameters": [
          {
            "name": "configuration",
            "types": [
              {
                "type": "Ant.DeviceConfig"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "configuration",
          "docstring": "The DeviceConfig object to set for the current ANT channel"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.EncryptionInvalidSettingsException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/EncryptionInvalidSettingsException.html",
  "docstring": "Thrown if encryption settings are invalid and cannot be used to complete the request for an encrypted channel.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.DeviceConfig",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/DeviceConfig.html",
  "docstring": "A class to define the ANT wireless channel device configuration.",
  "attributes": [
    {
      "name": "deviceNumber",
      "docstring": "The unique device number (ANT-id)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "deviceType",
      "docstring": "A 1-Byte device type identifier",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "messagePeriod",
      "docstring": "The Message period that the sensor uses",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "networkKey128Bit",
      "docstring": "A 128 bit network key",
      "type": "Lang.Array",
      "nullable": true,
      "returns": null
    },
    {
      "name": "networkKey64Bit",
      "docstring": "A 64 bit network key",
      "type": "Lang.Array",
      "nullable": true,
      "returns": null
    },
    {
      "name": "radioFrequency",
      "docstring": "The radio frequency that the sensor operates on",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "searchThreshold",
      "docstring": "The proximity threshold bin",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "searchTimeoutHighPriority",
      "docstring": "High Priority search timeout that a receiving channel will wait for in order to start tracking a master    * Measured in 2.5s increments     * Limited to a maximum of 5 seconds (Range of 0 to 2)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "searchTimeoutLowPriority",
      "docstring": "The low Priority search timeout that a receiving channel will wait for in order to start tracking a master    * Measured in 2.5s increments     * Limited to a maximum of 30 seconds (Range of 0 to 12)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "transmissionType",
      "docstring": "The manufacturer-specific transport type and extended device number",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":deviceNumber",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":deviceType",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":transmissionType",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":messagePeriod",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":radioFrequency",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":searchTimeoutLowPriority",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":searchTimeoutHighPriority",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":searchThreshold",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":networkKey64Bit",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Number"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":networkKey128Bit",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Number"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "The initialization options",
          "dictionary_keys": [
            {
              "name": ":deviceNumber",
              "docstring": "The ANT-id of the device to search for. Not setting enables a wild card search"
            },
            {
              "name": ":deviceType",
              "docstring": "1-Byte device type identifier"
            },
            {
              "name": ":transmissionType",
              "docstring": "The manufacturer-specific transport type and extended device number"
            },
            {
              "name": ":messagePeriod",
              "docstring": "The message period that the sensor uses"
            },
            {
              "name": ":radioFrequency",
              "docstring": "The radio frequency that the sensor operates on. Range of 2 to 80."
            },
            {
              "name": ":searchTimeoutLowPriority",
              "docstring": "The Low Priority search timeout that a receiving channel will wait for in order to start tracking a master    * Low Priority search provides the capability of searching for a master without interrupting other channels on the device     * Range of 0 to 12 (2.5s increments)     * Default 6 (15s)",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":searchTimeoutHighPriority",
              "docstring": "The High Priority search timeout that a receiving channel will wait for in order to start tracking a master    * Is triggered after the Low Priority search mode times out     * Will interrupt other channels     * Will take priority over any other open channels on that device     * If it overlaps another channel the High Priority search takes priority and that other channel is blocked     * Keeping this search type disabled unless you have great difficulty acquiring a master through Low Priority search is recommended     * High Priority searches are disabled in data-fields, and will be ignored for that application type     * Range of 0 to 2 (2.5s increments)     * Default 0 (disabled)",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":searchThreshold",
              "docstring": "A proximity threshold bin as a Number    * Configures the RSSI threshold a slave channel will search for which is effectively the distance at which a slave is willing to be from a master     * Values are 0 (disabled), 1 (closest), 10 (farthest)",
              "dictionary_keys": [
                {
                  "docstring": ""
                },
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "name": ":networkKey64Bit",
              "docstring": "64 bit network key    * Set this when NETWORK_PRIVATE was chosen in the channel assignment",
              "dictionary_keys": [
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            },
            {
              "name": ":networkKey128Bit",
              "docstring": "128 bit network key    * Set this when NETWORK_PRIVATE was chosen in the channel assignment",
              "dictionary_keys": [
                {
                  "docstring": ""
                }
              ]
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.CryptoConfig",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/CryptoConfig.html",
  "docstring": "A class to handle encryption of ANT wireless data.",
  "attributes": [
    {
      "name": "decimationRate",
      "docstring": "The division factor of the encryption counter",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "encryptionId",
      "docstring": "The unique 4 byte identifier of the encrypted master or the negotiating slave.",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "encryptionKey",
      "docstring": "The 128-bit encryption key used to encrypt/decrypt ANT packets.",
      "type": "Lang.Array",
      "nullable": false,
      "returns": null
    },
    {
      "name": "userInfoString",
      "docstring": "The (optional) user information String to be sent to the master channel on successful negotiation of encryption (Slave channels only).",
      "type": "Lang.Array",
      "nullable": false,
      "returns": null
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":encryptionId",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":encryptionKey",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Number"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":userInfoString",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Lang.Number"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":decimationRate",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "The Dictionary of options for the configuration",
          "dictionary_keys": [
            {
              "name": ":encryptionId",
              "docstring": "a Number (uint32) to uniquely identify a device during encryption negotiation"
            },
            {
              "name": ":encryptionKey",
              "docstring": "The key which will be used to encrypt/decrypt ANT packets as an Array of bytes"
            },
            {
              "name": ":userInfoString",
              "docstring": "The string to send during negotiation to the master channel (only used when the channel is configured as a slave) as an Array of bytes"
            },
            {
              "name": ":decimationRate",
              "docstring": "A [Number](../../Toybox/Lang/Number.html) with range 1-255 used for division of the master channel rate by the slave's"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.ChannelAssignment",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/ChannelAssignment.html",
  "docstring": "A class to control the assignment of an ANT wireless channel.",
  "attributes": [
    {
      "name": "channelType",
      "docstring": "Defines the type of channel.  The channel can be defined to primarily send data (master) or receive data(slave). The channel type is set via the CHANNEL_TYPE_* constant passed to the [Ant.ChannelAssignment.initialize()](../../Toybox/Ant/ChannelAssignment.html#initialize- instance_function) function for the `channelType` parameter.",
      "type": "Ant.ChannelType",
      "nullable": false,
      "returns": null
    },
    {
      "name": "network",
      "docstring": "Defines the type of network the channel should operate under.  The network is set via the NETWORK_* constant passed to the [Ant.ChannelAssignment.initialize()](../../Toybox/Ant/ChannelAssignment.html#initialize- instance_function) function for the `network` parameter.",
      "type": "Ant.NetworkType",
      "nullable": false,
      "returns": null
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "c",
            "types": [
              {
                "type": "Ant.ChannelType"
              }
            ]
          },
          {
            "name": "n",
            "types": [
              {
                "type": "Ant.NetworkType"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "c",
          "docstring": "The channel type specifier. Must use one of the following constants.    * CHANNEL_TYPE_TX_NOT_RX - Bidirectional Transmit (Master)       * Master Channels are not allowed on the ANT+ Network     * CHANNEL_TYPE_RX_NOT_TX - Bidirectional Receive (Slave)     * CHANNEL_TYPE_RX_ONLY - Receive Only (Slave)",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        },
        {
          "name": "n",
          "docstring": "The network type specifier. Must use one of the following constants.    * NETWORK_PUBLIC - ANT public network     * NETWORK_PLUS - ANT+ network     * NETWORK_PRIVATE - ANT private network       * A network key must be provided for an Private Network       * Both 64 and 128 bit keys are required",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "isBackgroundScanEnabled",
      "ast": {
        "name": "isBackgroundScanEnabled",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "setBackgroundScan",
      "ast": {
        "name": "setBackgroundScan",
        "parameters": [
          {
            "name": "isBackgroundScanEnabled",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "isBackgroundScanEnabled",
          "docstring": "Value is `true` to enable background scan, otherwise `false`."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.BurstPayloadIterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/BurstPayloadIterator.html",
  "docstring": "An iterator to use with a [BurstPayload](../../Toybox/Ant/BurstPayload.html).  The BurstPayloadIterator is used to iterate over the BurstPayload and and access each data packet.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "newBurstPayload",
            "types": [
              {
                "type": "Ant.BurstPayload"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "newBurstPayload",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.BurstPayload",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/BurstPayload.html",
  "docstring": "A class containing Burst payload data.  The payload data is provided in the form of [Ant.Message](../../Toybox/Ant/Message.html) objects. The default max size of a `BurstPayload` is 8192 bytes, or 1024 [Message](../../Toybox/Ant/Message.html) objects. However, this can vary by device.",
  "methods": [
    {
      "name": "add",
      "ast": {
        "name": "add",
        "parameters": [
          {
            "name": "message",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Number"
                  }
                ]
              },
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "message",
          "docstring": "An Array of integers representing the bytes of the data payload"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getSize",
      "ast": {
        "name": "getSize",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Ant",
  "name": "Toybox.Ant.BurstListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Ant/BurstListener.html",
  "docstring": "A class that provides a set of callback methods to handle the different burst transmission scenarios in the Ant SDK.",
  "methods": [
    {
      "name": "onReceiveComplete",
      "ast": {
        "name": "onReceiveComplete",
        "parameters": [
          {
            "name": "burstPayload",
            "types": [
              {
                "type": "Ant.BurstPayload"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "burstPayload",
          "docstring": "The BurstPayload received"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onReceiveFail",
      "ast": {
        "name": "onReceiveFail",
        "parameters": [
          {
            "name": "errorCode",
            "types": [
              {
                "type": "Ant.BurstError"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "errorCode",
          "docstring": "The type of burst failure that occurred as a BURST_ERROR_* constant"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTransmitComplete",
      "ast": {
        "name": "onTransmitComplete",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTransmitFail",
      "ast": {
        "name": "onTransmitFail",
        "parameters": [
          {
            "name": "errorCode",
            "types": [
              {
                "type": "Ant.BurstError"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "errorCode",
          "docstring": "The type of burst failure that occurred as a BURST_ERROR_* constant"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.TargetPowerSettings",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/TargetPowerSettings.html",
  "docstring": "Represents the target power set on fitness equipment when the equipment is in target power training mode. Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "targetPower",
      "docstring": "The target power set for the Fitness Equipment",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.SimulationSettings",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/SimulationSettings.html",
  "docstring": "Represents the wind and track simulation training mode settings on the fitness equipment. Fields may return `null` so you should `null` check values before using them. Values that have not yet been set will return invalid.",
  "attributes": [
    {
      "name": "draftFactor",
      "docstring": "The simulated draft factor setting for simulation mode A draft factor of 0 removes all wind resistance, and 1.0 indicates no drafting effects.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "slope",
      "docstring": "The slope (grade) setting of the simulated track",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "surfaceResistance",
      "docstring": "The simulated surface resistance coefficient for simulation mode. Dimensionless factor to quantify rolling resistance based on friction between bicycle tires and the tracker surface. Rolling Resistance [N] = (Bicycle Mass + Cyclist Mass) x Coefficient of Rolling Resistance x 9.8 Sample coefficients: Wooden track = 0.001 Smooth Concrete = 0.002 Asphalt Road = 0.004 Rough Road = 0.008",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "windResistance",
      "docstring": "The simulated wind resistance coefficient setting for simulation mode Wind Resistance Coefficient [kg/m] = Frontal Surface Area [m2] x Drag Coefficient x Air Density [kg/m3]",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "windSpeed",
      "docstring": "The simulated wind speed setting for simulation mode",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.ShiftingStatus",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/ShiftingStatus.html",
  "docstring": "Includes the shifting system status. Fields may return `null` if there is no valid information so you should `null` check before using them.",
  "attributes": [
    {
      "name": "frontDerailleur",
      "docstring": "Front derailleur status",
      "type": "AntPlus.DerailleurStatus",
      "nullable": true,
      "returns": "AntPlus.DerailleurStatus"
    },
    {
      "name": "rearDerailleur",
      "docstring": "Rear derailleur status",
      "type": "AntPlus.DerailleurStatus",
      "nullable": true,
      "returns": "AntPlus.DerailleurStatus"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.ShiftingListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/ShiftingListener.html",
  "docstring": "Listener class for shifting",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onShiftingUpdate",
      "ast": {
        "name": "onShiftingUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.ShiftingStatus"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": ""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.Shifting",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/Shifting.html",
  "docstring": "Represents a shifting device instance",
  "methods": [
    {
      "name": "getShiftingStatus",
      "ast": {
        "name": "getShiftingStatus",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.ShiftingStatus"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.ShiftingStatus"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "AntPlus.ShiftingListener"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "An extension of the ShiftingListener class."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.SensorPosition",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/SensorPosition.html",
  "docstring": "Information about the position of the sensor on the body. Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "bodyLocation",
      "docstring": "AntPlus.BODY_LOCATION_*",
      "type": "AntPlus.BodyLocation",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "orientation",
      "docstring": "AntPlus.SENSOR_ORIENTATION_*",
      "type": "AntPlus.SensorOrientation",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.RunningDynamicsListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/RunningDynamicsListener.html",
  "docstring": "Listener class for Running Dynamics.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onRunningDynamicsUpdate",
      "ast": {
        "name": "onRunningDynamicsUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.RunningDynamicsData"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Data with updated running dynamics information."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onSensorPositionUpdate",
      "ast": {
        "name": "onSensorPositionUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.SensorPosition"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Data with updated sensor position information."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.RunningDynamicsData",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/RunningDynamicsData.html",
  "docstring": "All running dynamics information. Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "cadence",
      "docstring": "Filtered instantaneous cadence (0 - 255 strides/min)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "groundContactBalance",
      "docstring": "Filtered instantaneous ground contact balance (0 - 100%, 0.03125% precision)",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "groundContactTime",
      "docstring": "Filtered instantaneous ground contact time (0 - 2047 ms)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "stanceTime",
      "docstring": "Filtered instantaneous stance time percentage (0 - 100%, 0.25% precision)",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "stepCount",
      "docstring": "Step count (rolls over!) (0 - 127 steps)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "stepLength",
      "docstring": "Step Length (0 - 8191 mm)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "verticalOscillation",
      "docstring": "Filtered instantaneous vertical oscillation (0 - 2047 mm, 0.25mm precision)",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "verticalRatio",
      "docstring": "Vertical ratio (0 - 100%, 0.03125% precision)",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "walkingFlag",
      "docstring": "`true` if walking, `false` if running",
      "type": "Lang.Boolean",
      "nullable": true,
      "returns": "Lang.Boolean"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.RunningDynamics",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/RunningDynamics.html",
  "docstring": "Represents a Running Dynamics Device instance.",
  "methods": [
    {
      "name": "getRunningDynamics",
      "ast": {
        "name": "getRunningDynamics",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.RunningDynamicsData"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.RunningDynamicsData"
      ]
    },
    {
      "name": "getSensorPosition",
      "ast": {
        "name": "getSensorPosition",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.SensorPosition"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.SensorPosition"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "AntPlus.RunningDynamicsListener"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "The running dynamics instance optionally takes an extension of the [RunningDynamicsListener](../../Toybox/AntPlus/RunningDynamicsListener.html) class as a parameter. `null` can be passed in instead if the user plans to only poll for data using the get* methods."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.ResistanceSettings",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/ResistanceSettings.html",
  "docstring": "Represents the basic resistance percentage set on fitness equipment when the equipment is in basic resistance training mode. Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "bicResistance",
      "docstring": "The resistance percentage of the fitness equipment.",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.RadarTarget",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/RadarTarget.html",
  "docstring": "Represents the radar data for a tracked radar target.",
  "attributes": [
    {
      "name": "range",
      "docstring": "Indicates the distance to the target in metres (m).",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    },
    {
      "name": "speed",
      "docstring": "Indicates the speed of the target relative to the user in metres per second (m/s).",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    },
    {
      "name": "threat",
      "docstring": "The THREAT_LEVEL_* threat value.",
      "type": "AntPlus.ThreatLevel",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "threatSide",
      "docstring": "The THREAT_SIDE_* threat position.",
      "type": "AntPlus.ThreatSide",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.ProductInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/ProductInfo.html",
  "docstring": "Class containing information from the Product Information ANT+ common page.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "serial",
      "docstring": "The serial number.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "swRevisionMain",
      "docstring": "The main software revision.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "swRevisionSupplemental",
      "docstring": "The supplemental software revision.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.PedalPowerBalance",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/PedalPowerBalance.html",
  "docstring": "The PedalPowerBalance object represents the user's power contribution between the left and right pedals.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "pedalPowerPercent",
      "docstring": "Pedal power percent (%)",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "rightPedalIndicator",
      "docstring": "Indicates the pedal contribution.",
      "type": "Lang.Boolean",
      "nullable": true,
      "returns": "Lang.Boolean"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.ManufacturerInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/ManufacturerInfo.html",
  "docstring": "A class containing information from the Manufacturer's Information ANT+ common page.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "hwRevision",
      "docstring": "The Hardware revision.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "manufacturerId",
      "docstring": "The Manufacturer ID.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "modelNumber",
      "docstring": "The Model number.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.LightNetworkListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/LightNetworkListener.html",
  "docstring": "Listener class for use with LightNetwork.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onBikeLightUpdate",
      "ast": {
        "name": "onBikeLightUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.BikeLight"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "The updated light information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onLightNetworkStateUpdate",
      "ast": {
        "name": "onLightNetworkStateUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.LightNetworkState"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "LIGHT_NETWORK_STATE_* enum value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.LightNetwork",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/LightNetwork.html",
  "docstring": "A class representing a network of bike lights",
  "methods": [
    {
      "name": "getBikeLights",
      "ast": {
        "name": "getBikeLights",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "AntPlus.LightNetworkState"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getNetworkMode",
      "ast": {
        "name": "getNetworkMode",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.LightNetworkMode"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getNetworkState",
      "ast": {
        "name": "getNetworkState",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.LightNetworkState"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "AntPlus.LightNetworkListener"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "The light network instance optionally takes an extension of the [LightNetworkListener](../../Toybox/AntPlus/LightNetworkListener.html) class as a parameter. `null` can be passed in instead if the user plans to only poll for data using the get* methods."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "restoreHeadlightsNetworkModeControl",
      "ast": {
        "name": "restoreHeadlightsNetworkModeControl",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "restoreTaillightsNetworkModeControl",
      "ast": {
        "name": "restoreTaillightsNetworkModeControl",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setHeadlightsMode",
      "ast": {
        "name": "setHeadlightsMode",
        "parameters": [
          {
            "name": "mode",
            "types": [
              {
                "type": "AntPlus.LightMode"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "mode",
          "docstring": "The LIGHT_MODE* enum value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setTaillightsMode",
      "ast": {
        "name": "setTaillightsMode",
        "parameters": [
          {
            "name": "mode",
            "types": [
              {
                "type": "AntPlus.LightMode"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "mode",
          "docstring": "The LIGHT_MODE* enum value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "toggleSignalLight",
      "ast": {
        "name": "toggleSignalLight",
        "parameters": [
          {
            "name": "left",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "left",
          "docstring": "* `true` to control left signal     * `false` to control right signal",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.FitnessEquipmentMode",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/FitnessEquipmentMode.html",
  "docstring": "Represents a fitness equipment training mode Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "bicResistanceSupported",
      "docstring": "Flag for basic resistance training mode support",
      "type": "Lang.Boolean",
      "nullable": true,
      "returns": "Lang.Boolean"
    },
    {
      "name": "mode",
      "docstring": "The current training mode of the fitness equipment",
      "type": "AntPlus.TrainerMode",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "simulationSupported",
      "docstring": "Flag for simulation training mode support",
      "type": "Lang.Boolean",
      "nullable": true,
      "returns": "Lang.Boolean"
    },
    {
      "name": "targetPowerSupported",
      "docstring": "Flag for target power training mode support",
      "type": "Lang.Boolean",
      "nullable": true,
      "returns": "Lang.Boolean"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.FitnessEquipmentListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/FitnessEquipmentListener.html",
  "docstring": "Listener class for Fitness Equipment",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onFitnessEquipmentUpdate",
      "ast": {
        "name": "onFitnessEquipmentUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.FitnessEquipmentData"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Data with updated information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.FitnessEquipmentData",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/FitnessEquipmentData.html",
  "docstring": "Represents general fitness equipment transmitted data. Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "feDistance",
      "docstring": "The elapsed distance calculated by the trainer since reset Range is always greater than or equal to 0m",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "feHeartRate",
      "docstring": "The heart rate calculated by the trainer. This may come from hand sensors, or an HRM if connected to the equipment",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "feSpeed",
      "docstring": "The speed calculated by the trainer",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.FitnessEquipment",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/FitnessEquipment.html",
  "docstring": "Represents a Fitness Equipment Device instance.",
  "methods": [
    {
      "name": "controlEquipment",
      "ast": {
        "name": "controlEquipment",
        "parameters": [
          {
            "name": "setting",
            "types": [
              {
                "type": "AntPlus.TrainerValue"
              }
            ]
          },
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Float"
              },
              {
                "type": "AntPlus.TrainerMode"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "setting",
          "docstring": "A TRAINER_* value."
        },
        {
          "name": "data",
          "docstring": "The value of the setting to be sent or TRAINER_MODE_* enum value if setting mode."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getEquipmentData",
      "ast": {
        "name": "getEquipmentData",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.FitnessEquipmentData"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.FitnessEquipmentData"
      ]
    },
    {
      "name": "getResistanceSettings",
      "ast": {
        "name": "getResistanceSettings",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.ResistanceSettings"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.ResistanceSettings"
      ]
    },
    {
      "name": "getSimulationSettings",
      "ast": {
        "name": "getSimulationSettings",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.SimulationSettings"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.SimulationSettings"
      ]
    },
    {
      "name": "getTargetPowerSettings",
      "ast": {
        "name": "getTargetPowerSettings",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.TargetPowerSettings"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.TargetPowerSettings"
      ]
    },
    {
      "name": "getTrainerMode",
      "ast": {
        "name": "getTrainerMode",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.FitnessEquipmentMode"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.FitnessEquipmentMode"
      ]
    },
    {
      "name": "getUserSettings",
      "ast": {
        "name": "getUserSettings",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.UserSettings"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.UserSettings"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "AntPlus.FitnessEquipmentListener"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "The fitness equipment instance optionally takes an extension of the [FitnessEquipmentListener](../../Toybox/AntPlus/FitnessEquipmentListener.html) class as a parameter. `null` can be passed in instead if the user plans to only poll for data using the get* methods."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setTrainerMode",
      "ast": {
        "name": "setTrainerMode",
        "parameters": [
          {
            "name": "mode",
            "types": [
              {
                "type": "AntPlus.TrainerMode"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "mode",
          "docstring": "The TRAINER_MODE_* enum value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.DeviceState",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/DeviceState.html",
  "docstring": "The DeviceState object represents the state of the device.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "deviceNumber",
      "docstring": "The current Device ID being tracked/searched for.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "state",
      "docstring": "The state of the device as an DEVICE_STATE_* value.",
      "type": "AntPlus.DeviceCurrentState",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.DeviceListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/DeviceListener.html",
  "docstring": "Listener class for Device.",
  "methods": [
    {
      "name": "onBatteryStatusUpdate",
      "ast": {
        "name": "onBatteryStatusUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.BatteryStatus"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "The data with battery status information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onDeviceStateUpdate",
      "ast": {
        "name": "onDeviceStateUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.DeviceState"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "The data with updated device state information."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onManufacturerInfoUpdate",
      "ast": {
        "name": "onManufacturerInfoUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.ManufacturerInfo"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "The data with manufacturer's information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onMessage",
      "ast": {
        "name": "onMessage",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Ant.Message"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The ANT message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onProductInfoUpdate",
      "ast": {
        "name": "onProductInfoUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.ProductInfo"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "The data with product information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onSentMessage",
      "ast": {
        "name": "onSentMessage",
        "parameters": [
          {
            "name": "status",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "sentMesgData",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":messageType",
                    "types": [
                      {
                        "type": "AntPlus.MessageType"
                      }
                    ]
                  },
                  {
                    "name": ":pageNumber",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "status",
          "docstring": "The status of the sent message a AntPlus.SENT_MESSAGE_*"
        },
        {
          "name": "sentMesgData",
          "docstring": "The dictionary will have keys for message type and page number. The message type is a AntPlus.MESSAGE_TYPE_*. The page number is byte 0 of the manufacturer specific message or the requested page number."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.Device",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/Device.html",
  "docstring": "The Device object represents an ANT+ Device instance.",
  "methods": [
    {
      "name": "getBatteryStatus",
      "ast": {
        "name": "getBatteryStatus",
        "parameters": [
          {
            "name": "identifier",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "AntPlus.BatteryStatus"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "identifier",
          "docstring": "The component identifier to retrieve battery status for    * `null` if single-component     * Light index for bike lights.",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.BatteryStatus"
      ]
    },
    {
      "name": "getComponentIdentifiers",
      "ast": {
        "name": "getComponentIdentifiers",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getDeviceState",
      "ast": {
        "name": "getDeviceState",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.DeviceState"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.DeviceState"
      ]
    },
    {
      "name": "getManufacturerInfo",
      "ast": {
        "name": "getManufacturerInfo",
        "parameters": [
          {
            "name": "identifier",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "AntPlus.ManufacturerInfo"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "identifier",
          "docstring": "The component identifier to retrieve manufacturer information for    * `null` if single-component     * Light index for bike lights",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.ManufacturerInfo"
      ]
    },
    {
      "name": "getProductInfo",
      "ast": {
        "name": "getProductInfo",
        "parameters": [
          {
            "name": "identifier",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "AntPlus.ProductInfo"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "identifier",
          "docstring": "The component identifier to retrieve product information for    * `null` if single-component     * Light index for bike lights",
          "dictionary_keys": [
            {
              "docstring": ""
            },
            {
              "docstring": ""
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.ProductInfo"
      ]
    },
    {
      "name": "sendManufacturerMessage",
      "ast": {
        "name": "sendManufacturerMessage",
        "parameters": [
          {
            "name": "message",
            "types": [
              {
                "type": "Ant.Message"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "message",
          "docstring": "The Ant message to send. Only exploration (0xE0-0xEF) and manufacturer specific (0xF0-0xFF) pages are allowed. It is recommended to contact the ANT+ group when exploration pages are used at thisisant.com. The [onSentMessage()](../../Toybox/AntPlus/DeviceListener.html#onSentMessage- instance_function) will be called to indicate sent manufacturer message status."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "AntPlus.AntPlusNotAllowedException"
          ],
          "docstring": "Thrown if the page number (byte 0) is outside the exploration and manufacturer page range."
        }
      ],
      "returns": []
    },
    {
      "name": "sendPageRequest",
      "ast": {
        "name": "sendPageRequest",
        "parameters": [
          {
            "name": "pageNumber",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "pageNumber",
          "docstring": "The requested page number. Requesting the ANTFS page (0x43) isn't allowed. Page request can change the page rotation of the sensor so they will not be allowed to be sent too frequently. Sending page requests is limited to once every 2 seconds."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "AntPlus.AntPlusNotAllowedException"
          ],
          "docstring": "Thrown if the ANTFS page is requested, if pageNumber is outside the range 0-255, or if page requests are sent to frequently."
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.DerailleurStatus",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/DerailleurStatus.html",
  "docstring": "Class that stores current status information about a connected derailleur",
  "attributes": [
    {
      "name": "gearIndex",
      "docstring": "Current gear index (for front derailleur 0 - 6, [Toybox::AntPlus::FRONT_GEAR_INVALID](../../Toybox/AntPlus/FRONT_GEAR_INVALID.html) = Unknown gear index / Error) (for rear derailleur 0 - 30, [Toybox::AntPlus::REAR_GEAR_INVALID](../../Toybox/AntPlus/REAR_GEAR_INVALID.html) = Unknown gear index / Error)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "gearMax",
      "docstring": "Number of gears installed (1 - 7, [Toybox::AntPlus::MAX_GEARS_INVALID](../../Toybox/AntPlus/MAX_GEARS_INVALID.html) = Unknown gear count / Error) (1 - 31, [Toybox::AntPlus::MAX_GEARS_INVALID](../../Toybox/AntPlus/MAX_GEARS_INVALID.html) = Unknown gear count / Error)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "gearSize",
      "docstring": "Current gear size (number of teeth, 0 - 255)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "invalidInboardShiftCount",
      "docstring": "Number of invalid inboard shifts (0 - 255)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "invalidOutboardShiftCount",
      "docstring": "Number of invalid outboard shifts (0 - 255)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "shiftFailureCount",
      "docstring": "Number of shift failures (0 - 255)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.CalculatedWheelSpeed",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/CalculatedWheelSpeed.html",
  "docstring": "The CalculatedWheelSpeed object represents the average calculated speed.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "speed",
      "docstring": "The average speed calculated from the sensor data in meters per second (m/s).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.CommonData",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/CommonData.html",
  "docstring": "The CommonData object represents the information shared across all common data types.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "identifier",
      "docstring": "The Component Identifier.  Component IDs are defined on a by-ANT+-profile basis.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "numComponents",
      "docstring": "Number of components in the system.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.CalculatedWheelDistance",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/CalculatedWheelDistance.html",
  "docstring": "The CalculatedWheelDistance object represents the accumulated distance.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "distance",
      "docstring": "The accumulated distance calculated from sensor data in meters (m).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.CalculatedPower",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/CalculatedPower.html",
  "docstring": "Represents the calculated power.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "power",
      "docstring": "The average power calculated from the sensor data in watts (W).",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "powerSensorType",
      "docstring": "The BIKE_POWER_SENSOR_TYPE_* value of the bike power sensor.",
      "type": "AntPlus.BikePowerSensorType",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.CalculatedCadence",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/CalculatedCadence.html",
  "docstring": "The calculated crank cadence.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "cadence",
      "docstring": "Average crank cadence calculated from the sensor data in rounds per minute (rpm).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "powerSensorType",
      "docstring": "The BIKE_POWER_SENSOR_TYPE_* value of the bike power sensor.",
      "type": "AntPlus.BikePowerSensorType",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeSpeedListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeSpeedListener.html",
  "docstring": "Listener class for Bike Speed",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onBikeSpeedUpdate",
      "ast": {
        "name": "onBikeSpeedUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.BikeSpeedInfo"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "data Data with updated speed and distance information."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeSpeedInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeSpeedInfo.html",
  "docstring": "Represents received bike speed information.",
  "attributes": [
    {
      "name": "distance",
      "docstring": "Distance (m)",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    },
    {
      "name": "speed",
      "docstring": "Speed (m/s)",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeSpeedCadenceListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeSpeedCadenceListener.html",
  "docstring": "Listener class for Bike Speed Cadence",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onBikeSpeedCadenceUpdate",
      "ast": {
        "name": "onBikeSpeedCadenceUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.BikeSpeedCadenceInfo"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "data Data with updated speed / cadence information."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeSpeedCadenceInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeSpeedCadenceInfo.html",
  "docstring": "Represents received bike speed and cadence information.",
  "attributes": [
    {
      "name": "cadence",
      "docstring": "Cadence (rpm)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "distance",
      "docstring": "Distance (m)",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    },
    {
      "name": "speed",
      "docstring": "Speed (m/s)",
      "type": "Lang.Float",
      "nullable": false,
      "returns": "Lang.Float"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeSpeedCadence",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeSpeedCadence.html",
  "docstring": "Represents a Bike Speed and Cadence Device instance.",
  "methods": [
    {
      "name": "getSpeedCadenceInfo",
      "ast": {
        "name": "getSpeedCadenceInfo",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.BikeSpeedCadenceInfo"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.BikeSpeedCadenceInfo"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "AntPlus.BikeSpeedCadenceListener"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "The bike speed cadence instance optionally takes an extension of the [BikeSpeedCadenceListener](../../Toybox/AntPlus/BikeSpeedCadenceListener.html) class as a parameter. `null` can be passed in instead if the user plans to only poll for data using the [getSpeedCadenceInfo](../../Toybox/AntPlus/BikeSpeedCadence.html) method."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeSpeed",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeSpeed.html",
  "docstring": "Represents a Bike Speed Device instance.",
  "methods": [
    {
      "name": "getSpeedInfo",
      "ast": {
        "name": "getSpeedInfo",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.BikeSpeedInfo"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.BikeSpeedInfo"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "AntPlus.BikeSpeedListener"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "The bike speed instance optionally takes an extension of the [BikeSpeedListener](../../Toybox/AntPlus/BikeSpeedListener.html) class as a parameter. `null` can be passed in instead if the user plans to only poll for data using the [getSpeedInfo](../../Toybox/AntPlus/BikeSpeed.html) method."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeRadarListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeRadarListener.html",
  "docstring": "Listener class for Bike Radar",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onBikeRadarUpdate",
      "ast": {
        "name": "onBikeRadarUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "AntPlus.RadarTarget"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "List of information for tracked targets (maximum of 8)."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeRadar",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeRadar.html",
  "docstring": "Represents a Bike Radar Device instance.",
  "methods": [
    {
      "name": "getRadarInfo",
      "ast": {
        "name": "getRadarInfo",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "AntPlus.RadarTarget"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "AntPlus.BikeRadarListener"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "The bike radar instance optionally takes an extension of the [BikeRadarListener](../../Toybox/AntPlus/BikeRadarListener.html) class as a parameter. `null` can be passed in instead if the user plans to only poll for data using the [getRadarInfo](../../Toybox/AntPlus/BikeRadar.html) method."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikePowerListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikePowerListener.html",
  "docstring": "Listener class for Bike Power.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onCalculatedCadenceUpdate",
      "ast": {
        "name": "onCalculatedCadenceUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.CalculatedCadence"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Data with updated cadence information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onCalculatedPowerUpdate",
      "ast": {
        "name": "onCalculatedPowerUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.CalculatedPower"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Data with updated power information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onCalculatedWheelDistanceUpdate",
      "ast": {
        "name": "onCalculatedWheelDistanceUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.CalculatedWheelDistance"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Data with updated distance information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onCalculatedWheelSpeedUpdate",
      "ast": {
        "name": "onCalculatedWheelSpeedUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.CalculatedWheelSpeed"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Data with updated speed information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onPedalPowerBalanceUpdate",
      "ast": {
        "name": "onPedalPowerBalanceUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.PedalPowerBalance"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Data with updated balance information."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onTorqueEffectivenessPedalSmoothnessUpdate",
      "ast": {
        "name": "onTorqueEffectivenessPedalSmoothnessUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.TorqueEffectivenessPedalSmoothness"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "Data with updated torque effectiveness & pedal smoothness information"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikePower",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikePower.html",
  "docstring": "Represents a Bike Power Device instance.",
  "methods": [
    {
      "name": "getCalculatedCadence",
      "ast": {
        "name": "getCalculatedCadence",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.CalculatedCadence"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.CalculatedCadence"
      ]
    },
    {
      "name": "getCalculatedPower",
      "ast": {
        "name": "getCalculatedPower",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.CalculatedPower"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.CalculatedPower"
      ]
    },
    {
      "name": "getCalculatedWheelDistance",
      "ast": {
        "name": "getCalculatedWheelDistance",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.CalculatedWheelDistance"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.CalculatedWheelDistance"
      ]
    },
    {
      "name": "getCalculatedWheelSpeed",
      "ast": {
        "name": "getCalculatedWheelSpeed",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.CalculatedWheelSpeed"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.CalculatedWheelSpeed"
      ]
    },
    {
      "name": "getPedalPowerBalance",
      "ast": {
        "name": "getPedalPowerBalance",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.PedalPowerBalance"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.PedalPowerBalance"
      ]
    },
    {
      "name": "getTorqueEffectivenessPedalSmoothness",
      "ast": {
        "name": "getTorqueEffectivenessPedalSmoothness",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.TorqueEffectivenessPedalSmoothness"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.TorqueEffectivenessPedalSmoothness"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "AntPlus.BikePowerListener"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "The bike power instance optionally takes an extension of the [BikePowerListener](../../Toybox/AntPlus/BikePowerListener.html) class as a parameter. `null` can be passed in instead if the user plans to only poll for data using the getCalculated* methods."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeLight",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeLight.html",
  "docstring": "A class representing a bike light sensor.",
  "attributes": [
    {
      "name": "mode",
      "docstring": "The LIGHT_MODE_* mode of the light.",
      "type": "AntPlus.LightMode",
      "nullable": false,
      "returns": "Lang.Number"
    },
    {
      "name": "type",
      "docstring": "The LIGHT_TYPE_* type of the light.",
      "type": "AntPlus.LightType",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ],
  "methods": [
    {
      "name": "getCapableModes",
      "ast": {
        "name": "getCapableModes",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "AntPlus.LightMode"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setMode",
      "ast": {
        "name": "setMode",
        "parameters": [
          {
            "name": "mode",
            "types": [
              {
                "type": "AntPlus.LightMode"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "mode",
          "docstring": "The LIGHT_MODE* enum number value"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeCadenceListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeCadenceListener.html",
  "docstring": "Listener class for Bike Cadence",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onBikeCadenceUpdate",
      "ast": {
        "name": "onBikeCadenceUpdate",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "AntPlus.BikeCadenceInfo"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "data Data with updated cadence information."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeCadenceInfo",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeCadenceInfo.html",
  "docstring": "Represents received bike cadence information.",
  "attributes": [
    {
      "name": "cadence",
      "docstring": "Cadence (rpm)",
      "type": "Lang.Number",
      "nullable": false,
      "returns": "Lang.Number"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BikeCadence",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BikeCadence.html",
  "docstring": "Represents a Bike Cadence Device instance.",
  "methods": [
    {
      "name": "getCadenceInfo",
      "ast": {
        "name": "getCadenceInfo",
        "parameters": [],
        "returns": [
          {
            "type": "AntPlus.BikeCadenceInfo"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "AntPlus.BikeCadenceInfo"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "listener",
            "types": [
              {
                "type": "AntPlus.BikeCadenceListener"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "listener",
          "docstring": "The bike cadence instance optionally takes an extension of the [BikeCadenceListener](../../Toybox/AntPlus/BikeCadenceListener.html) class as a parameter. `null` can be passed in instead if the user plans to only poll for data using the [getCadenceInfo](../../Toybox/AntPlus/BikeCadence.html) method."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.BatteryStatus",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/BatteryStatus.html",
  "docstring": "A class containing information from the Battery Status ANT+ common page.  Fields may return `null` so you should `null` check values before using them.",
  "attributes": [
    {
      "name": "batteryStatus",
      "docstring": "The BATT_STATUS_* value of the battery.",
      "type": "AntPlus.BatteryStatusValue",
      "nullable": true,
      "returns": "Lang.Number"
    },
    {
      "name": "batteryVoltage",
      "docstring": "The voltage, -1 is invalid",
      "type": "Lang.Float",
      "nullable": true,
      "returns": "Lang.Float"
    },
    {
      "name": "operatingTime",
      "docstring": "The operating time in seconds.",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.AntPlus",
  "name": "Toybox.AntPlus.AntPlusNotAllowedException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/AntPlus/AntPlusNotAllowedException.html",
  "docstring": "This exception indicates that an invalid operation was attempted.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Application",
  "name": "Toybox.Application.AudioContentProviderApp",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Application/AudioContentProviderApp.html",
  "docstring": "The base class for audio content provider apps.  This object extends [AppBase](../../Toybox/Application/AppBase.html) and adds new methods for getting different initial view types based on what mode the app needs to be started in.",
  "methods": [
    {
      "name": "getContentDelegate",
      "ast": {
        "name": "getContentDelegate",
        "parameters": [
          {
            "name": "args",
            "types": [
              {
                "type": "Application.PersistableType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Media.ContentDelegate"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Media.ContentDelegate"
      ]
    },
    {
      "name": "getPlaybackConfigurationView",
      "ast": {
        "name": "getPlaybackConfigurationView",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "WatchUi.Views"
              },
              {
                "type": "WatchUi.InputDelegates"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getProviderIconInfo",
      "ast": {
        "name": "getProviderIconInfo",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getSyncConfigurationView",
      "ast": {
        "name": "getSyncConfigurationView",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "WatchUi.Views"
              },
              {
                "type": "WatchUi.InputDelegates"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getSyncDelegate",
      "ast": {
        "name": "getSyncDelegate",
        "parameters": [],
        "returns": [
          {
            "type": "Communications.SyncDelegate"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": [
        "Media.SyncDelegate"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Application",
  "name": "Toybox.Application.AppBase",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Application/AppBase.html",
  "docstring": "AppBase is the base class for an app.  All apps inherit from this class and use it's methods to manage the life cycle of an app.    * Your app overrides the class to provide entry points with the following methods:       * [onStart()](../../Toybox/Application/AppBase.html#onStart-instance_function)      * [getInitialView()](../../Toybox/Application/AppBase.html#getInitialView-instance_function)      * [getGoalView()](../../Toybox/Application/AppBase.html#getGoalView-instance_function)      * [getServiceDelegate()](../../Toybox/Application/AppBase.html#getServiceDelegate-instance_function)      * [onSettingsChanged()](../../Toybox/Application/AppBase.html#onSettingsChanged-instance_function)      * [onStop()](../../Toybox/Application/AppBase.html#onStop-instance_function)    * These functions are called in the following order:     1. [onStart()](../../Toybox/Application/AppBase.html#onStart-instance_function)    2. [getInitialView()](../../Toybox/Application/AppBase.html#getInitialView-instance_function)    3. [onStop()](../../Toybox/Application/AppBase.html#onStop-instance_function)  Every AppBase object has access to an object store to persist data.",
  "methods": [
    {
      "name": "allowTrialMessage",
      "ast": {
        "name": "allowTrialMessage",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "clearProperties",
      "ast": {
        "name": "clearProperties",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": [
        {
          "types": [
            "Application.ObjectStoreAccessException"
          ],
          "docstring": "Thrown if called from a background process"
        }
      ],
      "returns": []
    },
    {
      "name": "deleteProperty",
      "ast": {
        "name": "deleteProperty",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Application.PropertyKeyType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key to delete"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": [
        {
          "types": [
            "Application.ObjectStoreAccessException"
          ],
          "docstring": "Thrown if called from a background process"
        }
      ],
      "returns": []
    },
    {
      "name": "getGlanceTheme",
      "ast": {
        "name": "getGlanceTheme",
        "parameters": [],
        "returns": [
          {
            "type": "AppBase.GlanceTheme"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getGlanceView",
      "ast": {
        "name": "getGlanceView",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "WatchUi.GlanceView"
              },
              {
                "type": "WatchUi.GlanceViewDelegate"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getGoalView",
      "ast": {
        "name": "getGoalView",
        "parameters": [
          {
            "name": "goalType",
            "types": [
              {
                "type": "Application.GoalType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "WatchUi.View"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "goalType",
          "docstring": "The goal type that has triggered. The goalType will be from the GOAL_TYPE_* enumeration."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getInitialView",
      "ast": {
        "name": "getInitialView",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "WatchUi.Views"
              },
              {
                "type": "WatchUi.InputDelegates"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getProperty",
      "ast": {
        "name": "getProperty",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Application.PropertyKeyType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Application.PropertyValueType"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key of the value to retrieve from the object store (cannot be a Symbol)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "getServiceDelegate",
      "ast": {
        "name": "getServiceDelegate",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "System.ServiceDelegate"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getSettingsView",
      "ast": {
        "name": "getSettingsView",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "WatchUi.Views"
              },
              {
                "type": "WatchUi.InputDelegates"
              }
            ]
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getSyncDelegate",
      "ast": {
        "name": "getSyncDelegate",
        "parameters": [],
        "returns": [
          {
            "type": "Communications.SyncDelegate"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Communications.SyncDelegate"
      ]
    },
    {
      "name": "getTrialDaysRemaining",
      "ast": {
        "name": "getTrialDaysRemaining",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "isActive",
      "ast": {
        "name": "isActive",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "isTrial",
      "ast": {
        "name": "isTrial",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "loadProperties",
      "ast": {
        "name": "loadProperties",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": []
    },
    {
      "name": "onActive",
      "ast": {
        "name": "onActive",
        "parameters": [
          {
            "name": "state",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "state",
          "docstring": "for future expansion, null for now."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onAppInstall",
      "ast": {
        "name": "onAppInstall",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onAppUpdate",
      "ast": {
        "name": "onAppUpdate",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onAuthenticationRequest",
      "ast": {
        "name": "onAuthenticationRequest",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onBackgroundData",
      "ast": {
        "name": "onBackgroundData",
        "parameters": [
          {
            "name": "data",
            "types": [
              {
                "type": "Application.PersistableType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "data",
          "docstring": "The data passed from the background process."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onEnhancedReadabilityModeChanged",
      "ast": {
        "name": "onEnhancedReadabilityModeChanged",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onInactive",
      "ast": {
        "name": "onInactive",
        "parameters": [
          {
            "name": "state",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "state",
          "docstring": "for future expansion, null for now."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onNightModeChanged",
      "ast": {
        "name": "onNightModeChanged",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onSettingsChanged",
      "ast": {
        "name": "onSettingsChanged",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onStart",
      "ast": {
        "name": "onStart",
        "parameters": [
          {
            "name": "state",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "state",
          "docstring": "Required. If an [Intent](../../Toybox/System/Intent.html) is not used to launch the application, then an empty \"state\" Dictionary is used. If an Intent is used to start the application the Dictionary contains the arguments from the Intent.",
          "dictionary_keys": [
            {
              "name": ":resume",
              "docstring": "If true, indicating app has been resumed from suspension, restore the previously saved app state if needed."
            },
            {
              "name": ":launchedFromGlance",
              "docstring": "If true, indicating the app is started from glance list as opposed to the the app list."
            },
            {
              "name": ":launchedFromComplication",
              "docstring": "If presented, indicating the complication index the app was launched from."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onStop",
      "ast": {
        "name": "onStop",
        "parameters": [
          {
            "name": "state",
            "types": [
              {
                "type": "Lang.Dictionary"
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "state",
          "docstring": "Required. If an [Intent](../../Toybox/System/Intent.html) is not used to launch an application on stop of the current application an empty \"state\" Dictionary is used. If an Intent is used to start another application, then the Dictionary contains the arguments from the Intent.",
          "dictionary_keys": [
            {
              "name": ":suspend",
              "docstring": "If true, the app has been suspended and the current state can be resumed at a later time."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onStorageChanged",
      "ast": {
        "name": "onStorageChanged",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onValidateProperty",
      "ast": {
        "name": "onValidateProperty",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          },
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "openAppSettingsEditor",
      "ast": {
        "name": "openAppSettingsEditor",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "saveProperties",
      "ast": {
        "name": "saveProperties",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": null,
      "returns": []
    },
    {
      "name": "setProperty",
      "ast": {
        "name": "setProperty",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Application.PropertyKeyType"
              }
            ]
          },
          {
            "name": "value",
            "types": [
              {
                "type": "Application.PropertyValueType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key used to store and retrieve the value from the object store (cannot be a Symbol)"
        },
        {
          "name": "value",
          "docstring": "The value to put into the object store"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": true,
      "throws": [
        {
          "types": [
            "Application.ObjectStoreAccessException"
          ],
          "docstring": "Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support. Data can always be passed to the foreground process from a background process with [Background.exit()](../../Toybox/Background.html#exit-instance_function)."
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if called with a key or value of a disallowed type"
        }
      ],
      "returns": []
    },
    {
      "name": "validateProperty",
      "ast": {
        "name": "validateProperty",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Application.PropertyKeyType"
              }
            ]
          },
          {
            "name": "value",
            "types": [
              {
                "type": "Application.PropertyValueType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "namespace",
  "parent": "Toybox.Application",
  "name": "Toybox.Application.Storage",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Application/Storage.html",
  "docstring": "The Storage module provides persistent storage to applications.  Storage provides access to persistent disk storage.",
  "methods": [
    {
      "name": "clearValues",
      "ast": {
        "name": "clearValues",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Application.ObjectStoreAccessException"
          ],
          "docstring": "Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support."
        }
      ],
      "returns": []
    },
    {
      "name": "deleteValue",
      "ast": {
        "name": "deleteValue",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Application.PropertyKeyType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key to delete"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if key is a disallowed data type"
        },
        {
          "types": [
            "Application.ObjectStoreAccessException"
          ],
          "docstring": "Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support"
        }
      ],
      "returns": []
    },
    {
      "name": "getValue",
      "ast": {
        "name": "getValue",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Application.PropertyKeyType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Application.PropertyValueType"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key of the value to retrieve from the object store (cannot be a Symbol)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if key is a disallowed data type"
        }
      ],
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "setValue",
      "ast": {
        "name": "setValue",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Application.PropertyKeyType"
              }
            ]
          },
          {
            "name": "value",
            "types": [
              {
                "type": "Application.PropertyValueType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key used to store and retrieve the value from the object store (cannot be a Symbol)"
        },
        {
          "name": "value",
          "docstring": "The value to put into the object store"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if key is a disallowed data type"
        },
        {
          "types": [
            "Lang.StorageFullException"
          ],
          "docstring": "Thrown if there is not enough remaining space in the Object Store for the given key and value"
        },
        {
          "types": [
            "Application.ObjectStoreAccessException"
          ],
          "docstring": "Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support. Data can always be passed to the foreground process from a background process with [Background.exit()](../../Toybox/Background.html#exit-instance_function)."
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "namespace",
  "parent": "Toybox.Application",
  "name": "Toybox.Application.Properties",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Application/Properties.html",
  "docstring": "The Properties module provides access to application properties.  Storage provides access to properties defined in application properties.",
  "classes": [
    "InvalidKeyException"
  ],
  "methods": [
    {
      "name": "getValue",
      "ast": {
        "name": "getValue",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Application.PropertyKeyType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Application.PropertyValueType"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key of the value to retrieve from Application Properties"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if key is a disallowed data type"
        },
        {
          "types": [
            "Properties.InvalidKeyException"
          ],
          "docstring": "Thrown if key does not exist in Application Settings"
        }
      ],
      "returns": [
        "Lang.Object"
      ]
    },
    {
      "name": "setValue",
      "ast": {
        "name": "setValue",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Application.PropertyKeyType"
              }
            ]
          },
          {
            "name": "value",
            "types": [
              {
                "type": "Application.PropertyValueType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The key used to store and retrieve the value from Application Properties"
        },
        {
          "name": "value",
          "docstring": "The value to put into Application Properties"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Application.ObjectStoreAccessException"
          ],
          "docstring": "Thrown if called from a background process on device that does not have ConnectIQ 3.2.0 support. Data can always be passed to the foreground process from a background process with [Background.exit()](../../Toybox/Background.html#exit-instance_function)."
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if key is a disallowed data type"
        },
        {
          "types": [
            "Properties.InvalidKeyException"
          ],
          "docstring": "Thrown if key does not exist in Application Properties"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Attention",
  "name": "Toybox.Attention.ToneProfile",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Attention/ToneProfile.html",
  "docstring": "Define a tone pattern.  Tones have two characteristics: frequency and duration. These characteristics are used to define a single ToneProfile object, which can then be passed with a collection of other ToneProfile objects in an Array to the playTone() method. The playTone() method will play through each of the ToneProfile objects within the Array in order.",
  "attributes": [
    {
      "name": "duration",
      "docstring": "The duration of the tone in milliseconds (ms).",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    },
    {
      "name": "frequency",
      "docstring": "The frequency of the tone in hertz (hz).",
      "type": "Lang.Number",
      "nullable": false,
      "returns": null
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "aFrequency",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "aDuration",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "aFrequency",
          "docstring": "The frequency of the tone in hertz (hz)"
        },
        {
          "name": "aDuration",
          "docstring": "The duration of the tone in milliseconds (ms)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Attention",
  "name": "Toybox.Attention.BacklightOnTooLongException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Attention/BacklightOnTooLongException.html",
  "docstring": "Exception thrown on products with burn in protection if the display is enabled for too long (e.g. over a minute)",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Authentication",
  "name": "Toybox.Authentication.Message",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Authentication/Message.html",
  "docstring": "The base class for messages.",
  "attributes": [
    {
      "name": "data",
      "docstring": "The data delivered by the message.",
      "type": null,
      "nullable": false,
      "returns": "Lang.Object"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Background",
  "name": "Toybox.Background.InvalidBackgroundTimeException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Background/InvalidBackgroundTimeException.html",
  "docstring": "Indicates a invalid time was provided to [registerForTemporalEvent()](../../Toybox/Background.html#registerForTemporalEvent- instance_function), which may be invalid because it either:    * Occurs less than five minutes after the last background event occurred     * Has a duration of less than five minutes",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Background",
  "name": "Toybox.Background.ExitDataSizeLimitException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Background/ExitDataSizeLimitException.html",
  "docstring": "Indicates the data payload provided to [Background.exit()](../../Toybox/Background.html#exit-instance_function) exceeds the maximum allowed data size (approximately 8 KB).",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.Uuid",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/Uuid.html",
  "docstring": "Encapsulates a Bluetooth UUID and provides various helper methods for interacting with UUID within the Bluetooth Low Energy Subsystem",
  "methods": [
    {
      "name": "equals",
      "ast": {
        "name": "equals",
        "parameters": [
          {
            "name": "other"
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "other",
          "docstring": "the other object to compare"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "BluetoothLowEnergy.UuidFormatException"
          ],
          "docstring": ""
        }
      ],
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "hashCode",
      "ast": {
        "name": "hashCode",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "toByteArray",
      "ast": {
        "name": "toByteArray",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "toString",
      "ast": {
        "name": "toString",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.Service",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/Service.html",
  "docstring": "Encapsulates a service provided by a device",
  "methods": [
    {
      "name": "getCharacteristic",
      "ast": {
        "name": "getCharacteristic",
        "parameters": [
          {
            "name": "uuid",
            "types": [
              {
                "type": "BluetoothLowEnergy.Uuid"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Characteristic"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "uuid",
          "docstring": "the UUID to search for."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Characteristic"
      ]
    },
    {
      "name": "getCharacteristics",
      "ast": {
        "name": "getCharacteristics",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Iterator"
      ]
    },
    {
      "name": "getDevice",
      "ast": {
        "name": "getDevice",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Device"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Device"
      ]
    },
    {
      "name": "getUuid",
      "ast": {
        "name": "getUuid",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Uuid"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Uuid"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.ScanResult",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/ScanResult.html",
  "docstring": "Encapsulates an Advertisement seen during scanning. Cannot be instantiated.  Used as an argument to [BluetoothLowEnergy.pairDevice()](../../Toybox/BluetoothLowEnergy.html#pairDevice- instance_function) to add a new device to the System's Paired Devices list",
  "methods": [
    {
      "name": "equals",
      "ast": {
        "name": "equals",
        "parameters": [
          {
            "name": "other"
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "other",
          "docstring": "the other object to compare against"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "getAppearance",
      "ast": {
        "name": "getAppearance",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getDeviceName",
      "ast": {
        "name": "getDeviceName",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "getManufacturerSpecificData",
      "ast": {
        "name": "getManufacturerSpecificData",
        "parameters": [
          {
            "name": "manufacturerId",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": [
        {
          "name": "manufacturerId",
          "docstring": "The manufacturer id to retrieve the manufacturer specific data for."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "getManufacturerSpecificDataIterator",
      "ast": {
        "name": "getManufacturerSpecificDataIterator",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Iterator"
      ]
    },
    {
      "name": "getRawData",
      "ast": {
        "name": "getRawData",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "getRssi",
      "ast": {
        "name": "getRssi",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getServiceData",
      "ast": {
        "name": "getServiceData",
        "parameters": [
          {
            "name": "uuid",
            "types": [
              {
                "type": "BluetoothLowEnergy.Uuid"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": [
        {
          "name": "uuid",
          "docstring": "Service UUID to search for"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "getServiceUuids",
      "ast": {
        "name": "getServiceUuids",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Iterator"
      ]
    },
    {
      "name": "hasAddress",
      "ast": {
        "name": "hasAddress",
        "parameters": [
          {
            "name": "address",
            "types": [
              {
                "type": "Lang.ByteArray"
              },
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "address",
          "docstring": "Address to check for as a big-endian byte array or a string in the format \"00:01:02:03:04:05\""
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "isSameDevice",
      "ast": {
        "name": "isSameDevice",
        "parameters": [
          {
            "name": "other",
            "types": [
              {
                "type": "BluetoothLowEnergy.ScanResult"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": [
        {
          "name": "other",
          "docstring": "The other scan result to compare"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.ProfileRegistrationException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/ProfileRegistrationException.html",
  "docstring": "This exception indicates that the profile registration failed due to developer error"
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.Iterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/Iterator.html",
  "docstring": "Content iterator for Bluetooth Low Energy Data",
  "methods": [
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Object"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Object"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.InvalidRequestException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/InvalidRequestException.html",
  "docstring": "This exception indicates that a Bluetooth Request is not valid"
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.DevicePairException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/DevicePairException.html",
  "docstring": "This exception indicates that attempting to pair a device has failed"
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.Descriptor",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/Descriptor.html",
  "docstring": "Encapsulates a Descriptor from on a Characteristic",
  "methods": [
    {
      "name": "getCharacteristic",
      "ast": {
        "name": "getCharacteristic",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Characteristic"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Characteristic"
      ]
    },
    {
      "name": "getUuid",
      "ast": {
        "name": "getUuid",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Uuid"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Uuid"
      ]
    },
    {
      "name": "requestRead",
      "ast": {
        "name": "requestRead",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "requestWrite",
      "ast": {
        "name": "requestWrite",
        "parameters": [
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "value",
          "docstring": "New value to store."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "BluetoothLowEnergy.InvalidRequestException"
          ],
          "docstring": "if the request is invalid"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.Device",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/Device.html",
  "docstring": "Represents a Bluetooth Low Energy Device that has been paired with the system.  This class cannot be instantiated, access to paired system devices is done through the use of [BluetoothLowEnergy.getPairedDevices()](../../Toybox/BluetoothLowEnergy.html#getPairedDevices- instance_function) or by calling [BluetoothLowEnergy.pairDevice()](../../Toybox/BluetoothLowEnergy.html#pairDevice- instance_function) after receiving a [ScanResult](../../Toybox/BluetoothLowEnergy/ScanResult.html) for a device",
  "methods": [
    {
      "name": "getName",
      "ast": {
        "name": "getName",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.String"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.String"
      ]
    },
    {
      "name": "getService",
      "ast": {
        "name": "getService",
        "parameters": [
          {
            "name": "uuid",
            "types": [
              {
                "type": "BluetoothLowEnergy.Uuid"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Service"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "uuid",
          "docstring": "The UUID of the service to search for"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Service"
      ]
    },
    {
      "name": "getServices",
      "ast": {
        "name": "getServices",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Iterator"
      ]
    },
    {
      "name": "isConnected",
      "ast": {
        "name": "isConnected",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.Characteristic",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/Characteristic.html",
  "docstring": "Encapsulates a characteristic on a service",
  "methods": [
    {
      "name": "getDescriptor",
      "ast": {
        "name": "getDescriptor",
        "parameters": [
          {
            "name": "uuid",
            "types": [
              {
                "type": "BluetoothLowEnergy.Uuid"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Descriptor"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": [
        {
          "name": "uuid",
          "docstring": "the UUID to search for."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Descriptor"
      ]
    },
    {
      "name": "getDescriptors",
      "ast": {
        "name": "getDescriptors",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Iterator"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Iterator"
      ]
    },
    {
      "name": "getService",
      "ast": {
        "name": "getService",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Service"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Service"
      ]
    },
    {
      "name": "getUuid",
      "ast": {
        "name": "getUuid",
        "parameters": [],
        "returns": [
          {
            "type": "BluetoothLowEnergy.Uuid"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "BluetoothLowEnergy.Uuid"
      ]
    },
    {
      "name": "requestRead",
      "ast": {
        "name": "requestRead",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "requestWrite",
      "ast": {
        "name": "requestWrite",
        "parameters": [
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":writeType",
                    "types": [
                      {
                        "type": "BluetoothLowEnergy.WriteType"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "value",
          "docstring": "New value to store."
        },
        {
          "name": "options",
          "docstring": "A Dictionary containing write options",
          "dictionary_keys": [
            {
              "name": ":writeType",
              "docstring": "A BluetoothLowEnergy.WRITE_TYPE_* indicating the write type to use when writing to the characteristic. Cannot be `null`."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "BluetoothLowEnergy.InvalidRequestException"
          ],
          "docstring": "if the request is invalid"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.BluetoothLowEnergy",
  "name": "Toybox.BluetoothLowEnergy.BleDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/BluetoothLowEnergy/BleDelegate.html",
  "docstring": "Delegate Class for Bluetooth Low Energy Callbacks.  Applications must extend this Class and register an instance with the BLE Subsystem using [BluetoothLowEnergy.setDelegate()](../../Toybox/BluetoothLowEnergy.html#setDelegate- instance_function) to support asynchronous operations.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onCharacteristicChanged",
      "ast": {
        "name": "onCharacteristicChanged",
        "parameters": [
          {
            "name": "characteristic",
            "types": [
              {
                "type": "BluetoothLowEnergy.Characteristic"
              }
            ]
          },
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "characteristic",
          "docstring": "The characteristic that changed"
        },
        {
          "name": "value",
          "docstring": "The updated value of the characteristic"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onCharacteristicRead",
      "ast": {
        "name": "onCharacteristicRead",
        "parameters": [
          {
            "name": "characteristic",
            "types": [
              {
                "type": "BluetoothLowEnergy.Characteristic"
              }
            ]
          },
          {
            "name": "status",
            "types": [
              {
                "type": "BluetoothLowEnergy.Status"
              }
            ]
          },
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "characteristic",
          "docstring": "The characteristic that was read."
        },
        {
          "name": "status",
          "docstring": "A BluetoothLowEnergy.STATUS_* indicating the result of the operation"
        },
        {
          "name": "value",
          "docstring": "Characteristic value that was read. `null` if status is not STATUS_SUCCESS"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onCharacteristicWrite",
      "ast": {
        "name": "onCharacteristicWrite",
        "parameters": [
          {
            "name": "characteristic",
            "types": [
              {
                "type": "BluetoothLowEnergy.Characteristic"
              }
            ]
          },
          {
            "name": "status",
            "types": [
              {
                "type": "BluetoothLowEnergy.Status"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "characteristic",
          "docstring": "The characteristic that was written."
        },
        {
          "name": "status",
          "docstring": "A BluetoothLowEnergy.STATUS_* indicating the result of the operation"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onConnectedStateChanged",
      "ast": {
        "name": "onConnectedStateChanged",
        "parameters": [
          {
            "name": "device",
            "types": [
              {
                "type": "BluetoothLowEnergy.Device"
              }
            ]
          },
          {
            "name": "state",
            "types": [
              {
                "type": "BluetoothLowEnergy.ConnectionState"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "device",
          "docstring": "the device state that was changed"
        },
        {
          "name": "state",
          "docstring": "A BluetoothLowEnergy.CONNECTION_STATE_* inicating the state of the connection"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onDescriptorRead",
      "ast": {
        "name": "onDescriptorRead",
        "parameters": [
          {
            "name": "descriptor",
            "types": [
              {
                "type": "BluetoothLowEnergy.Descriptor"
              }
            ]
          },
          {
            "name": "status",
            "types": [
              {
                "type": "BluetoothLowEnergy.Status"
              }
            ]
          },
          {
            "name": "value",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "descriptor",
          "docstring": "The descriptor that was read"
        },
        {
          "name": "status",
          "docstring": "A BluetoothLowEnergy.STATUS_* indicating the result of the operation"
        },
        {
          "name": "value",
          "docstring": "Descriptor value that was read. `null` if status is not STATUS_SUCCESS"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onDescriptorWrite",
      "ast": {
        "name": "onDescriptorWrite",
        "parameters": [
          {
            "name": "descriptor",
            "types": [
              {
                "type": "BluetoothLowEnergy.Descriptor"
              }
            ]
          },
          {
            "name": "status",
            "types": [
              {
                "type": "BluetoothLowEnergy.Status"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "descriptor",
          "docstring": "The descriptor that was written"
        },
        {
          "name": "status",
          "docstring": "A BluetoothLowEnergy.STATUS_* indicating the result of the operation"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onProfileRegister",
      "ast": {
        "name": "onProfileRegister",
        "parameters": [
          {
            "name": "uuid",
            "types": [
              {
                "type": "BluetoothLowEnergy.Uuid"
              }
            ]
          },
          {
            "name": "status",
            "types": [
              {
                "type": "BluetoothLowEnergy.Status"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "uuid",
          "docstring": "Profile UUID that this callback is related to"
        },
        {
          "name": "status",
          "docstring": "A BluetoothLowEnergy.STATUS_* indicating the result of a call to [BluetoothLowEnergy.registerProfile()](../../Toybox/BluetoothLowEnergy.html#registerProfile- instance_function)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onScanResults",
      "ast": {
        "name": "onScanResults",
        "parameters": [
          {
            "name": "scanResults",
            "types": [
              {
                "type": "BluetoothLowEnergy.Iterator"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "scanResults",
          "docstring": "An iterator of BluetoothLowEnergy.ScanResult objects for all of the advertisements seen since the last call to this callback"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onScanStateChange",
      "ast": {
        "name": "onScanStateChange",
        "parameters": [
          {
            "name": "scanState",
            "types": [
              {
                "type": "BluetoothLowEnergy.ScanState"
              }
            ]
          },
          {
            "name": "status",
            "types": [
              {
                "type": "BluetoothLowEnergy.Status"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "scanState",
          "docstring": "A BluetoothLowEnergy.SCAN_STATE_* indicating the new Scan State of the system"
        },
        {
          "name": "status",
          "docstring": "The BluetoothLowEnergy.STATUS_* result of the last call to [BluetoothLowEnergy.setScanState()](../../Toybox/BluetoothLowEnergy.html#setScanState- instance_function)"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Application.Properties",
  "name": "Toybox.Application.Properties.InvalidKeyException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Application/Properties/InvalidKeyException.html",
  "docstring": "Indicates a the application attempted to access a key that does not exist in Application Settings",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Communications",
  "name": "Toybox.Communications.SyncDelegate",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Communications/SyncDelegate.html",
  "docstring": "A delegate object that the user implements to respond to sync requests from the system.",
  "methods": [
    {
      "name": "isSyncNeeded",
      "ast": {
        "name": "isSyncNeeded",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "onStartSync",
      "ast": {
        "name": "onStartSync",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onStopSync",
      "ast": {
        "name": "onStopSync",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Communications",
  "name": "Toybox.Communications.PhoneAppMessage",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Communications/PhoneAppMessage.html",
  "docstring": "A PhoneAppMessage received by the callback registered in [registerForPhoneAppMessages()](../../Toybox/Communications.html#registerForPhoneAppMessages- instance_function)",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Communications",
  "name": "Toybox.Communications.OAuthMessage",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Communications/OAuthMessage.html",
  "docstring": "An OAuthMessage received by the callback registered in [registerForOAuthMessages()](../../Toybox/Communications.html#registerForOAuthMessages- instance_function).  Unlike the `data` in the [Message](../../Toybox/Communications/Message.html) parent class, data in an OAuthMessage should always be a [Dictionary](../../Toybox/Lang/Dictionary.html).",
  "attributes": [
    {
      "name": "responseCode",
      "docstring": "An HTTP response code (positive value) or BLE error code (negative value).",
      "type": "Lang.Number",
      "nullable": true,
      "returns": "Lang.Number"
    }
  ],
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Communications",
  "name": "Toybox.Communications.Message",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Communications/Message.html",
  "docstring": "The base class for messages.",
  "attributes": [
    {
      "name": "data",
      "docstring": "The data delivered by the message.",
      "type": "Lang.Object",
      "nullable": true,
      "returns": "Lang.Object"
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Communications",
  "name": "Toybox.Communications.MailboxIterator",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Communications/MailboxIterator.html",
  "docstring": "Get the messages out of the Mailbox.",
  "methods": [
    {
      "name": "next",
      "ast": {
        "name": "next",
        "parameters": [],
        "returns": [
          {
            "type": "MailboxIterator.MailboxValueType"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Communications",
  "name": "Toybox.Communications.ConnectionListener",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Communications/ConnectionListener.html",
  "docstring": "Provide a callback function for communications operations.",
  "methods": [
    {
      "name": "onComplete",
      "ast": {
        "name": "onComplete",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "onError",
      "ast": {
        "name": "onError",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Complications",
  "name": "Toybox.Complications.ComplicationNotFoundException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Complications/ComplicationNotFoundException.html",
  "docstring": "This exception indicates that the requested complication was not found.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [],
        "returns": []
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Complications",
  "name": "Toybox.Complications.Complication",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Complications/Complication.html",
  "docstring": "Complication object",
  "attributes": [
    {
      "name": "complicationId",
      "docstring": "",
      "type": "Complications.Id",
      "nullable": true,
      "returns": null
    },
    {
      "name": "longLabel",
      "docstring": "",
      "type": "Complications.Label",
      "nullable": true,
      "returns": null
    },
    {
      "name": "ranges",
      "docstring": "",
      "type": "Complications.Ranges",
      "nullable": true,
      "returns": null
    },
    {
      "name": "shortLabel",
      "docstring": "",
      "type": "Complications.Label",
      "nullable": true,
      "returns": null
    },
    {
      "name": "unit",
      "docstring": "",
      "type": "Complications.Unit",
      "nullable": true,
      "returns": null
    },
    {
      "name": "value",
      "docstring": "",
      "type": "Complications.Value",
      "nullable": true,
      "returns": null
    }
  ],
  "methods": [
    {
      "name": "getIcon",
      "ast": {
        "name": "getIcon",
        "parameters": [],
        "returns": [
          {
            "type": "Complications.Icon"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Complications.ComplicationNotFoundException"
          ],
          "docstring": "Thrown if the given complication is not found."
        }
      ],
      "returns": [
        "Complications.Icon"
      ]
    },
    {
      "name": "getType",
      "ast": {
        "name": "getType",
        "parameters": [],
        "returns": [
          {
            "type": "Complications.Type"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Complications.Type"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Cryptography",
  "name": "Toybox.Cryptography.KeyAgreement",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Cryptography/KeyAgreement.html",
  "docstring": "A local private key in combination with a public key to generate a shared secret.",
  "methods": [
    {
      "name": "addKey",
      "ast": {
        "name": "addKey",
        "parameters": [
          {
            "name": "key",
            "types": [
              {
                "type": "Cryptography.Key"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "key",
          "docstring": "The public key to add to the agreement"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if the specified key is not valid for the selected algorithm"
        }
      ],
      "returns": []
    },
    {
      "name": "generateSecret",
      "ast": {
        "name": "generateSecret",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":protocol",
                    "types": [
                      {
                        "type": "Cryptography.KeyAgreementProtocol"
                      }
                    ]
                  },
                  {
                    "name": ":privateKey",
                    "types": [
                      {
                        "type": "Cryptography.Key"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A dictionary of options for the KeyAgreement",
          "dictionary_keys": [
            {
              "name": ":protocol",
              "docstring": "The protocol to use as a [KEY_AGREEMENT_*](../../Toybox/Cryptography.html) value"
            },
            {
              "name": ":privateKey",
              "docstring": "The private key in the KeyAgreement"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if an argument is not the correct type"
        },
        {
          "types": [
            "Lang.InvalidValueException"
          ],
          "docstring": "Thrown if the specified private key is not the correct size for the selected algorithm, or if the selected protocol is not supported"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Cryptography",
  "name": "Toybox.Cryptography.Key",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Cryptography/Key.html",
  "docstring": "A public key or a private key.",
  "methods": [
    {
      "name": "getBytes",
      "ast": {
        "name": "getBytes",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.ByteArray"
          },
          {
            "type": "Null"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Cryptography",
  "name": "Toybox.Cryptography.InvalidBlockSizeException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Cryptography/InvalidBlockSizeException.html",
  "docstring": "Indicates an invalid input block size was provided.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Cryptography",
  "name": "Toybox.Cryptography.HashBasedMessageAuthenticationCode",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Cryptography/HashBasedMessageAuthenticationCode.html",
  "docstring": "Hash-Based Message Authentication Code (HMAC) object.  A HashBasedMessageAuthenticationCode is an object that can be used to compute a message authentication code using the HMAC algorithm.",
  "methods": [
    {
      "name": "digest",
      "ast": {
        "name": "digest",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":algorithm",
                    "types": [
                      {
                        "type": "Cryptography.HashAlgorithm"
                      }
                    ]
                  },
                  {
                    "name": ":key",
                    "types": [
                      {
                        "type": "Lang.ByteArray"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":algorithm",
              "docstring": "A [HASH_*](../../Toybox/Cryptography.html) value specifying the type of Hash used for this HMAC computation; HASH_SHA256 is the only supported algorithm in Connect IQ 3.x (required)"
            },
            {
              "name": ":key",
              "docstring": "The secret key used to compute the message authentication code, which can be of any length in bytes (required)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if the specified algorithm is not supported"
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [ByteArray](../../Toybox/Lang/ByteArray.html) is provided for the `:key` option, if a type other than [Toybox::Lang::Number](../../Toybox/Lang/Number.html) is provided for the `:algorithm` option, or if either option is not provided"
        }
      ],
      "returns": []
    },
    {
      "name": "update",
      "ast": {
        "name": "update",
        "parameters": [
          {
            "name": "message",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "message",
          "docstring": "The next chunk of the message being hashed"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [ByteArray](../../Toybox/Lang/ByteArray.html) is provided"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Cryptography",
  "name": "Toybox.Cryptography.Hash",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Cryptography/Hash.html",
  "docstring": "Compute the Hash digest of a message.",
  "methods": [
    {
      "name": "digest",
      "ast": {
        "name": "digest",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":algorithm",
                    "types": [
                      {
                        "type": "Cryptography.HashAlgorithm"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":algorithm",
              "docstring": "The type of Hash this object will compute from the [HASH_*](../../Toybox/Cryptography.html) enumeration (required)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if the algorithm selected is not supported, or if a required option is not provided"
        }
      ],
      "returns": []
    },
    {
      "name": "update",
      "ast": {
        "name": "update",
        "parameters": [
          {
            "name": "message",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "message",
          "docstring": "The next chunk of the message being hashed"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Cryptography",
  "name": "Toybox.Cryptography.CipherBasedMessageAuthenticationCode",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Cryptography/CipherBasedMessageAuthenticationCode.html",
  "docstring": "Cipher-Based Message Authentication Code (CMAC) object.  A CipherBasedMessageAuthenticationCode is an object that can be used to compute a message authentication code using the CMAC algorithm.",
  "methods": [
    {
      "name": "digest",
      "ast": {
        "name": "digest",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":algorithm",
                    "types": [
                      {
                        "type": "Cryptography.CipherAlgorithm"
                      }
                    ]
                  },
                  {
                    "name": ":key",
                    "types": [
                      {
                        "type": "Lang.ByteArray"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":algorithm",
              "docstring": "A [CIPHER_*](../../Toybox/Cryptography.html) value specifying the encryption algorithm used for this CMAC computation; CIPHER_AES128 is the only supported algorithm in Connect IQ 3.x. (required)"
            },
            {
              "name": ":key",
              "docstring": "The secret key used by selected cipher algorithm, which must be the appropriate length for chosen encryption type (required)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if the specified algorithm is not supported"
        },
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [ByteArray](../../Toybox/Lang/ByteArray.html) is provided for the `:key` option, if a type other than [Toybox::Lang::Number](../../Toybox/Lang/Number.html) is provided for the `:algorithm` option, or if either option is not provided"
        }
      ],
      "returns": []
    },
    {
      "name": "update",
      "ast": {
        "name": "update",
        "parameters": [
          {
            "name": "message",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "message",
          "docstring": "The next chunk of the message being hashed"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [ByteArray](../../Toybox/Lang/ByteArray.html) is provided"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Cryptography",
  "name": "Toybox.Cryptography.Cipher",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Cryptography/Cipher.html",
  "docstring": "A Cipher object.",
  "methods": [
    {
      "name": "decrypt",
      "ast": {
        "name": "decrypt",
        "parameters": [
          {
            "name": "ciphertext",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": [
        {
          "name": "ciphertext",
          "docstring": "The piece of data to decrypt"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [ByteArray](../../Toybox/Lang/ByteArray.html) is provided"
        },
        {
          "types": [
            "Cryptography.InvalidBlockSizeException"
          ],
          "docstring": "Thrown if `ciphertext` is not a valid size for the selected encryption type"
        }
      ],
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "encrypt",
      "ast": {
        "name": "encrypt",
        "parameters": [
          {
            "name": "plaintext",
            "types": [
              {
                "type": "Lang.ByteArray"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.ByteArray"
          }
        ]
      },
      "parameters": [
        {
          "name": "plaintext",
          "docstring": "The piece of data to encrypt"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [ByteArray](../../Toybox/Lang/ByteArray.html) is provided"
        },
        {
          "types": [
            "Cryptography.InvalidBlockSizeException"
          ],
          "docstring": "Thrown if `plaintext` is not a valid size for the selected encryption type"
        }
      ],
      "returns": [
        "Lang.ByteArray"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":algorithm",
                    "types": [
                      {
                        "type": "Cryptography.CipherAlgorithm"
                      }
                    ]
                  },
                  {
                    "name": ":mode",
                    "types": [
                      {
                        "type": "Cryptography.EncryptionMode"
                      }
                    ]
                  },
                  {
                    "name": ":key",
                    "types": [
                      {
                        "type": "Lang.ByteArray"
                      }
                    ]
                  },
                  {
                    "name": ":iv",
                    "types": [
                      {
                        "type": "Lang.ByteArray"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A Dictionary of options",
          "dictionary_keys": [
            {
              "name": ":algorithm",
              "docstring": "The encryption type this cipher object will use from the [CIPHER_*](../../Toybox/Cryptography.html) enumeration (required)"
            },
            {
              "name": ":mode",
              "docstring": "The encryption mode this cipher object will use from the [MODE_*](../../Toybox/Cryptography.html) enumeration (required)"
            },
            {
              "name": ":key",
              "docstring": "The secret key to use in the cipher. The key must be of the appropriate length for the encryption type selected (required)"
            },
            {
              "name": ":iv",
              "docstring": "The initialization vector to use for encryption or decryption. This will be generated by the system using secure random bytes for algorithms that require it if it is not provided (optional)"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if a type other than [ByteArray](../../Toybox/Lang/ByteArray.html) is provided for the `:key` and `:iv` options"
        },
        {
          "types": [
            "Lang.InvalidOptionsException"
          ],
          "docstring": "Thrown if a required option is not provided, the `:algorithm` and `:mode` options are not initialized with a valid enumeration, an invalid key size is provided for the selected algorithm, or an invalid initialization vector size is provided for the selected algorithm"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.FitContributor",
  "name": "Toybox.FitContributor.Field",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/FitContributor/Field.html",
  "docstring": "A Field records custom FIT data from an Application or Data Field to a FIT file on the device's file system.  Once a Field is created with the [createField()](../../Toybox/ActivityRecording/Session.html#createField- instance_function) method, you can submit the next Field value with [setData()](../../Toybox/FitContributor/Field.html#setData-instance_function), which will get written to the FIT file at the next opportunity. Depending on the device, writes to the FIT file may occur once per second or when new data is available (Smart Recording). Best practice is to only call [setData()](../../Toybox/FitContributor/Field.html#setData-instance_function) when values have changed to accommodate Smart Recording.  If [setData()](../../Toybox/FitContributor/Field.html#setData- instance_function) is called before the previous data is written out, the previous value will be lost and replaced by the current data. For this reason, we do not recommend using this feature for time-sensitive data requiring sub- second granularity.",
  "methods": [
    {
      "name": "setData",
      "ast": {
        "name": "setData",
        "parameters": [
          {
            "name": "input",
            "types": [
              {
                "type": "Lang.Object"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "input",
          "docstring": "The data to be written to the Field"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Lang.UnexpectedTypeException"
          ],
          "docstring": "Thrown if the `input` type does not match the type specified in [createField()](../../Toybox/ActivityRecording/Session.html#createField- instance_function) at definition"
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.FontReference",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/FontReference.html",
  "docstring": "Object that references the font resource allocated from the system memory pool rather than form the app's local memory."
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.InvalidBitmapResourceException",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/InvalidBitmapResourceException.html",
  "docstring": "This Exception indicates an invalid bitmap resource was provided.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "msg",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "msg",
          "docstring": "The exception message"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.Dc",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/Dc.html",
  "docstring": "This class represents a device context.  It provides methods to perform drawing operations on the device.",
  "methods": [
    {
      "name": "clear",
      "ast": {
        "name": "clear",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "clearClip",
      "ast": {
        "name": "clearClip",
        "parameters": [],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawAngledText",
      "ast": {
        "name": "drawAngledText",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.VectorFont"
              }
            ]
          },
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "justification",
            "types": [
              {
                "type": "Graphics.TextJustification"
              },
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "angle",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the text"
        },
        {
          "name": "y",
          "docstring": "The y location of the text"
        },
        {
          "name": "font",
          "docstring": "The font to use."
        },
        {
          "name": "text",
          "docstring": "The String to render."
        },
        {
          "name": "justification",
          "docstring": "Specifies how text is placed relative to the text location."
        },
        {
          "name": "angle",
          "docstring": "Angle of the text baseline in degrees counter-clockwise from the 3 o'clock position."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawArc",
      "ast": {
        "name": "drawArc",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "r",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "attr",
            "types": [
              {
                "type": "Graphics.ArcDirection"
              }
            ]
          },
          {
            "name": "degreeStart",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "degreeEnd",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the arc center"
        },
        {
          "name": "y",
          "docstring": "The y location of the arc center"
        },
        {
          "name": "r",
          "docstring": "The radius of the arc"
        },
        {
          "name": "attr",
          "docstring": "Arc drawing attributes. (ARC_COUNTER_CLOCKWISE or ARC_CLOCKWISE)"
        },
        {
          "name": "degreeStart",
          "docstring": "The start angle of the arc by degrees."
        },
        {
          "name": "degreeEnd",
          "docstring": "The end angle of the arc by degrees."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawBitmap",
      "ast": {
        "name": "drawBitmap",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "bitmap",
            "types": [
              {
                "type": "Graphics.BitmapType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The top left x coordinate to begin the draw"
        },
        {
          "name": "y",
          "docstring": "The top left y coordinate to begin the draw"
        },
        {
          "name": "bitmap",
          "docstring": "The object to draw. The source color palette must be a subset of the destination color palette."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if the source color palette is not a subset of the destination palette"
        }
      ],
      "returns": []
    },
    {
      "name": "drawBitmap2",
      "ast": {
        "name": "drawBitmap2",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "bitmap",
            "types": [
              {
                "type": "Graphics.BitmapType"
              }
            ]
          },
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":bitmapX",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":bitmapY",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":bitmapWidth",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":bitmapHeight",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":tintColor",
                    "types": [
                      {
                        "type": "Graphics.ColorType"
                      }
                    ]
                  },
                  {
                    "name": ":filterMode",
                    "types": [
                      {
                        "type": "Graphics.FilterMode"
                      }
                    ]
                  },
                  {
                    "name": ":transform",
                    "types": [
                      {
                        "type": "Graphics.AffineTransform"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "Null"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The top left x coordinate to begin the draw"
        },
        {
          "name": "y",
          "docstring": "The top left y coordinate to begin the draw"
        },
        {
          "name": "bitmap",
          "docstring": "The [BitmapResource](../../Toybox/WatchUi/BitmapResource.html) or [BufferedBitmap](../../Toybox/Graphics/BufferedBitmap.html) to render. The source color palette must be a subset of the destination color palette."
        },
        {
          "name": "options",
          "docstring": "A dictionary of options",
          "dictionary_keys": [
            {
              "name": ":bitmapX",
              "docstring": "The x coordinate of the top left corner of the source bitmap area. Default is 0"
            },
            {
              "name": ":bitmapY",
              "docstring": "The y coordinate of the top left corner of the source bitmap area. Default is 0"
            },
            {
              "name": ":bitmapWidth",
              "docstring": "The width of the source bitmap area. Default is `bitmap.getWidth()`"
            },
            {
              "name": ":bitmapHeight",
              "docstring": "The height of the source bitmap area. Default is `bitmap.getHeight()`"
            },
            {
              "name": ":tintColor",
              "docstring": "Tint color to apply to the output If not provided, no tint is applied."
            },
            {
              "name": ":filterMode",
              "docstring": "Default is FILTER_MODE_POINT."
            },
            {
              "name": ":transform",
              "docstring": "Transformation to apply to the source image when drawing it to the output. If not provided, no transform is applied."
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "InvalidValueException if one of `:bitmapX`, `:bitmapY`, `:bitmapWidth`, `:bitmapHeight` are provided and outside the bounds of `bitmap`."
        }
      ],
      "returns": []
    },
    {
      "name": "drawCircle",
      "ast": {
        "name": "drawCircle",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "radius",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the circle center"
        },
        {
          "name": "y",
          "docstring": "The y location of the circle center"
        },
        {
          "name": "radius",
          "docstring": "The radius of the circle"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawEllipse",
      "ast": {
        "name": "drawEllipse",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "a",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "b",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the ellipse center"
        },
        {
          "name": "y",
          "docstring": "The y location of the ellipse center"
        },
        {
          "name": "a",
          "docstring": "The radius of the ellipse along the x axis"
        },
        {
          "name": "b",
          "docstring": "The radius of the ellipse along the y axis"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawLine",
      "ast": {
        "name": "drawLine",
        "parameters": [
          {
            "name": "x1",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y1",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "x2",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y2",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x1",
          "docstring": "The first x coordinate"
        },
        {
          "name": "y1",
          "docstring": "The first y coordinate"
        },
        {
          "name": "x2",
          "docstring": "The second x coordinate"
        },
        {
          "name": "y2",
          "docstring": "The second y coordinate"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawOffsetBitmap",
      "ast": {
        "name": "drawOffsetBitmap",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "bitmapX",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "bitmapY",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "bitmapWidth",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "bitmapHeight",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "bitmap",
            "types": [
              {
                "type": "Graphics.BitmapType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The top left x coordinate to begin the draw"
        },
        {
          "name": "y",
          "docstring": "The top left y coordinate to begin the draw"
        },
        {
          "name": "bitmapX",
          "docstring": "The x offset of the upper left corner of pixels to copy from the bitmap."
        },
        {
          "name": "bitmapY",
          "docstring": "The y offset of the upper left corner of pixels to copy from the bitmap."
        },
        {
          "name": "bitmapWidth",
          "docstring": "The width of the area to copy pixels from the bitmap."
        },
        {
          "name": "bitmapHeight",
          "docstring": "The height of the area to copy pixels from the bitmap"
        },
        {
          "name": "bitmap",
          "docstring": "The [BitmapResource](../../Toybox/WatchUi/BitmapResource.html) or [BufferedBitmap](../../Toybox/Graphics/BufferedBitmap.html) to render. The source color palette must be a subset of the destination color palette."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if the source color palette is not a subset of the destination palette"
        }
      ],
      "returns": []
    },
    {
      "name": "drawPoint",
      "ast": {
        "name": "drawPoint",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the point"
        },
        {
          "name": "y",
          "docstring": "The y location of the point"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawRadialText",
      "ast": {
        "name": "drawRadialText",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.VectorFont"
              }
            ]
          },
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "justification",
            "types": [
              {
                "type": "Graphics.TextJustification"
              },
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "angle",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "radius",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "direction",
            "types": [
              {
                "type": "Graphics.RadialTextDirection"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the center of circle for radial text"
        },
        {
          "name": "y",
          "docstring": "The y location of the center of circle for radial text"
        },
        {
          "name": "font",
          "docstring": "The font to use."
        },
        {
          "name": "text",
          "docstring": "The String to render."
        },
        {
          "name": "justification",
          "docstring": "Specifies how text placed relative to the text location."
        },
        {
          "name": "angle",
          "docstring": "Angle to a point on the circle to justify text in degrees counter-clockwise from the 3 o'clock position."
        },
        {
          "name": "radius",
          "docstring": "Distance from center of circle on which to draw text."
        },
        {
          "name": "direction",
          "docstring": "Text drawing direction along the arc."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawRectangle",
      "ast": {
        "name": "drawRectangle",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "width",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "height",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the upper corner"
        },
        {
          "name": "y",
          "docstring": "The y location of the upper corner"
        },
        {
          "name": "width",
          "docstring": "The width value of the rectangle"
        },
        {
          "name": "height",
          "docstring": "The height value of the rectangle"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawRoundedRectangle",
      "ast": {
        "name": "drawRoundedRectangle",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "width",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "height",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "radius",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the upper corner"
        },
        {
          "name": "y",
          "docstring": "The y location of the upper corner"
        },
        {
          "name": "width",
          "docstring": "The width value of the rectangle"
        },
        {
          "name": "height",
          "docstring": "The height value of the rectangle"
        },
        {
          "name": "radius",
          "docstring": "The radius of the rounding."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "drawScaledBitmap",
      "ast": {
        "name": "drawScaledBitmap",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "width",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "height",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "bitmap",
            "types": [
              {
                "type": "Graphics.BitmapType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The top left x coordinate to begin the draw"
        },
        {
          "name": "y",
          "docstring": "The top left y coordinate to begin the draw"
        },
        {
          "name": "width",
          "docstring": "The width of the bitmap drawn on the destination surface"
        },
        {
          "name": "height",
          "docstring": "The height of the bitmap drawn on the destination surface"
        },
        {
          "name": "bitmap",
          "docstring": "The [BitmapResource](../../Toybox/WatchUi/BitmapResource.html) or [BufferedBitmap](../../Toybox/Graphics/BufferedBitmap.html) to render. The source color palette must be a subset of the destination color palette."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if the source color palette is not a subset of the destination palette"
        }
      ],
      "returns": []
    },
    {
      "name": "drawText",
      "ast": {
        "name": "drawText",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              }
            ]
          },
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.Object"
              },
              {
                "type": "Null"
              }
            ]
          },
          {
            "name": "justification",
            "types": [
              {
                "type": "Graphics.TextJustification"
              },
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the text"
        },
        {
          "name": "y",
          "docstring": "The y location of the text"
        },
        {
          "name": "font",
          "docstring": "The font to use. This can be a custom font loaded from resources or a Graphics.FONT_* value."
        },
        {
          "name": "text",
          "docstring": "The Object to render."
        },
        {
          "name": "justification",
          "docstring": "Mask of Graphics.TEXT_JUSTIFY_* constants. This may either be a single Graphics.TEXT_JUSTIFY_* constant, or a combination of one vertical and one horizontal justification value as a bit mask (e.g., Graphics.TEXT_JUSTIFY_CENTER | Graphics.TEXT_JUSTIFY_VCENTER)."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if an anti-aliased font is used on a paletted bitmap"
        }
      ],
      "returns": []
    },
    {
      "name": "fillCircle",
      "ast": {
        "name": "fillCircle",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "radius",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the circle center"
        },
        {
          "name": "y",
          "docstring": "The y location of the circle center"
        },
        {
          "name": "radius",
          "docstring": "The radius of the circle"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "fillEllipse",
      "ast": {
        "name": "fillEllipse",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "a",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "b",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the ellipse center"
        },
        {
          "name": "y",
          "docstring": "The y location of the ellipse center"
        },
        {
          "name": "a",
          "docstring": "The radius of the ellipse along the x axis"
        },
        {
          "name": "b",
          "docstring": "The radius of the ellipse along the y axis"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "fillPolygon",
      "ast": {
        "name": "fillPolygon",
        "parameters": [
          {
            "name": "pts",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Lang.Array",
                    "valueType": [
                      {
                        "type": "Lang.Numeric"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "pts",
          "docstring": "Array of coordinates with a 64 point limit"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "fillRectangle",
      "ast": {
        "name": "fillRectangle",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "width",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "height",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the upper corner"
        },
        {
          "name": "y",
          "docstring": "The y location of the upper corner"
        },
        {
          "name": "width",
          "docstring": "The width value of the rectangle"
        },
        {
          "name": "height",
          "docstring": "The height value of the rectangle"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "fillRoundedRectangle",
      "ast": {
        "name": "fillRoundedRectangle",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "width",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "height",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "radius",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x location of the upper corner"
        },
        {
          "name": "y",
          "docstring": "The y location of the upper corner"
        },
        {
          "name": "width",
          "docstring": "The width value of the rectangle"
        },
        {
          "name": "height",
          "docstring": "The height value of the rectangle"
        },
        {
          "name": "radius",
          "docstring": "The radius of the rounding"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "getFontHeight",
      "ast": {
        "name": "getFontHeight",
        "parameters": [
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "font",
          "docstring": "The font to measure"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getHeight",
      "ast": {
        "name": "getHeight",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getTextDimensions",
      "ast": {
        "name": "getTextDimensions",
        "parameters": [
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "text",
          "docstring": "The text to get the width for"
        },
        {
          "name": "font",
          "docstring": "The font of the text to measure."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getTextWidthInPixels",
      "ast": {
        "name": "getTextWidthInPixels",
        "parameters": [
          {
            "name": "text",
            "types": [
              {
                "type": "Lang.String"
              }
            ]
          },
          {
            "name": "font",
            "types": [
              {
                "type": "Graphics.FontType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": [
        {
          "name": "text",
          "docstring": "The text to get width for"
        },
        {
          "name": "font",
          "docstring": "The font of the text to measure."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getWidth",
      "ast": {
        "name": "getWidth",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "setAntiAlias",
      "ast": {
        "name": "setAntiAlias",
        "parameters": [
          {
            "name": "enabled",
            "types": [
              {
                "type": "Lang.Boolean"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "enabled",
          "docstring": "`true` if AA is to be enabled, `false` otherwise."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if antialiasing is enabled for a paletted bitmap."
        }
      ],
      "returns": []
    },
    {
      "name": "setBlendMode",
      "ast": {
        "name": "setBlendMode",
        "parameters": [
          {
            "name": "mode",
            "types": [
              {
                "type": "Graphics.BlendMode"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "mode",
          "docstring": "Graphics.BLEND_MODE_* constant."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setClip",
      "ast": {
        "name": "setClip",
        "parameters": [
          {
            "name": "x",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "y",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "width",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          },
          {
            "name": "height",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "x",
          "docstring": "The x coordinate of the top left corner of the clipping region"
        },
        {
          "name": "y",
          "docstring": "The y coordinate of the top left corner of the clipping region"
        },
        {
          "name": "width",
          "docstring": "The width of the clipping region in pixels."
        },
        {
          "name": "height",
          "docstring": "The height of the clipping region in pixels."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setColor",
      "ast": {
        "name": "setColor",
        "parameters": [
          {
            "name": "foreground",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          },
          {
            "name": "background",
            "types": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "foreground",
          "docstring": "Graphics.COLOR_* constant or 24-bit integer of the form 0xRRGGBB."
        },
        {
          "name": "background",
          "docstring": "Graphics.COLOR_* constant or 24-bit integer of the form 0xRRGGBB."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setFill",
      "ast": {
        "name": "setFill",
        "parameters": [
          {
            "name": "fill",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Graphics.BitmapTexture"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "fill",
          "docstring": "The [BitmapTexture](../../Toybox/Graphics/BitmapTexture.html) or [Color](../../Toybox/Lang/Number.html) 32-bit integer in the format 0xAARRGGBB to use for fill draws."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setPenWidth",
      "ast": {
        "name": "setPenWidth",
        "parameters": [
          {
            "name": "width",
            "types": [
              {
                "type": "Lang.Numeric"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "width",
          "docstring": "The pen width in pixels"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setStroke",
      "ast": {
        "name": "setStroke",
        "parameters": [
          {
            "name": "stroke",
            "types": [
              {
                "type": "Lang.Number"
              },
              {
                "type": "Graphics.BitmapTexture"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "stroke",
          "docstring": "The [BitmapTexture](../../Toybox/Graphics/BitmapTexture.html) or [Color](../../Toybox/Lang/Number.html) 32-bit integer in the format 0xAARRGGBB to use for draws."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.BufferedBitmapReference",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/BufferedBitmapReference.html",
  "docstring": "Object that references the bitmap resource allocated from the graphics memory pool rather than form the app's local memory.",
  "methods": [
    {
      "name": "getHeight",
      "ast": {
        "name": "getHeight",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "Thrown if resource cannot be loaded or restored because there isn't enough free pool to load the resource"
        }
      ],
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getWidth",
      "ast": {
        "name": "getWidth",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "Thrown if resource cannot be loaded or restored because there isn't enough free pool to load the resource"
        }
      ],
      "returns": [
        "Lang.Number"
      ]
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.BufferedBitmap",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/BufferedBitmap.html",
  "docstring": "This class represents an off-screen bitmap. It provides methods to modify the bitmap palette, and get a drawable context.",
  "methods": [
    {
      "name": "getDc",
      "ast": {
        "name": "getDc",
        "parameters": [],
        "returns": [
          {
            "type": "Graphics.Dc"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Graphics.Dc"
      ]
    },
    {
      "name": "getHeight",
      "ast": {
        "name": "getHeight",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getPalette",
      "ast": {
        "name": "getPalette",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Array",
            "valueType": [
              {
                "type": "Graphics.ColorType"
              }
            ]
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Array"
      ]
    },
    {
      "name": "getWidth",
      "ast": {
        "name": "getWidth",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":width",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":height",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":palette",
                    "types": [
                      {
                        "type": "Lang.Array",
                        "valueType": [
                          {
                            "type": "Graphics.ColorType"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": ":colorDepth",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":bitmapResource",
                    "types": [
                      {
                        "type": "WatchUi.BitmapResource"
                      }
                    ]
                  },
                  {
                    "name": ":alphaBlending",
                    "types": [
                      {
                        "type": "Graphics.AlphaBlending"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "Dictionary of options. Must contain width and height, with optional palette, or a [BitmapResource](../../Toybox/WatchUi/BitmapResource.html). This resource is not allowed to have an alpha channel.",
          "dictionary_keys": [
            {
              "name": ":width",
              "docstring": "The width of the surface in pixels"
            },
            {
              "name": ":height",
              "docstring": "The height of the surface in pixels"
            },
            {
              "name": ":palette",
              "docstring": "The colors used in this surface. Using less will reduce the bitmap size. The bitmap will use the system default if not provided. The maximum palette size allowed is 256 colors. If a palette is provided, the number of colors must also be <= to the number of system colors."
            },
            {
              "name": ":colorDepth",
              "docstring": "Color depth in terms of bits/pixel, when missing, default to system value."
            },
            {
              "name": ":bitmapResource",
              "docstring": "A [BitmapResource](../../Toybox/WatchUi/BitmapResource.html) to initialize"
            },
            {
              "name": ":alphaBlending",
              "docstring": "A AlphaBlending enum to specify the level of alpha blending support for this buffered bitmap object"
            }
          ]
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if the palette size exceeds the number of system colors."
        },
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if the palette size exceeds 256 colors."
        },
        {
          "types": [
            "Graphics.InvalidBitmapResourceException"
          ],
          "docstring": "Thrown if the [BitmapResource](../../Toybox/WatchUi/BitmapResource.html) provided has an alpha channel."
        },
        {
          "types": [],
          "docstring": "Thrown if there isn't enough free memory available to load the resource."
        }
      ],
      "returns": []
    },
    {
      "name": "isCached",
      "ast": {
        "name": "isCached",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Boolean"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": [
        "Lang.Boolean"
      ]
    },
    {
      "name": "setPalette",
      "ast": {
        "name": "setPalette",
        "parameters": [
          {
            "name": "palette",
            "types": [
              {
                "type": "Lang.Array",
                "valueType": [
                  {
                    "type": "Graphics.ColorType"
                  }
                ]
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "palette",
          "docstring": "A palette for this bitmap. The number of colors must match the current palette. Each color in the image will be replaced with the colors specified in the new palette."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [
            "Graphics.InvalidPaletteException"
          ],
          "docstring": "Thrown if the palette size does not match the current palette."
        }
      ],
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.BoundingBox",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/BoundingBox.html",
  "docstring": "An object representing a bounding box in the UI",
  "attributes": [
    {
      "name": "height",
      "docstring": "Represents the height of the bounding box",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    },
    {
      "name": "width",
      "docstring": "Represents the width of the bounding box",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    },
    {
      "name": "x",
      "docstring": "Represents the x coordinate for the origin of the bounding box",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    },
    {
      "name": "y",
      "docstring": "Represents the y coordinate for the origin of the bounding box",
      "type": "Lang.Number",
      "nullable": true,
      "returns": null
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.BitmapTexture",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/BitmapTexture.html",
  "docstring": "An object representing a textured area with in a bitmap that can be can be used to fill a primitive drawable object.",
  "methods": [
    {
      "name": "initialize",
      "ast": {
        "name": "initialize",
        "parameters": [
          {
            "name": "options",
            "types": [
              {
                "type": "Lang.Dictionary",
                "keys": [
                  {
                    "name": ":bitmap",
                    "types": [
                      {
                        "type": "Graphics.BitmapType"
                      },
                      {
                        "type": "Lang.Symbol"
                      }
                    ]
                  },
                  {
                    "name": ":offsetX",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  },
                  {
                    "name": ":offsetY",
                    "types": [
                      {
                        "type": "Lang.Number"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "returns": []
      },
      "parameters": [
        {
          "name": "options",
          "docstring": "A dictionary representing a bitmap with an offset to be used as a texture. @option :bitmap Toybox::Graphics::BufferedBitmap, Toybox::Graphics::BitmapReference to be used as a texture. @option :offsetX [Toybox::Lang::Number](../../Toybox/Lang/Number.html) An x offset with in the bitmap to be mapped to the x coordinate of the origin of the primitive object. @option :offsetY [Toybox::Lang::Number](../../Toybox/Lang/Number.html) An y offset with in the bitmap to be mapped to the y coordinate of the origin of the primitive object."
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    },
    {
      "name": "setOffset",
      "ast": {
        "name": "setOffset",
        "parameters": [
          {
            "name": "offsetX",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          },
          {
            "name": "offsetY",
            "types": [
              {
                "type": "Lang.Number"
              }
            ]
          }
        ],
        "returns": [
          {
            "type": "Void"
          }
        ]
      },
      "parameters": [
        {
          "name": "offsetX",
          "docstring": "[Toybox::Lang::Number](../../Toybox/Lang/Number.html) An x offset with in the bitmap to be used to render the texture"
        },
        {
          "name": "offsetY",
          "docstring": "[Toybox::Lang::Number](../../Toybox/Lang/Number.html) An y offset with in the bitmap to be used to render the texture"
        }
      ],
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": null,
      "returns": []
    }
  ]
},
{
  "type": "class",
  "parent": "Toybox.Graphics",
  "name": "Toybox.Graphics.BitmapReference",
  "url": "https://developer.garmin.com/connect-iq/api-docs/Toybox/Graphics/BitmapReference.html",
  "docstring": "Object that references a bitmap resource allocated from the graphics memory pool",
  "methods": [
    {
      "name": "getHeight",
      "ast": {
        "name": "getHeight",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "Thrown if resource cannot be loaded or restored because there isn't enough free pool to load the resource"
        }
      ],
      "returns": [
        "Lang.Number"
      ]
    },
    {
      "name": "getWidth",
      "ast": {
        "name": "getWidth",
        "parameters": [],
        "returns": [
          {
            "type": "Lang.Number"
          }
        ]
      },
      "parameters": null,
      "nullable": false,
      "void": false,
      "depricated": false,
      "throws": [
        {
          "types": [],
          "docstring": "Thrown if resource cannot be loaded or restored because there isn't enough free pool to load the resource"
        }
      ],
      "returns": [
        "Lang.Number"
      ]
    }
  ]
}
]